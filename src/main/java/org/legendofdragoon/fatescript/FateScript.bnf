{
  parserClass='org.legendofdragoon.fatescript.psi.FateScriptParser'
  parserUtilClass='com.intellij.lang.parser.GeneratedParserUtilBase'

  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'

  psiClassPrefix='FateScript'
  psiImplClassSuffix='Impl'
  psiPackage='org.legendofdragoon.fatescript.psi'
  psiImplPackage='org.legendofdragoon.fatescript.psi.impl'

  elementTypeHolderClass='org.legendofdragoon.fatescript.psi.FateScriptTypes'
  elementTypeClass='org.legendofdragoon.fatescript.psi.FateScriptElementType'
  tokenTypeClass='org.legendofdragoon.fatescript.psi.FateScriptTokenType'

  psiImplUtilClass='org.legendofdragoon.fatescript.psi.impl.FateScriptPsiImplUtil'

  tokens=[
    eol='regexp:\n'
    whitespace='regexp:[ \t]+'

    comma=','
    doublecolon='::'
    colon=':'
    lbracket='['
    rbracket=']'
    plus='+'
    lte='<='
    lt='<'
    gte='>='
    gt='>'
    eq='=='
    neq='!='
    cand='&'
    nand='!&'
    
    // Keyword ops
    yield='yield'
    return='return'
    rewind='rewind'

    // Loop ops
    while='while'

    // Wait ops
    wait='wait'
    wait_cmp='wait_cmp'

    // Bitwise ops
    and='and'
    or='or'
    xor='xor'
    andor='andor'
    not='not'
    shl='shl'
    shr='shr'

    // Math ops
    add='add'
    sub='sub'
    sub_rev='sub_rev'
    incr='incr'
    decr='decr'
    neg='neg'
    abs='abs'
    mul='mul'
    div='div'
    div_rev='div_rev'
    mod='mod'
    mod_rev='mod_rev'
    mul_12='mul_12'
    div_12='div_12'
    div_12_rev='div_12_rev'
    sqrt='sqrt'
    rand='rand'
    sin_12='sin_12'
    cos_12='cos_12'
    atan2_12='atan2_12'

    // Jump ops
    jmp='jmp'
    jmp_cmp='jmp_cmp'
    jmp_table='jmp_table'

    // Gosub ops
    gosub='gosub'
    gosub_table='gosub_table'

    // Script ops
    consume='consume'
    deallocate='deallocate'
    deallocate_other='deallocate_other'
    fork='fork'
    fork_reenter='fork_reenter'

    // Other ops
    call='call'
    mov='mov'
    memcpy='memcpy'

    // Useless ops
    swap_broken='swap_broken'
    depth='depth'
    noop='noop'

    // Datatypes
    entrypoint='entrypoint'
    data='data'
    rel='rel'

    // Subscriptable params
    inl='inl'
    var='var'
    stor='stor'
    str='str'

    comment='regexp:;.*'
    id='regexp:[a-zA-Z_]\w*'
    label='regexp:[a-zA-Z_]\w*'
    classname='regexp:[a-zA-Z_]\w*'
    method='regexp:[a-zA-Z_]\w*'
    dec='regexp:\d{1,10}'
    hex='regexp:0x[a-fA-F\d]{1,8}'
    lodstring='regexp:.*'
  ]

  //name('.*root')='root'
  //extends('.*root')=root
}

root ::= (rootLine | eol)*
rootLine ::= !<<eof>> (dataRef | relativeJump | entry | code | labelHeader) (<<eof>> | eol)

// Datatypes
entry ::= entrypoint labelRef
relativeJump ::= rel labelRef
dataRef ::= data (number | (str lbracket textBlock rbracket))

labelRef ::= colon label { methods=[getReference] }
labelHeader ::= label colon {
  implements='org.legendofdragoon.fatescript.psi.FateScriptNamedElement'
  methods=[getName setName getNameIdentifier]
}

textBlock ::= lodstringTag | lodstring
lodstringTag ::= lt tags [eq dec] gt
private tags ::= sauto | sbat | elem | multibox | line | speed | colour | var

code ::= (op !colon) [params]

// Ops
private op ::= (keywordOps | while | waitOps | bitwiseOps | mathOps | jumpOps | gosubOps | scriptOps | otherOps | uselessOps) [params] { pin=1 }
keywordOps ::= return | yield | rewind
waitOps ::= wait | wait_cmp
bitwiseOps ::= and | or | xor | andor | not | shl | shr
mathOps ::= add | sub | sub_rev | incr | decr | neg | abs | mul | div | div_rev | mod | mod_rev | mul_12 | div_12 | div_12_rev | sqrt | rand | sin_12 | cos_12 | atan2_12
jumpOps ::= jmp | jmp_cmp | jmp_table
gosubOps ::= gosub | gosub_table
scriptOps ::= consume | deallocate | deallocate_other | fork | fork_reenter
otherOps ::= call | mov | memcpy
uselessOps ::= swap_broken | depth | noop

private params ::= param (comma param)* { pin=1 recoverWhile=paramRecover }
private paramRecover ::= !(eol)
private param ::= (methodRef | number | inlineGroup | gameVarGroup | storageGroup | cmp)
private cmp ::= '<=' | '<' | '>=' | '>' | '==' | '!=' | '&' | '!&'

methodRef ::= classname doublecolon method

// Inline
private inlineGroup ::= inlineTable1And2 | inlineTable3 | inlineTable4 | inline
inline ::= inl lbracket inlineLabelStorage rbracket
inlineTable1And2 ::= inl lbracket inlineTable1And2Jump rbracket
inlineTable1And2Jump ::= labelRef lbracket inlineLabelStorage [plus storage] rbracket
inlineTable3 ::= inl lbracket inlineTable3InlineOffset rbracket
inlineTable3InlineOffset ::= labelRef plus inl lbracket inlineTable3NumberOffset rbracket
inlineTable3NumberOffset ::= labelRef plus number
inlineTable4 ::=  inl lbracket inlineTable4Jump rbracket
inlineTable4Jump ::= labelRef lbracket inlineTable4NumberOffset rbracket
inlineTable4NumberOffset ::= inlineIndexedLabel plus number
inlineLabelStorage ::= labelRef [lbracket storage rbracket]
inlineIndexedLabel ::= labelRef lbracket number rbracket

// GameVar
private gameVarGroup ::= gameVarArray | gameVarArrayOffsetNumber | gameVarArrayOffsetStorage | gameVar
gameVar ::= var lbracket number [plus (storage | number)] rbracket
gameVarArray ::= var lbracket number rbracket lbracket (number | storage) rbracket
gameVarArrayOffsetNumber ::= var lbracket number plus number rbracket lbracket storage rbracket
gameVarArrayOffsetStorage ::= var lbracket number plus storage rbracket lbracket (number | storage) rbracket

// Storage
private storageGroup ::= (storage | otherStorage | otherStorageOffset | otherOtherStorage)
storage ::= stor lbracket number rbracket
otherStorage ::= stor lbracket storage comma number rbracket
otherStorageOffset ::= stor lbracket storage comma number [plus storage] rbracket
otherOtherStorage ::= stor lbracket otherStorage comma number rbracket

number ::= dec | hex

// Here to get parser to generate the ID IElementType
private dummyId ::= id
