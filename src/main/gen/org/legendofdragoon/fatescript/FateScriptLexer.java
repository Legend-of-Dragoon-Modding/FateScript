// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: FateScript.flex

package org.legendofdragoon.fatescript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.legendofdragoon.fatescript.psi.FateScriptTypes.*;


public class FateScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u0a00"+
    "\4\u0100\1\u1600\10\u0100\1\u1700\2\u0100\1\u1800\1\u1900\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1a00\1\u1700\1\u0900\3\u0100\1\u1300"+
    "\1\u1b00\114\u0100\1\u1c00\1\u1300\153\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\3\22\0\1\1"+
    "\12\0\1\5\1\6\3\0\1\7\11\10\1\11\1\12"+
    "\5\0\6\13\24\14\1\15\1\0\1\16\1\0\1\14"+
    "\1\0\1\17\5\13\2\14\1\20\2\14\1\21\1\14"+
    "\1\22\1\23\2\14\1\24\1\25\1\26\1\14\1\27"+
    "\1\14\1\30\2\14\12\0\1\31\32\0\1\32\u01bf\0"+
    "\12\33\206\0\12\33\306\0\12\33\234\0\12\33\166\0"+
    "\12\33\140\0\12\33\166\0\12\33\106\0\12\33\u0116\0"+
    "\12\33\106\0\12\33\346\0\1\32\u015f\0\12\33\46\0"+
    "\12\33\u012c\0\12\33\200\0\12\33\246\0\12\33\6\0"+
    "\12\33\266\0\12\33\126\0\12\33\206\0\12\33\6\0"+
    "\12\33\246\0\13\32\35\0\2\31\5\0\1\32\57\0"+
    "\1\32\240\0\1\32\u01cf\0\12\33\46\0\12\33\306\0"+
    "\12\33\26\0\12\33\126\0\12\33\u0196\0\12\33\6\0"+
    "\u0100\34\240\0\12\33\206\0\12\33\u012c\0\12\33\200\0"+
    "\12\33\74\0\12\33\220\0\12\33\166\0\12\33\146\0"+
    "\12\33\206\0\12\33\106\0\12\33\266\0\12\33\u0164\0"+
    "\62\33\100\0\12\33\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\4\6\1\0"+
    "\3\6\1\7\4\6\2\0\1\6\10\0\1\10\6\0"+
    "\1\11\10\0\1\12\12\0\1\13\47\0\1\14\163\0"+
    "\1\15\10\0\1\16\12\0\1\17\17\0\1\20\57\0"+
    "\1\21\12\0\1\22\150\0\1\23\5\0\1\24\6\0"+
    "\1\25\63\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[479];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196\0\u013f"+
    "\0\u01b3\0\u01d0\0\u01ed\0\u020a\0\u0227\0\u0244\0\u0261\0\u027e"+
    "\0\u029b\0\u02b8\0\u02d5\0\u02f2\0\u030f\0\u032c\0\u0349\0\u027e"+
    "\0\u0366\0\u0383\0\u03a0\0\u03bd\0\u03da\0\u03f7\0\35\0\u0414"+
    "\0\u0431\0\u044e\0\u046b\0\u0488\0\u04a5\0\u04c2\0\u04df\0\u04fc"+
    "\0\u0519\0\u0536\0\u0553\0\u0570\0\u058d\0\u05aa\0\u05c7\0\u05e4"+
    "\0\u0601\0\u061e\0\35\0\u063b\0\u0658\0\u0675\0\u0692\0\u04fc"+
    "\0\u06af\0\u06cc\0\u06e9\0\u0706\0\u0723\0\u0740\0\u075d\0\u077a"+
    "\0\u0797\0\u07b4\0\u07d1\0\u07ee\0\u080b\0\u0828\0\u0845\0\u0862"+
    "\0\u087f\0\u089c\0\u08b9\0\u08d6\0\u08f3\0\u0910\0\u092d\0\u094a"+
    "\0\u0967\0\u0984\0\u09a1\0\u09be\0\u09db\0\u09f8\0\u0a15\0\u0a32"+
    "\0\u0a4f\0\u0a6c\0\35\0\u0a89\0\u0aa6\0\u0ac3\0\u0ae0\0\u0afd"+
    "\0\u0b1a\0\u0b37\0\u0b54\0\u0b71\0\u0b8e\0\u0bab\0\u0bc8\0\u0be5"+
    "\0\u0c02\0\u0c1f\0\u0c3c\0\u0c59\0\u0c76\0\u0c93\0\u0cb0\0\u0ccd"+
    "\0\u0cea\0\u0d07\0\u0d24\0\u0d41\0\u0d5e\0\u0d7b\0\u0d98\0\u0db5"+
    "\0\u0dd2\0\u0def\0\u0e0c\0\u0e29\0\u0e46\0\u0e63\0\u0e80\0\u0e9d"+
    "\0\u0eba\0\u0ed7\0\u0ef4\0\u0f11\0\u0f2e\0\u0f4b\0\u0f68\0\u0f85"+
    "\0\u0fa2\0\u0fbf\0\u0fdc\0\u0ff9\0\u1016\0\u1033\0\u1050\0\u106d"+
    "\0\u108a\0\u10a7\0\u10c4\0\u10e1\0\u10fe\0\u111b\0\u1138\0\u1155"+
    "\0\u1172\0\u118f\0\u11ac\0\u11c9\0\u11e6\0\u1203\0\u1220\0\u123d"+
    "\0\u125a\0\u1277\0\u1294\0\u12b1\0\u12ce\0\u12eb\0\u1308\0\u1325"+
    "\0\u1342\0\u135f\0\u137c\0\u1399\0\u13b6\0\u13d3\0\u13f0\0\u140d"+
    "\0\u142a\0\u1447\0\u1464\0\u1481\0\u149e\0\u14bb\0\u14d8\0\u14f5"+
    "\0\u1512\0\u152f\0\u154c\0\u1569\0\u1586\0\u15a3\0\u15c0\0\u15dd"+
    "\0\u15fa\0\u1617\0\u1634\0\u1651\0\u166e\0\u168b\0\u16a8\0\u16c5"+
    "\0\u16e2\0\u16ff\0\u171c\0\u1739\0\u1756\0\u1773\0\u1790\0\u17ad"+
    "\0\u17ca\0\u17e7\0\u1804\0\u1821\0\u183e\0\u185b\0\u1878\0\35"+
    "\0\u1895\0\u18b2\0\u18cf\0\u18ec\0\u1909\0\u1926\0\u1943\0\u1960"+
    "\0\u197d\0\u199a\0\35\0\u19b7\0\u19d4\0\u19f1\0\u1a0e\0\u1a2b"+
    "\0\u1a48\0\u1a65\0\u1a82\0\u1a9f\0\u1790\0\u1abc\0\u1ad9\0\u1af6"+
    "\0\u1b13\0\u1b30\0\35\0\u1b4d\0\u1b6a\0\u1b87\0\u1ba4\0\u1bc1"+
    "\0\u1bde\0\u1bfb\0\u1c18\0\u1c35\0\u1c52\0\u1c6f\0\u1c8c\0\u1ca9"+
    "\0\u1cc6\0\u1ce3\0\u1d00\0\u1d1d\0\u1d3a\0\u1d57\0\u1d74\0\u1d91"+
    "\0\u1dae\0\u1dcb\0\u1de8\0\u1e05\0\u1e22\0\u1e3f\0\u1e5c\0\u1e79"+
    "\0\u1e96\0\u1eb3\0\u1ed0\0\u1eed\0\u1f0a\0\u1f27\0\u1f44\0\u1f61"+
    "\0\u1f7e\0\u1f9b\0\u1fb8\0\u1fd5\0\u1ff2\0\u200f\0\u202c\0\u2049"+
    "\0\u2066\0\u2083\0\35\0\u20a0\0\u20bd\0\u20da\0\u20f7\0\u2114"+
    "\0\u2131\0\u214e\0\u216b\0\u2188\0\u21a5\0\35\0\u21c2\0\u21df"+
    "\0\u21fc\0\u2219\0\u2236\0\u2253\0\u2270\0\u228d\0\u22aa\0\u22c7"+
    "\0\u22e4\0\u2301\0\u231e\0\u233b\0\u2358\0\u2375\0\u2392\0\u23af"+
    "\0\u23cc\0\u23e9\0\u2406\0\u2423\0\u2440\0\u245d\0\u247a\0\u2497"+
    "\0\u24b4\0\u24d1\0\u24ee\0\u250b\0\u2528\0\u2545\0\u2562\0\u257f"+
    "\0\u259c\0\u25b9\0\u25d6\0\u25f3\0\u2610\0\u262d\0\u264a\0\u2667"+
    "\0\u2684\0\u26a1\0\u26be\0\u26db\0\u26f8\0\u2715\0\u2732\0\u274f"+
    "\0\u276c\0\u2789\0\u27a6\0\u27c3\0\u27e0\0\u27fd\0\u281a\0\u2837"+
    "\0\u2854\0\u2871\0\u288e\0\u28ab\0\u28c8\0\u28e5\0\u2902\0\u291f"+
    "\0\u293c\0\u2959\0\u2976\0\u2993\0\u29b0\0\u29cd\0\u29ea\0\u2a07"+
    "\0\u2a24\0\u2a41\0\u2a5e\0\u2a7b\0\u2a98\0\u2ab5\0\u2ad2\0\u2aef"+
    "\0\u2b0c\0\u2b29\0\u2b46\0\u2b63\0\u2b80\0\u2b9d\0\u2bba\0\u2bd7"+
    "\0\u2bf4\0\u2c11\0\u2c2e\0\u2c4b\0\u2c68\0\u2c85\0\u2ca2\0\u2cbf"+
    "\0\u2cdc\0\u2cf9\0\u2d16\0\u2d33\0\u2d50\0\u2d6d\0\35\0\u2d8a"+
    "\0\u2da7\0\u2dc4\0\u2de1\0\u2dfe\0\35\0\u2e1b\0\u2e38\0\u2e55"+
    "\0\u2e72\0\u2e8f\0\u2eac\0\35\0\u2ec9\0\u2ee6\0\u2f03\0\u2f20"+
    "\0\u2f3d\0\u2f5a\0\u2f77\0\u2f94\0\u2fb1\0\u2fce\0\u2feb\0\u3008"+
    "\0\u3025\0\u3042\0\u305f\0\u307c\0\u3099\0\u30b6\0\u30d3\0\u30f0"+
    "\0\u310d\0\u312a\0\u3147\0\u3164\0\u3181\0\u319e\0\u31bb\0\u31d8"+
    "\0\u31f5\0\u3212\0\u322f\0\u324c\0\u3269\0\u3286\0\u32a3\0\u32c0"+
    "\0\u32dd\0\u32fa\0\u3317\0\u3334\0\u3351\0\u336e\0\u338b\0\u33a8"+
    "\0\u33c5\0\u33e2\0\u33ff\0\u341c\0\u3439\0\u3456\0\u3473";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[479];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\3\2\2\1\5\1\6"+
    "\1\2\1\7\2\10\2\2\1\10\1\11\4\10\1\12"+
    "\1\10\1\13\1\10\4\2\36\0\1\3\2\0\1\3"+
    "\32\0\1\4\41\0\2\6\17\0\1\14\13\0\2\6"+
    "\24\0\2\7\3\0\24\7\1\0\2\7\10\0\2\10"+
    "\2\0\2\10\2\0\12\10\13\0\2\10\2\0\2\10"+
    "\2\0\3\10\1\15\6\10\13\0\2\10\2\0\2\10"+
    "\2\0\7\10\1\16\2\10\13\0\2\10\2\0\2\10"+
    "\2\0\1\17\11\10\13\0\2\20\2\0\1\20\3\0"+
    "\1\20\13\0\1\20\10\0\2\10\2\0\2\10\2\0"+
    "\2\10\1\21\7\10\13\0\2\10\2\0\2\10\2\0"+
    "\4\10\1\22\1\23\4\10\13\0\2\10\2\0\2\10"+
    "\2\0\5\10\1\24\4\10\5\0\4\25\2\0\2\10"+
    "\2\0\2\10\1\26\1\0\12\10\13\0\2\10\2\0"+
    "\2\10\2\0\5\10\1\27\4\10\13\0\2\10\2\0"+
    "\2\10\1\30\1\0\12\10\5\0\4\31\2\0\2\10"+
    "\2\0\2\10\1\32\1\0\12\10\5\0\4\25\10\0"+
    "\1\26\20\0\4\26\2\0\1\33\1\34\1\35\17\0"+
    "\2\26\3\0\4\36\2\0\2\10\2\0\2\10\1\37"+
    "\1\0\12\10\4\0\2\30\3\0\11\30\1\40\12\30"+
    "\1\0\2\30\2\0\4\31\10\0\1\32\20\0\4\32"+
    "\2\0\1\41\1\42\20\0\2\32\3\0\4\43\1\44"+
    "\1\0\2\45\4\0\1\46\1\47\11\0\1\50\5\0"+
    "\4\43\1\44\1\0\2\45\4\0\1\46\1\47\25\0"+
    "\2\51\2\0\2\51\2\0\12\51\5\0\4\36\10\0"+
    "\1\37\20\0\4\37\2\0\1\52\1\53\14\0\1\54"+
    "\3\0\2\37\3\0\4\55\1\56\1\0\2\57\5\0"+
    "\1\60\11\0\1\61\5\0\4\55\1\56\1\0\2\57"+
    "\5\0\1\60\17\0\4\43\1\44\7\0\1\46\1\47"+
    "\17\0\4\44\13\0\1\62\15\0\4\43\1\44\1\0"+
    "\2\63\4\0\1\46\1\47\17\0\4\46\2\0\1\64"+
    "\1\65\1\66\13\0\1\67\3\0\2\46\11\0\2\70"+
    "\2\0\1\70\3\0\1\70\13\0\1\70\2\0\4\43"+
    "\1\44\1\0\2\51\2\0\2\51\1\46\1\47\12\51"+
    "\5\0\4\71\2\0\2\72\5\0\1\73\11\0\1\74"+
    "\5\0\4\71\2\0\2\72\5\0\1\73\44\0\1\75"+
    "\7\0\4\55\1\56\10\0\1\60\17\0\4\56\20\0"+
    "\1\76\10\0\4\55\1\56\1\0\2\77\5\0\1\60"+
    "\17\0\4\100\10\0\1\101\26\0\2\102\2\0\1\102"+
    "\3\0\1\102\13\0\1\102\23\0\1\103\13\0\4\43"+
    "\1\44\1\0\2\104\4\0\1\46\1\47\17\0\4\105"+
    "\2\0\2\106\4\0\1\107\12\0\1\110\5\0\4\105"+
    "\2\0\2\106\4\0\1\107\26\0\2\111\2\0\2\111"+
    "\2\0\12\111\32\0\1\112\7\0\4\43\1\44\1\0"+
    "\2\113\2\0\1\113\1\0\1\46\1\47\1\113\13\0"+
    "\1\113\2\0\4\71\11\0\1\73\17\0\4\71\2\0"+
    "\2\114\5\0\1\73\25\0\2\115\2\0\1\115\3\0"+
    "\1\115\13\0\1\115\24\0\1\116\37\0\1\117\7\0"+
    "\4\55\1\56\1\0\2\120\5\0\1\60\17\0\4\101"+
    "\2\0\1\121\1\122\14\0\1\123\3\0\2\101\3\0"+
    "\4\55\1\56\1\0\2\124\2\0\1\124\2\0\1\60"+
    "\1\124\13\0\1\124\22\0\1\125\14\0\4\43\1\44"+
    "\1\0\2\126\4\0\1\46\1\47\17\0\4\105\10\0"+
    "\1\107\20\0\4\105\2\0\2\127\4\0\1\107\20\0"+
    "\4\107\20\0\1\130\3\0\2\107\11\0\2\131\2\0"+
    "\1\131\3\0\1\131\13\0\1\131\2\0\4\105\2\0"+
    "\2\111\2\0\2\111\1\107\1\0\12\111\27\0\1\132"+
    "\12\0\4\43\1\44\1\0\2\133\2\0\1\133\1\0"+
    "\1\46\1\47\1\133\13\0\1\133\2\0\4\71\2\0"+
    "\2\134\5\0\1\73\17\0\4\71\2\0\2\135\2\0"+
    "\1\135\2\0\1\73\1\135\13\0\1\135\25\0\1\136"+
    "\33\0\1\137\12\0\4\55\1\56\1\0\2\140\5\0"+
    "\1\60\17\0\4\141\2\0\2\142\5\0\1\143\11\0"+
    "\1\144\5\0\4\141\2\0\2\142\5\0\1\143\44\0"+
    "\1\145\7\0\4\55\1\56\1\0\2\146\2\0\1\146"+
    "\2\0\1\60\1\146\13\0\1\146\2\0\4\125\10\0"+
    "\1\147\20\0\4\43\1\44\1\0\2\150\4\0\1\46"+
    "\1\47\17\0\4\105\2\0\2\151\4\0\1\107\45\0"+
    "\1\152\7\0\4\105\2\0\2\153\2\0\1\153\1\0"+
    "\1\107\1\0\1\153\13\0\1\153\25\0\1\154\11\0"+
    "\4\43\1\44\1\0\2\155\2\0\1\155\1\0\1\46"+
    "\1\47\1\155\13\0\1\155\2\0\4\71\2\0\2\156"+
    "\5\0\1\73\17\0\4\71\2\0\2\157\2\0\1\157"+
    "\2\0\1\73\1\157\13\0\1\157\2\0\4\136\10\0"+
    "\1\160\13\0\2\136\26\0\1\161\11\0\4\55\1\56"+
    "\1\0\2\162\5\0\1\60\17\0\4\141\11\0\1\143"+
    "\17\0\4\141\2\0\2\163\5\0\1\143\25\0\2\164"+
    "\2\0\1\164\3\0\1\164\13\0\1\164\24\0\1\165"+
    "\12\0\4\55\1\56\1\0\2\166\2\0\1\166\2\0"+
    "\1\60\1\166\13\0\1\166\10\0\1\167\1\170\1\171"+
    "\24\0\4\43\1\44\1\0\2\172\4\0\1\46\1\47"+
    "\17\0\4\105\2\0\2\173\4\0\1\107\42\0\1\174"+
    "\12\0\4\105\2\0\2\175\2\0\1\175\1\0\1\107"+
    "\1\0\1\175\13\0\1\175\2\0\4\154\10\0\1\176"+
    "\13\0\2\154\3\0\4\43\1\44\1\0\2\177\2\0"+
    "\1\177\1\0\1\46\1\47\1\177\13\0\1\177\2\0"+
    "\4\71\2\0\2\200\5\0\1\73\17\0\4\71\2\0"+
    "\2\201\2\0\1\201\2\0\1\73\1\201\13\0\1\201"+
    "\2\0\4\160\2\0\1\202\1\203\14\0\1\204\3\0"+
    "\2\160\3\0\4\161\10\0\1\205\20\0\4\55\1\56"+
    "\1\0\2\206\5\0\1\60\17\0\4\141\2\0\2\207"+
    "\5\0\1\143\17\0\4\141\2\0\2\210\2\0\1\210"+
    "\2\0\1\143\1\210\13\0\1\210\25\0\1\211\11\0"+
    "\4\55\1\56\1\0\2\212\2\0\1\212\2\0\1\60"+
    "\1\212\13\0\1\212\2\0\4\213\1\214\1\0\2\215"+
    "\17\0\1\216\5\0\4\213\1\214\1\0\2\215\33\0"+
    "\2\217\2\0\2\217\2\0\12\217\5\0\4\43\1\44"+
    "\1\0\2\220\4\0\1\46\1\47\17\0\4\105\2\0"+
    "\2\221\4\0\1\107\43\0\1\222\11\0\4\105\2\0"+
    "\2\223\2\0\1\223\1\0\1\107\1\0\1\223\13\0"+
    "\1\223\2\0\4\176\2\0\1\224\1\225\20\0\2\176"+
    "\3\0\4\43\1\44\1\0\2\226\2\0\1\226\1\0"+
    "\1\46\1\47\1\226\13\0\1\226\2\0\4\71\2\0"+
    "\2\227\5\0\1\73\17\0\4\71\2\0\2\230\2\0"+
    "\1\230\2\0\1\73\1\230\13\0\1\230\2\0\4\231"+
    "\2\0\2\232\5\0\1\233\11\0\1\234\5\0\4\231"+
    "\2\0\2\232\5\0\1\233\44\0\1\235\7\0\4\205"+
    "\2\0\1\236\1\237\20\0\2\205\3\0\4\55\1\56"+
    "\1\0\2\240\5\0\1\60\17\0\4\141\2\0\2\241"+
    "\5\0\1\143\17\0\4\141\2\0\2\242\2\0\1\242"+
    "\2\0\1\143\1\242\13\0\1\242\2\0\4\211\10\0"+
    "\1\243\13\0\2\211\3\0\4\55\1\56\1\0\2\244"+
    "\2\0\1\244\2\0\1\60\1\244\13\0\1\244\2\0"+
    "\4\213\1\214\30\0\4\214\2\0\1\245\1\246\25\0"+
    "\4\213\1\214\1\0\2\247\33\0\2\250\2\0\1\250"+
    "\3\0\1\250\13\0\1\250\2\0\4\213\1\214\1\0"+
    "\2\217\2\0\2\217\2\0\12\217\5\0\4\43\1\44"+
    "\1\0\2\251\4\0\1\46\1\47\17\0\4\105\2\0"+
    "\2\252\4\0\1\107\20\0\4\222\10\0\1\253\13\0"+
    "\2\222\3\0\4\105\2\0\2\254\2\0\1\254\1\0"+
    "\1\107\1\0\1\254\13\0\1\254\2\0\4\255\2\0"+
    "\2\256\5\0\1\257\11\0\1\260\5\0\4\255\2\0"+
    "\2\256\5\0\1\257\17\0\4\43\1\44\1\0\2\261"+
    "\2\0\1\261\1\0\1\46\1\47\1\261\13\0\1\261"+
    "\2\0\4\71\2\0\2\262\5\0\1\73\17\0\4\71"+
    "\2\0\2\263\2\0\1\263\2\0\1\73\1\263\13\0"+
    "\1\263\2\0\4\231\11\0\1\233\17\0\4\231\2\0"+
    "\2\264\5\0\1\233\17\0\4\233\1\0\1\265\35\0"+
    "\2\266\2\0\1\266\3\0\1\266\13\0\1\266\24\0"+
    "\1\267\12\0\4\270\2\0\2\271\5\0\1\272\11\0"+
    "\1\273\5\0\4\270\2\0\2\271\5\0\1\272\17\0"+
    "\4\55\1\56\1\0\2\274\5\0\1\60\17\0\4\141"+
    "\2\0\2\275\5\0\1\143\17\0\4\141\2\0\2\276"+
    "\2\0\1\276\2\0\1\143\1\276\13\0\1\276\2\0"+
    "\4\243\2\0\1\277\1\300\20\0\2\243\3\0\4\55"+
    "\1\56\1\0\2\301\2\0\1\301\2\0\1\60\1\301"+
    "\13\0\1\301\2\0\4\302\2\0\2\303\5\0\1\304"+
    "\11\0\1\305\5\0\4\302\2\0\2\303\5\0\1\304"+
    "\17\0\4\213\1\214\1\0\2\306\25\0\4\213\1\214"+
    "\1\0\2\307\2\0\1\307\3\0\1\307\13\0\1\307"+
    "\2\0\4\43\1\44\1\0\2\43\4\0\1\46\1\47"+
    "\17\0\4\105\2\0\2\310\4\0\1\107\20\0\4\253"+
    "\2\0\1\311\1\312\20\0\2\253\3\0\4\105\2\0"+
    "\2\313\2\0\1\313\1\0\1\107\1\0\1\313\13\0"+
    "\1\313\2\0\4\255\11\0\1\257\17\0\4\255\2\0"+
    "\2\314\5\0\1\257\17\0\4\257\11\0\1\315\25\0"+
    "\2\316\2\0\1\316\3\0\1\316\13\0\1\316\2\0"+
    "\4\43\1\44\1\0\2\43\2\0\1\43\1\0\1\46"+
    "\1\47\1\43\13\0\1\43\2\0\4\71\2\0\2\317"+
    "\5\0\1\73\17\0\4\71\2\0\2\320\2\0\1\320"+
    "\2\0\1\73\1\320\13\0\1\320\2\0\4\231\2\0"+
    "\2\321\5\0\1\233\17\0\4\265\2\0\1\322\1\323"+
    "\25\0\4\231\2\0\2\324\2\0\1\324\2\0\1\233"+
    "\1\324\13\0\1\324\25\0\1\325\11\0\4\270\11\0"+
    "\1\272\17\0\4\270\2\0\2\326\5\0\1\272\17\0"+
    "\4\272\11\0\1\327\25\0\2\330\2\0\1\330\3\0"+
    "\1\330\13\0\1\330\2\0\4\55\1\56\1\0\2\55"+
    "\5\0\1\60\17\0\4\141\2\0\2\331\5\0\1\143"+
    "\17\0\4\141\2\0\2\332\2\0\1\332\2\0\1\143"+
    "\1\332\13\0\1\332\2\0\4\333\2\0\2\334\5\0"+
    "\1\335\11\0\1\336\5\0\4\333\2\0\2\334\5\0"+
    "\1\335\17\0\4\55\1\56\1\0\2\55\2\0\1\55"+
    "\2\0\1\60\1\55\13\0\1\55\2\0\4\302\11\0"+
    "\1\304\17\0\4\302\2\0\2\337\5\0\1\304\17\0"+
    "\4\304\11\0\1\340\25\0\2\341\2\0\1\341\3\0"+
    "\1\341\13\0\1\341\2\0\4\213\1\214\1\0\2\342"+
    "\25\0\4\213\1\214\1\0\2\343\2\0\1\343\3\0"+
    "\1\343\13\0\1\343\2\0\4\105\2\0\2\344\4\0"+
    "\1\107\20\0\4\345\2\0\2\346\5\0\1\347\11\0"+
    "\1\350\5\0\4\345\2\0\2\346\5\0\1\347\17\0"+
    "\4\105\2\0\2\351\2\0\1\351\1\0\1\107\1\0"+
    "\1\351\13\0\1\351\2\0\4\255\2\0\2\352\5\0"+
    "\1\257\17\0\4\315\11\0\1\353\17\0\4\255\2\0"+
    "\2\354\2\0\1\354\2\0\1\257\1\354\13\0\1\354"+
    "\2\0\4\71\2\0\2\71\5\0\1\73\17\0\4\71"+
    "\2\0\2\71\2\0\1\71\2\0\1\73\1\71\13\0"+
    "\1\71\2\0\4\231\2\0\2\355\5\0\1\233\17\0"+
    "\4\356\1\357\1\0\2\360\17\0\1\361\5\0\4\356"+
    "\1\357\1\0\2\360\25\0\4\231\2\0\2\362\2\0"+
    "\1\362\2\0\1\233\1\362\13\0\1\362\2\0\4\325"+
    "\10\0\1\363\13\0\2\325\3\0\4\270\2\0\2\364"+
    "\5\0\1\272\17\0\4\365\10\0\1\366\20\0\4\270"+
    "\2\0\2\367\2\0\1\367\2\0\1\272\1\367\13\0"+
    "\1\367\2\0\4\141\2\0\2\370\5\0\1\143\17\0"+
    "\4\141\2\0\2\371\2\0\1\371\2\0\1\143\1\371"+
    "\13\0\1\371\2\0\4\333\11\0\1\335\17\0\4\333"+
    "\2\0\2\372\5\0\1\335\17\0\4\335\11\0\1\373"+
    "\25\0\2\374\2\0\1\374\3\0\1\374\13\0\1\374"+
    "\2\0\4\302\2\0\2\375\5\0\1\304\17\0\4\302"+
    "\2\0\2\376\2\0\1\376\2\0\1\304\1\376\13\0"+
    "\1\376\2\0\4\213\1\214\1\0\2\377\25\0\4\213"+
    "\1\214\1\0\2\u0100\2\0\1\u0100\3\0\1\u0100\13\0"+
    "\1\u0100\2\0\4\105\2\0\2\105\4\0\1\107\20\0"+
    "\4\345\11\0\1\347\17\0\4\345\2\0\2\u0101\5\0"+
    "\1\347\17\0\4\347\11\0\1\u0102\25\0\2\u0103\2\0"+
    "\1\u0103\3\0\1\u0103\13\0\1\u0103\2\0\4\105\2\0"+
    "\2\105\2\0\1\105\1\0\1\107\1\0\1\105\13\0"+
    "\1\105\2\0\4\255\2\0\2\u0104\5\0\1\257\17\0"+
    "\4\255\2\0\2\u0105\2\0\1\u0105\2\0\1\257\1\u0105"+
    "\13\0\1\u0105\2\0\4\231\2\0\2\u0106\5\0\1\233"+
    "\17\0\4\356\1\357\30\0\4\357\20\0\1\u0107\10\0"+
    "\4\356\1\357\1\0\2\u0108\33\0\2\u0109\2\0\1\u0109"+
    "\3\0\1\u0109\13\0\1\u0109\2\0\4\231\2\0\2\u010a"+
    "\2\0\1\u010a\2\0\1\233\1\u010a\13\0\1\u010a\2\0"+
    "\4\363\2\0\1\u010b\1\u010c\20\0\2\363\3\0\4\270"+
    "\2\0\2\u010d\5\0\1\272\17\0\4\366\2\0\1\u010e"+
    "\1\u010f\14\0\1\u0110\3\0\2\366\3\0\4\270\2\0"+
    "\2\u0111\2\0\1\u0111\2\0\1\272\1\u0111\13\0\1\u0111"+
    "\2\0\4\141\2\0\2\u0112\5\0\1\143\17\0\4\141"+
    "\2\0\2\u0113\2\0\1\u0113\2\0\1\143\1\u0113\13\0"+
    "\1\u0113\2\0\4\333\2\0\2\u0114\5\0\1\335\17\0"+
    "\4\333\2\0\2\u0115\2\0\1\u0115\2\0\1\335\1\u0115"+
    "\13\0\1\u0115\2\0\4\302\2\0\2\u0116\5\0\1\304"+
    "\17\0\4\302\2\0\2\u0117\2\0\1\u0117\2\0\1\304"+
    "\1\u0117\13\0\1\u0117\2\0\4\213\1\214\1\0\2\u0118"+
    "\25\0\4\213\1\214\1\0\2\u0119\2\0\1\u0119\3\0"+
    "\1\u0119\13\0\1\u0119\2\0\4\345\2\0\2\u011a\5\0"+
    "\1\347\17\0\4\u0102\11\0\1\u011b\17\0\4\345\2\0"+
    "\2\u011c\2\0\1\u011c\2\0\1\347\1\u011c\13\0\1\u011c"+
    "\2\0\4\255\2\0\2\u011d\5\0\1\257\17\0\4\255"+
    "\2\0\2\u011e\2\0\1\u011e\2\0\1\257\1\u011e\13\0"+
    "\1\u011e\2\0\4\231\2\0\2\u011f\5\0\1\233\44\0"+
    "\1\u0120\7\0\4\356\1\357\1\0\2\u0121\25\0\4\356"+
    "\1\357\1\0\2\u0122\2\0\1\u0122\3\0\1\u0122\13\0"+
    "\1\u0122\2\0\4\231\2\0\2\u0123\2\0\1\u0123\2\0"+
    "\1\233\1\u0123\13\0\1\u0123\2\0\4\u0124\2\0\2\u0125"+
    "\5\0\1\u0126\11\0\1\u0127\5\0\4\u0124\2\0\2\u0125"+
    "\5\0\1\u0126\17\0\4\270\2\0\2\u0128\5\0\1\272"+
    "\17\0\4\u0129\2\0\2\u012a\5\0\1\u012b\11\0\1\u012c"+
    "\5\0\4\u0129\2\0\2\u012a\5\0\1\u012b\44\0\1\u012d"+
    "\7\0\4\270\2\0\2\u012e\2\0\1\u012e\2\0\1\272"+
    "\1\u012e\13\0\1\u012e\2\0\4\141\2\0\2\141\5\0"+
    "\1\143\17\0\4\141\2\0\2\141\2\0\1\141\2\0"+
    "\1\143\1\141\13\0\1\141\2\0\4\333\2\0\2\u012f"+
    "\5\0\1\335\17\0\4\333\2\0\2\u0130\2\0\1\u0130"+
    "\2\0\1\335\1\u0130\13\0\1\u0130\2\0\4\302\2\0"+
    "\2\u0131\5\0\1\304\17\0\4\302\2\0\2\u0132\2\0"+
    "\1\u0132\2\0\1\304\1\u0132\13\0\1\u0132\2\0\4\213"+
    "\1\214\1\0\2\u0133\25\0\4\213\1\214\1\0\2\u0134"+
    "\2\0\1\u0134\3\0\1\u0134\13\0\1\u0134\2\0\4\345"+
    "\2\0\2\u0135\5\0\1\347\17\0\4\u011b\11\0\1\u0136"+
    "\17\0\4\345\2\0\2\u0137\2\0\1\u0137\2\0\1\347"+
    "\1\u0137\13\0\1\u0137\2\0\4\255\2\0\2\u0138\5\0"+
    "\1\257\17\0\4\255\2\0\2\u0139\2\0\1\u0139\2\0"+
    "\1\257\1\u0139\13\0\1\u0139\2\0\4\231\2\0\2\u013a"+
    "\5\0\1\233\41\0\1\u013b\12\0\4\356\1\357\1\0"+
    "\2\u013c\25\0\4\356\1\357\1\0\2\u013d\2\0\1\u013d"+
    "\3\0\1\u013d\13\0\1\u013d\2\0\4\231\2\0\2\u013e"+
    "\2\0\1\u013e\2\0\1\233\1\u013e\13\0\1\u013e\2\0"+
    "\4\u0124\11\0\1\u0126\17\0\4\u0124\2\0\2\u013f\5\0"+
    "\1\u0126\17\0\4\u0126\1\0\1\u0140\35\0\2\u0141\2\0"+
    "\1\u0141\3\0\1\u0141\13\0\1\u0141\2\0\4\270\2\0"+
    "\2\u0142\5\0\1\272\17\0\4\u0129\11\0\1\u012b\17\0"+
    "\4\u0129\2\0\2\u0143\5\0\1\u012b\25\0\2\u0144\2\0"+
    "\1\u0144\3\0\1\u0144\13\0\1\u0144\24\0\1\u0145\12\0"+
    "\4\270\2\0\2\u0146\2\0\1\u0146\2\0\1\272\1\u0146"+
    "\13\0\1\u0146\2\0\4\333\2\0\2\u0147\5\0\1\335"+
    "\17\0\4\333\2\0\2\u0148\2\0\1\u0148\2\0\1\335"+
    "\1\u0148\13\0\1\u0148\2\0\4\302\2\0\2\u0149\5\0"+
    "\1\304\17\0\4\302\2\0\2\u014a\2\0\1\u014a\2\0"+
    "\1\304\1\u014a\13\0\1\u014a\2\0\4\213\1\214\1\0"+
    "\2\u014b\25\0\4\213\1\214\1\0\2\u014c\2\0\1\u014c"+
    "\3\0\1\u014c\13\0\1\u014c\2\0\4\345\2\0\2\u014d"+
    "\5\0\1\347\17\0\4\345\2\0\2\u014e\2\0\1\u014e"+
    "\2\0\1\347\1\u014e\13\0\1\u014e\2\0\4\255\2\0"+
    "\2\u014f\5\0\1\257\17\0\4\255\2\0\2\u0150\2\0"+
    "\1\u0150\2\0\1\257\1\u0150\13\0\1\u0150\2\0\4\231"+
    "\2\0\2\u0151\5\0\1\233\42\0\1\u0152\11\0\4\356"+
    "\1\357\1\0\2\u0153\25\0\4\356\1\357\1\0\2\u0154"+
    "\2\0\1\u0154\3\0\1\u0154\13\0\1\u0154\2\0\4\231"+
    "\2\0\2\u0155\2\0\1\u0155\2\0\1\233\1\u0155\13\0"+
    "\1\u0155\2\0\4\u0124\2\0\2\u0156\5\0\1\u0126\17\0"+
    "\4\u0140\2\0\1\u0157\1\u0158\25\0\4\u0124\2\0\2\u0159"+
    "\2\0\1\u0159\2\0\1\u0126\1\u0159\13\0\1\u0159\2\0"+
    "\4\270\2\0\2\u015a\5\0\1\272\17\0\4\u0129\2\0"+
    "\2\u015b\5\0\1\u012b\17\0\4\u0129\2\0\2\u015c\2\0"+
    "\1\u015c\2\0\1\u012b\1\u015c\13\0\1\u015c\25\0\1\u015d"+
    "\11\0\4\270\2\0\2\u015e\2\0\1\u015e\2\0\1\272"+
    "\1\u015e\13\0\1\u015e\2\0\4\333\2\0\2\u015f\5\0"+
    "\1\335\17\0\4\333\2\0\2\u0160\2\0\1\u0160\2\0"+
    "\1\335\1\u0160\13\0\1\u0160\2\0\4\302\2\0\2\u0161"+
    "\5\0\1\304\17\0\4\302\2\0\2\u0162\2\0\1\u0162"+
    "\2\0\1\304\1\u0162\13\0\1\u0162\2\0\4\213\1\214"+
    "\1\0\2\213\25\0\4\213\1\214\1\0\2\213\2\0"+
    "\1\213\3\0\1\213\13\0\1\213\2\0\4\345\2\0"+
    "\2\u0163\5\0\1\347\17\0\4\345\2\0\2\u0164\2\0"+
    "\1\u0164\2\0\1\347\1\u0164\13\0\1\u0164\2\0\4\255"+
    "\2\0\2\u0165\5\0\1\257\17\0\4\255\2\0\2\u0166"+
    "\2\0\1\u0166\2\0\1\257\1\u0166\13\0\1\u0166\2\0"+
    "\4\231\2\0\2\231\5\0\1\233\17\0\4\u0152\10\0"+
    "\1\u0167\20\0\4\356\1\357\1\0\2\u0168\25\0\4\356"+
    "\1\357\1\0\2\u0169\2\0\1\u0169\3\0\1\u0169\13\0"+
    "\1\u0169\2\0\4\231\2\0\2\231\2\0\1\231\2\0"+
    "\1\233\1\231\13\0\1\231\2\0\4\u0124\2\0\2\u016a"+
    "\5\0\1\u0126\17\0\4\u016b\2\0\2\u016c\5\0\1\u016d"+
    "\11\0\1\u016e\5\0\4\u016b\2\0\2\u016c\5\0\1\u016d"+
    "\17\0\4\u0124\2\0\2\u016f\2\0\1\u016f\2\0\1\u0126"+
    "\1\u016f\13\0\1\u016f\2\0\4\270\2\0\2\u0170\5\0"+
    "\1\272\17\0\4\u0129\2\0\2\u0171\5\0\1\u012b\17\0"+
    "\4\u0129\2\0\2\u0172\2\0\1\u0172\2\0\1\u012b\1\u0172"+
    "\13\0\1\u0172\2\0\4\u015d\10\0\1\u0173\13\0\2\u015d"+
    "\3\0\4\270\2\0\2\u0174\2\0\1\u0174\2\0\1\272"+
    "\1\u0174\13\0\1\u0174\2\0\4\333\2\0\2\u0175\5\0"+
    "\1\335\17\0\4\333\2\0\2\u0176\2\0\1\u0176\2\0"+
    "\1\335\1\u0176\13\0\1\u0176\2\0\4\302\2\0\2\u0177"+
    "\5\0\1\304\17\0\4\302\2\0\2\u0178\2\0\1\u0178"+
    "\2\0\1\304\1\u0178\13\0\1\u0178\2\0\4\345\2\0"+
    "\2\u0179\5\0\1\347\17\0\4\345\2\0\2\u017a\2\0"+
    "\1\u017a\2\0\1\347\1\u017a\13\0\1\u017a\2\0\4\255"+
    "\2\0\2\255\5\0\1\257\17\0\4\255\2\0\2\255"+
    "\2\0\1\255\2\0\1\257\1\255\13\0\1\255\2\0"+
    "\4\u0167\2\0\1\u017b\1\u017c\20\0\2\u0167\3\0\4\356"+
    "\1\357\1\0\2\u017d\25\0\4\356\1\357\1\0\2\u017e"+
    "\2\0\1\u017e\3\0\1\u017e\13\0\1\u017e\2\0\4\u0124"+
    "\2\0\2\u017f\5\0\1\u0126\17\0\4\u016b\11\0\1\u016d"+
    "\17\0\4\u016b\2\0\2\u0180\5\0\1\u016d\17\0\4\u016d"+
    "\1\0\1\u0181\35\0\2\u0182\2\0\1\u0182\3\0\1\u0182"+
    "\13\0\1\u0182\2\0\4\u0124\2\0\2\u0183\2\0\1\u0183"+
    "\2\0\1\u0126\1\u0183\13\0\1\u0183\2\0\4\270\2\0"+
    "\2\270\5\0\1\272\17\0\4\u0129\2\0\2\u0184\5\0"+
    "\1\u012b\17\0\4\u0129\2\0\2\u0185\2\0\1\u0185\2\0"+
    "\1\u012b\1\u0185\13\0\1\u0185\2\0\4\u0173\2\0\1\u0186"+
    "\1\u0187\20\0\2\u0173\3\0\4\270\2\0\2\270\2\0"+
    "\1\270\2\0\1\272\1\270\13\0\1\270\2\0\4\333"+
    "\2\0\2\u0188\5\0\1\335\17\0\4\333\2\0\2\u0189"+
    "\2\0\1\u0189\2\0\1\335\1\u0189\13\0\1\u0189\2\0"+
    "\4\302\2\0\2\302\5\0\1\304\17\0\4\302\2\0"+
    "\2\302\2\0\1\302\2\0\1\304\1\302\13\0\1\302"+
    "\2\0\4\345\2\0\2\u018a\5\0\1\347\17\0\4\345"+
    "\2\0\2\u018b\2\0\1\u018b\2\0\1\347\1\u018b\13\0"+
    "\1\u018b\2\0\4\u018c\2\0\2\u018d\5\0\1\u018e\11\0"+
    "\1\u018f\5\0\4\u018c\2\0\2\u018d\5\0\1\u018e\17\0"+
    "\4\356\1\357\1\0\2\u0190\25\0\4\356\1\357\1\0"+
    "\2\u0191\2\0\1\u0191\3\0\1\u0191\13\0\1\u0191\2\0"+
    "\4\u0124\2\0\2\u0192\5\0\1\u0126\17\0\4\u016b\2\0"+
    "\2\u0193\5\0\1\u016d\17\0\4\u0181\2\0\1\u0194\1\u0195"+
    "\25\0\4\u016b\2\0\2\u0196\2\0\1\u0196\2\0\1\u016d"+
    "\1\u0196\13\0\1\u0196\2\0\4\u0124\2\0\2\u0197\2\0"+
    "\1\u0197\2\0\1\u0126\1\u0197\13\0\1\u0197\2\0\4\u0129"+
    "\2\0\2\u0198\5\0\1\u012b\17\0\4\u0129\2\0\2\u0199"+
    "\2\0\1\u0199\2\0\1\u012b\1\u0199\13\0\1\u0199\2\0"+
    "\4\u019a\2\0\2\u019b\5\0\1\u019c\11\0\1\u019d\5\0"+
    "\4\u019a\2\0\2\u019b\5\0\1\u019c\17\0\4\333\2\0"+
    "\2\333\5\0\1\335\17\0\4\333\2\0\2\333\2\0"+
    "\1\333\2\0\1\335\1\333\13\0\1\333\2\0\4\345"+
    "\2\0\2\345\5\0\1\347\17\0\4\345\2\0\2\345"+
    "\2\0\1\345\2\0\1\347\1\345\13\0\1\345\2\0"+
    "\4\u018c\11\0\1\u018e\17\0\4\u018c\2\0\2\u019e\5\0"+
    "\1\u018e\17\0\4\u018e\11\0\1\u019f\25\0\2\u01a0\2\0"+
    "\1\u01a0\3\0\1\u01a0\13\0\1\u01a0\2\0\4\356\1\357"+
    "\1\0\2\356\25\0\4\356\1\357\1\0\2\356\2\0"+
    "\1\356\3\0\1\356\13\0\1\356\2\0\4\u0124\2\0"+
    "\2\u01a1\5\0\1\u0126\17\0\4\u016b\2\0\2\u01a2\5\0"+
    "\1\u016d\17\0\4\u01a3\2\0\2\u01a4\5\0\1\u01a5\11\0"+
    "\1\u01a6\5\0\4\u01a3\2\0\2\u01a4\5\0\1\u01a5\17\0"+
    "\4\u016b\2\0\2\u01a7\2\0\1\u01a7\2\0\1\u016d\1\u01a7"+
    "\13\0\1\u01a7\2\0\4\u0124\2\0\2\u01a8\2\0\1\u01a8"+
    "\2\0\1\u0126\1\u01a8\13\0\1\u01a8\2\0\4\u0129\2\0"+
    "\2\u01a9\5\0\1\u012b\17\0\4\u0129\2\0\2\u01aa\2\0"+
    "\1\u01aa\2\0\1\u012b\1\u01aa\13\0\1\u01aa\2\0\4\u019a"+
    "\11\0\1\u019c\17\0\4\u019a\2\0\2\u01ab\5\0\1\u019c"+
    "\17\0\4\u019c\11\0\1\u01ac\25\0\2\u01ad\2\0\1\u01ad"+
    "\3\0\1\u01ad\13\0\1\u01ad\2\0\4\u018c\2\0\2\u01ae"+
    "\5\0\1\u018e\17\0\4\u018c\2\0\2\u01af\2\0\1\u01af"+
    "\2\0\1\u018e\1\u01af\13\0\1\u01af\2\0\4\u0124\2\0"+
    "\2\u01b0\5\0\1\u0126\17\0\4\u016b\2\0\2\u01b1\5\0"+
    "\1\u016d\17\0\4\u01a3\11\0\1\u01a5\17\0\4\u01a3\2\0"+
    "\2\u01b2\5\0\1\u01a5\25\0\2\u01b3\2\0\1\u01b3\3\0"+
    "\1\u01b3\13\0\1\u01b3\2\0\4\u016b\2\0\2\u01b4\2\0"+
    "\1\u01b4\2\0\1\u016d\1\u01b4\13\0\1\u01b4\2\0\4\u0124"+
    "\2\0\2\u01b5\2\0\1\u01b5\2\0\1\u0126\1\u01b5\13\0"+
    "\1\u01b5\2\0\4\u0129\2\0\2\u01b6\5\0\1\u012b\17\0"+
    "\4\u0129\2\0\2\u01b7\2\0\1\u01b7\2\0\1\u012b\1\u01b7"+
    "\13\0\1\u01b7\2\0\4\u019a\2\0\2\u01b8\5\0\1\u019c"+
    "\17\0\4\u019a\2\0\2\u01b9\2\0\1\u01b9\2\0\1\u019c"+
    "\1\u01b9\13\0\1\u01b9\2\0\4\u018c\2\0\2\u01ba\5\0"+
    "\1\u018e\17\0\4\u018c\2\0\2\u01bb\2\0\1\u01bb\2\0"+
    "\1\u018e\1\u01bb\13\0\1\u01bb\2\0\4\u0124\2\0\2\u0124"+
    "\5\0\1\u0126\17\0\4\u016b\2\0\2\u01bc\5\0\1\u016d"+
    "\17\0\4\u01a3\2\0\2\u01bd\5\0\1\u01a5\17\0\4\u01a3"+
    "\2\0\2\u01be\2\0\1\u01be\2\0\1\u01a5\1\u01be\13\0"+
    "\1\u01be\2\0\4\u016b\2\0\2\u01bf\2\0\1\u01bf\2\0"+
    "\1\u016d\1\u01bf\13\0\1\u01bf\2\0\4\u0124\2\0\2\u0124"+
    "\2\0\1\u0124\2\0\1\u0126\1\u0124\13\0\1\u0124\2\0"+
    "\4\u0129\2\0\2\u0129\5\0\1\u012b\17\0\4\u0129\2\0"+
    "\2\u0129\2\0\1\u0129\2\0\1\u012b\1\u0129\13\0\1\u0129"+
    "\2\0\4\u019a\2\0\2\u01c0\5\0\1\u019c\17\0\4\u019a"+
    "\2\0\2\u01c1\2\0\1\u01c1\2\0\1\u019c\1\u01c1\13\0"+
    "\1\u01c1\2\0\4\u018c\2\0\2\u01c2\5\0\1\u018e\17\0"+
    "\4\u018c\2\0\2\u01c3\2\0\1\u01c3\2\0\1\u018e\1\u01c3"+
    "\13\0\1\u01c3\2\0\4\u016b\2\0\2\u01c4\5\0\1\u016d"+
    "\17\0\4\u01a3\2\0\2\u01c5\5\0\1\u01a5\17\0\4\u01a3"+
    "\2\0\2\u01c6\2\0\1\u01c6\2\0\1\u01a5\1\u01c6\13\0"+
    "\1\u01c6\2\0\4\u016b\2\0\2\u01c7\2\0\1\u01c7\2\0"+
    "\1\u016d\1\u01c7\13\0\1\u01c7\2\0\4\u019a\2\0\2\u01c8"+
    "\5\0\1\u019c\17\0\4\u019a\2\0\2\u01c9\2\0\1\u01c9"+
    "\2\0\1\u019c\1\u01c9\13\0\1\u01c9\2\0\4\u018c\2\0"+
    "\2\u01ca\5\0\1\u018e\17\0\4\u018c\2\0\2\u01cb\2\0"+
    "\1\u01cb\2\0\1\u018e\1\u01cb\13\0\1\u01cb\2\0\4\u016b"+
    "\2\0\2\u01cc\5\0\1\u016d\17\0\4\u01a3\2\0\2\u01cd"+
    "\5\0\1\u01a5\17\0\4\u01a3\2\0\2\u01ce\2\0\1\u01ce"+
    "\2\0\1\u01a5\1\u01ce\13\0\1\u01ce\2\0\4\u016b\2\0"+
    "\2\u01cf\2\0\1\u01cf\2\0\1\u016d\1\u01cf\13\0\1\u01cf"+
    "\2\0\4\u019a\2\0\2\u01d0\5\0\1\u019c\17\0\4\u019a"+
    "\2\0\2\u01d1\2\0\1\u01d1\2\0\1\u019c\1\u01d1\13\0"+
    "\1\u01d1\2\0\4\u018c\2\0\2\u01d2\5\0\1\u018e\17\0"+
    "\4\u018c\2\0\2\u01d3\2\0\1\u01d3\2\0\1\u018e\1\u01d3"+
    "\13\0\1\u01d3\2\0\4\u016b\2\0\2\u016b\5\0\1\u016d"+
    "\17\0\4\u01a3\2\0\2\u01d4\5\0\1\u01a5\17\0\4\u01a3"+
    "\2\0\2\u01d5\2\0\1\u01d5\2\0\1\u01a5\1\u01d5\13\0"+
    "\1\u01d5\2\0\4\u016b\2\0\2\u016b\2\0\1\u016b\2\0"+
    "\1\u016d\1\u016b\13\0\1\u016b\2\0\4\u019a\2\0\2\u01d6"+
    "\5\0\1\u019c\17\0\4\u019a\2\0\2\u01d7\2\0\1\u01d7"+
    "\2\0\1\u019c\1\u01d7\13\0\1\u01d7\2\0\4\u018c\2\0"+
    "\2\u01d8\5\0\1\u018e\17\0\4\u018c\2\0\2\u01d9\2\0"+
    "\1\u01d9\2\0\1\u018e\1\u01d9\13\0\1\u01d9\2\0\4\u01a3"+
    "\2\0\2\u01da\5\0\1\u01a5\17\0\4\u01a3\2\0\2\u01db"+
    "\2\0\1\u01db\2\0\1\u01a5\1\u01db\13\0\1\u01db\2\0"+
    "\4\u019a\2\0\2\u01dc\5\0\1\u019c\17\0\4\u019a\2\0"+
    "\2\u01dd\2\0\1\u01dd\2\0\1\u019c\1\u01dd\13\0\1\u01dd"+
    "\2\0\4\u018c\2\0\2\u018c\5\0\1\u018e\17\0\4\u018c"+
    "\2\0\2\u018c\2\0\1\u018c\2\0\1\u018e\1\u018c\13\0"+
    "\1\u018c\2\0\4\u01a3\2\0\2\u01de\5\0\1\u01a5\17\0"+
    "\4\u01a3\2\0\2\u01df\2\0\1\u01df\2\0\1\u01a5\1\u01df"+
    "\13\0\1\u01df\2\0\4\u019a\2\0\2\u019a\5\0\1\u019c"+
    "\17\0\4\u019a\2\0\2\u019a\2\0\1\u019a\2\0\1\u019c"+
    "\1\u019a\13\0\1\u019a\2\0\4\u01a3\2\0\2\u01a3\5\0"+
    "\1\u01a5\17\0\4\u01a3\2\0\2\u01a3\2\0\1\u01a3\2\0"+
    "\1\u01a5\1\u01a3\13\0\1\u01a3\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13456];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\0\10\1\2\0\1\1\10\0"+
    "\1\1\6\0\1\11\10\0\1\1\12\0\1\11\47\0"+
    "\1\11\163\0\1\1\10\0\1\11\12\0\1\11\17\0"+
    "\1\11\57\0\1\11\12\0\1\11\150\0\1\11\5\0"+
    "\1\11\6\0\1\11\63\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[479];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public FateScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FateScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 22: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 23: break;
          case 3:
            { return EOL;
            }
          // fall through
          case 24: break;
          case 4:
            { return DEC;
            }
          // fall through
          case 25: break;
          case 5:
            { return COMMENT;
            }
          // fall through
          case 26: break;
          case 6:
            { return ID;
            }
          // fall through
          case 27: break;
          case 7:
            { return HEX;
            }
          // fall through
          case 28: break;
          case 8:
            { return DATASTRING;
            }
          // fall through
          case 29: break;
          case 9:
            { return PARAMINLINE1;
            }
          // fall through
          case 30: break;
          case 10:
            { return PARAMGAMEVAR1;
            }
          // fall through
          case 31: break;
          case 11:
            { return PARAMSTORAGE;
            }
          // fall through
          case 32: break;
          case 12:
            { return PARAMGAMEVARARRAY3;
            }
          // fall through
          case 33: break;
          case 13:
            { return PARAMGAMEVAR2;
            }
          // fall through
          case 34: break;
          case 14:
            { return PARAMINLINE6;
            }
          // fall through
          case 35: break;
          case 15:
            { return PARAMINLINE2;
            }
          // fall through
          case 36: break;
          case 16:
            { return PARAMGAMEVARARRAY1;
            }
          // fall through
          case 37: break;
          case 17:
            { return PARAMGAMEVARARRAY4;
            }
          // fall through
          case 38: break;
          case 18:
            { return PARAMINLINE3;
            }
          // fall through
          case 39: break;
          case 19:
            { return PARAMOTHERSTORAGEOFFSET;
            }
          // fall through
          case 40: break;
          case 20:
            { return PARAMOTHEROTHERSTORAGE;
            }
          // fall through
          case 41: break;
          case 21:
            { return PARAMGAMEVARARRAY2;
            }
          // fall through
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
