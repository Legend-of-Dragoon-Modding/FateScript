// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: FateScript.flex

package org.legendofdragoon.fatescript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.legendofdragoon.fatescript.psi.FateScriptTypes.*;


public class FateScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u0a00"+
    "\4\u0100\1\u1600\10\u0100\1\u1700\2\u0100\1\u1800\1\u1900\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1a00\1\u1700\1\u0900\3\u0100\1\u1300"+
    "\1\u1b00\114\u0100\1\u1c00\1\u1300\153\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\3\22\0\1\1"+
    "\12\0\1\5\1\6\3\0\1\7\11\10\1\11\1\12"+
    "\5\0\6\13\24\14\1\15\1\0\1\16\1\0\1\14"+
    "\1\0\1\17\5\13\2\14\1\20\2\14\1\21\1\14"+
    "\1\22\1\23\2\14\1\24\1\25\1\26\1\14\1\27"+
    "\1\14\1\30\2\14\12\0\1\31\32\0\1\32\u01bf\0"+
    "\12\33\206\0\12\33\306\0\12\33\234\0\12\33\166\0"+
    "\12\33\140\0\12\33\166\0\12\33\106\0\12\33\u0116\0"+
    "\12\33\106\0\12\33\346\0\1\32\u015f\0\12\33\46\0"+
    "\12\33\u012c\0\12\33\200\0\12\33\246\0\12\33\6\0"+
    "\12\33\266\0\12\33\126\0\12\33\206\0\12\33\6\0"+
    "\12\33\246\0\13\32\35\0\2\31\5\0\1\32\57\0"+
    "\1\32\240\0\1\32\u01cf\0\12\33\46\0\12\33\306\0"+
    "\12\33\26\0\12\33\126\0\12\33\u0196\0\12\33\6\0"+
    "\u0100\34\240\0\12\33\206\0\12\33\u012c\0\12\33\200\0"+
    "\12\33\74\0\12\33\220\0\12\33\166\0\12\33\146\0"+
    "\12\33\206\0\12\33\106\0\12\33\266\0\12\33\u0164\0"+
    "\62\33\100\0\12\33\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\4\6\1\0"+
    "\3\6\1\7\3\6\2\0\1\6\15\0\1\10\10\0"+
    "\1\11\12\0\1\12\47\0\1\13\163\0\1\14\10\0"+
    "\1\15\12\0\1\16\17\0\1\17\57\0\1\20\12\0"+
    "\1\21\150\0\1\22\5\0\1\23\6\0\1\24\63\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[476];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196\0\u013f"+
    "\0\u01b3\0\u01d0\0\u01ed\0\u020a\0\u0227\0\u0244\0\u0261\0\u027e"+
    "\0\u029b\0\u02b8\0\u02d5\0\u02f2\0\u030f\0\u032c\0\u0349\0\u0366"+
    "\0\u0383\0\u03a0\0\u03bd\0\35\0\u03da\0\u03f7\0\u0414\0\u0431"+
    "\0\u044e\0\u046b\0\u0488\0\u04a5\0\u04c2\0\u04df\0\u04fc\0\u0519"+
    "\0\u0536\0\u0553\0\u0570\0\u058d\0\u05aa\0\u05c7\0\u05e4\0\35"+
    "\0\u0601\0\u061e\0\u063b\0\u0658\0\u04c2\0\u0675\0\u0692\0\u06af"+
    "\0\u06cc\0\u06e9\0\u0706\0\u0723\0\u0740\0\u075d\0\u077a\0\u0797"+
    "\0\u07b4\0\u07d1\0\u07ee\0\u080b\0\u0828\0\u0845\0\u0862\0\u087f"+
    "\0\u089c\0\u08b9\0\u08d6\0\u08f3\0\u0910\0\u092d\0\u094a\0\u0967"+
    "\0\u0984\0\u09a1\0\u09be\0\u09db\0\u09f8\0\u0a15\0\u0a32\0\35"+
    "\0\u0a4f\0\u0a6c\0\u0a89\0\u0aa6\0\u0ac3\0\u0ae0\0\u0afd\0\u0b1a"+
    "\0\u0b37\0\u0b54\0\u0b71\0\u0b8e\0\u0bab\0\u0bc8\0\u0be5\0\u0c02"+
    "\0\u0c1f\0\u0c3c\0\u0c59\0\u0c76\0\u0c93\0\u0cb0\0\u0ccd\0\u0cea"+
    "\0\u0d07\0\u0d24\0\u0d41\0\u0d5e\0\u0d7b\0\u0d98\0\u0db5\0\u0dd2"+
    "\0\u0def\0\u0e0c\0\u0e29\0\u0e46\0\u0e63\0\u0e80\0\u0e9d\0\u0eba"+
    "\0\u0ed7\0\u0ef4\0\u0f11\0\u0f2e\0\u0f4b\0\u0f68\0\u0f85\0\u0fa2"+
    "\0\u0fbf\0\u0fdc\0\u0ff9\0\u1016\0\u1033\0\u1050\0\u106d\0\u108a"+
    "\0\u10a7\0\u10c4\0\u10e1\0\u10fe\0\u111b\0\u1138\0\u1155\0\u1172"+
    "\0\u118f\0\u11ac\0\u11c9\0\u11e6\0\u1203\0\u1220\0\u123d\0\u125a"+
    "\0\u1277\0\u1294\0\u12b1\0\u12ce\0\u12eb\0\u1308\0\u1325\0\u1342"+
    "\0\u135f\0\u137c\0\u1399\0\u13b6\0\u13d3\0\u13f0\0\u140d\0\u142a"+
    "\0\u1447\0\u1464\0\u1481\0\u149e\0\u14bb\0\u14d8\0\u14f5\0\u1512"+
    "\0\u152f\0\u154c\0\u1569\0\u1586\0\u15a3\0\u15c0\0\u15dd\0\u15fa"+
    "\0\u1617\0\u1634\0\u1651\0\u166e\0\u168b\0\u16a8\0\u16c5\0\u16e2"+
    "\0\u16ff\0\u171c\0\u1739\0\u1756\0\u1773\0\u1790\0\u17ad\0\u17ca"+
    "\0\u17e7\0\u1804\0\u1821\0\u183e\0\35\0\u185b\0\u1878\0\u1895"+
    "\0\u18b2\0\u18cf\0\u18ec\0\u1909\0\u1926\0\u1943\0\u1960\0\35"+
    "\0\u197d\0\u199a\0\u19b7\0\u19d4\0\u19f1\0\u1a0e\0\u1a2b\0\u1a48"+
    "\0\u1a65\0\u1756\0\u1a82\0\u1a9f\0\u1abc\0\u1ad9\0\u1af6\0\35"+
    "\0\u1b13\0\u1b30\0\u1b4d\0\u1b6a\0\u1b87\0\u1ba4\0\u1bc1\0\u1bde"+
    "\0\u1bfb\0\u1c18\0\u1c35\0\u1c52\0\u1c6f\0\u1c8c\0\u1ca9\0\u1cc6"+
    "\0\u1ce3\0\u1d00\0\u1d1d\0\u1d3a\0\u1d57\0\u1d74\0\u1d91\0\u1dae"+
    "\0\u1dcb\0\u1de8\0\u1e05\0\u1e22\0\u1e3f\0\u1e5c\0\u1e79\0\u1e96"+
    "\0\u1eb3\0\u1ed0\0\u1eed\0\u1f0a\0\u1f27\0\u1f44\0\u1f61\0\u1f7e"+
    "\0\u1f9b\0\u1fb8\0\u1fd5\0\u1ff2\0\u200f\0\u202c\0\u2049\0\35"+
    "\0\u2066\0\u2083\0\u20a0\0\u20bd\0\u20da\0\u20f7\0\u2114\0\u2131"+
    "\0\u214e\0\u216b\0\35\0\u2188\0\u21a5\0\u21c2\0\u21df\0\u21fc"+
    "\0\u2219\0\u2236\0\u2253\0\u2270\0\u228d\0\u22aa\0\u22c7\0\u22e4"+
    "\0\u2301\0\u231e\0\u233b\0\u2358\0\u2375\0\u2392\0\u23af\0\u23cc"+
    "\0\u23e9\0\u2406\0\u2423\0\u2440\0\u245d\0\u247a\0\u2497\0\u24b4"+
    "\0\u24d1\0\u24ee\0\u250b\0\u2528\0\u2545\0\u2562\0\u257f\0\u259c"+
    "\0\u25b9\0\u25d6\0\u25f3\0\u2610\0\u262d\0\u264a\0\u2667\0\u2684"+
    "\0\u26a1\0\u26be\0\u26db\0\u26f8\0\u2715\0\u2732\0\u274f\0\u276c"+
    "\0\u2789\0\u27a6\0\u27c3\0\u27e0\0\u27fd\0\u281a\0\u2837\0\u2854"+
    "\0\u2871\0\u288e\0\u28ab\0\u28c8\0\u28e5\0\u2902\0\u291f\0\u293c"+
    "\0\u2959\0\u2976\0\u2993\0\u29b0\0\u29cd\0\u29ea\0\u2a07\0\u2a24"+
    "\0\u2a41\0\u2a5e\0\u2a7b\0\u2a98\0\u2ab5\0\u2ad2\0\u2aef\0\u2b0c"+
    "\0\u2b29\0\u2b46\0\u2b63\0\u2b80\0\u2b9d\0\u2bba\0\u2bd7\0\u2bf4"+
    "\0\u2c11\0\u2c2e\0\u2c4b\0\u2c68\0\u2c85\0\u2ca2\0\u2cbf\0\u2cdc"+
    "\0\u2cf9\0\u2d16\0\u2d33\0\35\0\u2d50\0\u2d6d\0\u2d8a\0\u2da7"+
    "\0\u2dc4\0\35\0\u2de1\0\u2dfe\0\u2e1b\0\u2e38\0\u2e55\0\u2e72"+
    "\0\35\0\u2e8f\0\u2eac\0\u2ec9\0\u2ee6\0\u2f03\0\u2f20\0\u2f3d"+
    "\0\u2f5a\0\u2f77\0\u2f94\0\u2fb1\0\u2fce\0\u2feb\0\u3008\0\u3025"+
    "\0\u3042\0\u305f\0\u307c\0\u3099\0\u30b6\0\u30d3\0\u30f0\0\u310d"+
    "\0\u312a\0\u3147\0\u3164\0\u3181\0\u319e\0\u31bb\0\u31d8\0\u31f5"+
    "\0\u3212\0\u322f\0\u324c\0\u3269\0\u3286\0\u32a3\0\u32c0\0\u32dd"+
    "\0\u32fa\0\u3317\0\u3334\0\u3351\0\u336e\0\u338b\0\u33a8\0\u33c5"+
    "\0\u33e2\0\u33ff\0\u341c\0\u3439";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[476];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\3\2\2\1\5\1\6"+
    "\1\2\1\7\2\10\2\2\1\10\1\11\4\10\1\12"+
    "\1\10\1\13\1\10\4\2\36\0\1\3\2\0\1\3"+
    "\32\0\1\4\41\0\2\6\17\0\1\14\13\0\2\6"+
    "\24\0\2\7\3\0\24\7\1\0\2\7\10\0\2\10"+
    "\2\0\2\10\2\0\12\10\13\0\2\10\2\0\2\10"+
    "\2\0\3\10\1\15\6\10\13\0\2\10\2\0\2\10"+
    "\2\0\7\10\1\16\2\10\13\0\2\10\2\0\2\10"+
    "\2\0\1\17\11\10\13\0\2\20\2\0\1\20\3\0"+
    "\1\20\13\0\1\20\10\0\2\10\2\0\2\10\2\0"+
    "\2\10\1\21\7\10\13\0\2\10\2\0\2\10\2\0"+
    "\4\10\1\22\5\10\13\0\2\10\2\0\2\10\2\0"+
    "\5\10\1\23\4\10\5\0\4\24\2\0\2\10\2\0"+
    "\2\10\1\25\1\0\12\10\13\0\2\10\2\0\2\10"+
    "\2\0\5\10\1\26\4\10\5\0\4\27\2\0\2\10"+
    "\2\0\2\10\1\30\1\0\12\10\5\0\4\24\10\0"+
    "\1\25\20\0\4\25\2\0\1\31\1\32\1\33\17\0"+
    "\2\25\3\0\4\34\2\0\2\10\2\0\2\10\1\35"+
    "\1\0\12\10\5\0\4\27\10\0\1\30\20\0\4\30"+
    "\2\0\1\36\1\37\20\0\2\30\3\0\4\40\1\41"+
    "\1\0\2\42\4\0\1\43\1\44\11\0\1\45\5\0"+
    "\4\40\1\41\1\0\2\42\4\0\1\43\1\44\25\0"+
    "\2\46\2\0\2\46\2\0\12\46\5\0\4\34\10\0"+
    "\1\35\20\0\4\35\2\0\1\47\1\50\14\0\1\51"+
    "\3\0\2\35\3\0\4\52\1\53\1\0\2\54\5\0"+
    "\1\55\11\0\1\56\5\0\4\52\1\53\1\0\2\54"+
    "\5\0\1\55\17\0\4\40\1\41\7\0\1\43\1\44"+
    "\17\0\4\41\13\0\1\57\15\0\4\40\1\41\1\0"+
    "\2\60\4\0\1\43\1\44\17\0\4\43\2\0\1\61"+
    "\1\62\1\63\13\0\1\64\3\0\2\43\11\0\2\65"+
    "\2\0\1\65\3\0\1\65\13\0\1\65\2\0\4\40"+
    "\1\41\1\0\2\46\2\0\2\46\1\43\1\44\12\46"+
    "\5\0\4\66\2\0\2\67\5\0\1\70\11\0\1\71"+
    "\5\0\4\66\2\0\2\67\5\0\1\70\44\0\1\72"+
    "\7\0\4\52\1\53\10\0\1\55\17\0\4\53\20\0"+
    "\1\73\10\0\4\52\1\53\1\0\2\74\5\0\1\55"+
    "\17\0\4\75\10\0\1\76\26\0\2\77\2\0\1\77"+
    "\3\0\1\77\13\0\1\77\23\0\1\100\13\0\4\40"+
    "\1\41\1\0\2\101\4\0\1\43\1\44\17\0\4\102"+
    "\2\0\2\103\4\0\1\104\12\0\1\105\5\0\4\102"+
    "\2\0\2\103\4\0\1\104\26\0\2\106\2\0\2\106"+
    "\2\0\12\106\32\0\1\107\7\0\4\40\1\41\1\0"+
    "\2\110\2\0\1\110\1\0\1\43\1\44\1\110\13\0"+
    "\1\110\2\0\4\66\11\0\1\70\17\0\4\66\2\0"+
    "\2\111\5\0\1\70\25\0\2\112\2\0\1\112\3\0"+
    "\1\112\13\0\1\112\24\0\1\113\37\0\1\114\7\0"+
    "\4\52\1\53\1\0\2\115\5\0\1\55\17\0\4\76"+
    "\2\0\1\116\1\117\14\0\1\120\3\0\2\76\3\0"+
    "\4\52\1\53\1\0\2\121\2\0\1\121\2\0\1\55"+
    "\1\121\13\0\1\121\22\0\1\122\14\0\4\40\1\41"+
    "\1\0\2\123\4\0\1\43\1\44\17\0\4\102\10\0"+
    "\1\104\20\0\4\102\2\0\2\124\4\0\1\104\20\0"+
    "\4\104\20\0\1\125\3\0\2\104\11\0\2\126\2\0"+
    "\1\126\3\0\1\126\13\0\1\126\2\0\4\102\2\0"+
    "\2\106\2\0\2\106\1\104\1\0\12\106\27\0\1\127"+
    "\12\0\4\40\1\41\1\0\2\130\2\0\1\130\1\0"+
    "\1\43\1\44\1\130\13\0\1\130\2\0\4\66\2\0"+
    "\2\131\5\0\1\70\17\0\4\66\2\0\2\132\2\0"+
    "\1\132\2\0\1\70\1\132\13\0\1\132\25\0\1\133"+
    "\33\0\1\134\12\0\4\52\1\53\1\0\2\135\5\0"+
    "\1\55\17\0\4\136\2\0\2\137\5\0\1\140\11\0"+
    "\1\141\5\0\4\136\2\0\2\137\5\0\1\140\44\0"+
    "\1\142\7\0\4\52\1\53\1\0\2\143\2\0\1\143"+
    "\2\0\1\55\1\143\13\0\1\143\2\0\4\122\10\0"+
    "\1\144\20\0\4\40\1\41\1\0\2\145\4\0\1\43"+
    "\1\44\17\0\4\102\2\0\2\146\4\0\1\104\45\0"+
    "\1\147\7\0\4\102\2\0\2\150\2\0\1\150\1\0"+
    "\1\104\1\0\1\150\13\0\1\150\25\0\1\151\11\0"+
    "\4\40\1\41\1\0\2\152\2\0\1\152\1\0\1\43"+
    "\1\44\1\152\13\0\1\152\2\0\4\66\2\0\2\153"+
    "\5\0\1\70\17\0\4\66\2\0\2\154\2\0\1\154"+
    "\2\0\1\70\1\154\13\0\1\154\2\0\4\133\10\0"+
    "\1\155\13\0\2\133\26\0\1\156\11\0\4\52\1\53"+
    "\1\0\2\157\5\0\1\55\17\0\4\136\11\0\1\140"+
    "\17\0\4\136\2\0\2\160\5\0\1\140\25\0\2\161"+
    "\2\0\1\161\3\0\1\161\13\0\1\161\24\0\1\162"+
    "\12\0\4\52\1\53\1\0\2\163\2\0\1\163\2\0"+
    "\1\55\1\163\13\0\1\163\10\0\1\164\1\165\1\166"+
    "\24\0\4\40\1\41\1\0\2\167\4\0\1\43\1\44"+
    "\17\0\4\102\2\0\2\170\4\0\1\104\42\0\1\171"+
    "\12\0\4\102\2\0\2\172\2\0\1\172\1\0\1\104"+
    "\1\0\1\172\13\0\1\172\2\0\4\151\10\0\1\173"+
    "\13\0\2\151\3\0\4\40\1\41\1\0\2\174\2\0"+
    "\1\174\1\0\1\43\1\44\1\174\13\0\1\174\2\0"+
    "\4\66\2\0\2\175\5\0\1\70\17\0\4\66\2\0"+
    "\2\176\2\0\1\176\2\0\1\70\1\176\13\0\1\176"+
    "\2\0\4\155\2\0\1\177\1\200\14\0\1\201\3\0"+
    "\2\155\3\0\4\156\10\0\1\202\20\0\4\52\1\53"+
    "\1\0\2\203\5\0\1\55\17\0\4\136\2\0\2\204"+
    "\5\0\1\140\17\0\4\136\2\0\2\205\2\0\1\205"+
    "\2\0\1\140\1\205\13\0\1\205\25\0\1\206\11\0"+
    "\4\52\1\53\1\0\2\207\2\0\1\207\2\0\1\55"+
    "\1\207\13\0\1\207\2\0\4\210\1\211\1\0\2\212"+
    "\17\0\1\213\5\0\4\210\1\211\1\0\2\212\33\0"+
    "\2\214\2\0\2\214\2\0\12\214\5\0\4\40\1\41"+
    "\1\0\2\215\4\0\1\43\1\44\17\0\4\102\2\0"+
    "\2\216\4\0\1\104\43\0\1\217\11\0\4\102\2\0"+
    "\2\220\2\0\1\220\1\0\1\104\1\0\1\220\13\0"+
    "\1\220\2\0\4\173\2\0\1\221\1\222\20\0\2\173"+
    "\3\0\4\40\1\41\1\0\2\223\2\0\1\223\1\0"+
    "\1\43\1\44\1\223\13\0\1\223\2\0\4\66\2\0"+
    "\2\224\5\0\1\70\17\0\4\66\2\0\2\225\2\0"+
    "\1\225\2\0\1\70\1\225\13\0\1\225\2\0\4\226"+
    "\2\0\2\227\5\0\1\230\11\0\1\231\5\0\4\226"+
    "\2\0\2\227\5\0\1\230\44\0\1\232\7\0\4\202"+
    "\2\0\1\233\1\234\20\0\2\202\3\0\4\52\1\53"+
    "\1\0\2\235\5\0\1\55\17\0\4\136\2\0\2\236"+
    "\5\0\1\140\17\0\4\136\2\0\2\237\2\0\1\237"+
    "\2\0\1\140\1\237\13\0\1\237\2\0\4\206\10\0"+
    "\1\240\13\0\2\206\3\0\4\52\1\53\1\0\2\241"+
    "\2\0\1\241\2\0\1\55\1\241\13\0\1\241\2\0"+
    "\4\210\1\211\30\0\4\211\2\0\1\242\1\243\25\0"+
    "\4\210\1\211\1\0\2\244\33\0\2\245\2\0\1\245"+
    "\3\0\1\245\13\0\1\245\2\0\4\210\1\211\1\0"+
    "\2\214\2\0\2\214\2\0\12\214\5\0\4\40\1\41"+
    "\1\0\2\246\4\0\1\43\1\44\17\0\4\102\2\0"+
    "\2\247\4\0\1\104\20\0\4\217\10\0\1\250\13\0"+
    "\2\217\3\0\4\102\2\0\2\251\2\0\1\251\1\0"+
    "\1\104\1\0\1\251\13\0\1\251\2\0\4\252\2\0"+
    "\2\253\5\0\1\254\11\0\1\255\5\0\4\252\2\0"+
    "\2\253\5\0\1\254\17\0\4\40\1\41\1\0\2\256"+
    "\2\0\1\256\1\0\1\43\1\44\1\256\13\0\1\256"+
    "\2\0\4\66\2\0\2\257\5\0\1\70\17\0\4\66"+
    "\2\0\2\260\2\0\1\260\2\0\1\70\1\260\13\0"+
    "\1\260\2\0\4\226\11\0\1\230\17\0\4\226\2\0"+
    "\2\261\5\0\1\230\17\0\4\230\1\0\1\262\35\0"+
    "\2\263\2\0\1\263\3\0\1\263\13\0\1\263\24\0"+
    "\1\264\12\0\4\265\2\0\2\266\5\0\1\267\11\0"+
    "\1\270\5\0\4\265\2\0\2\266\5\0\1\267\17\0"+
    "\4\52\1\53\1\0\2\271\5\0\1\55\17\0\4\136"+
    "\2\0\2\272\5\0\1\140\17\0\4\136\2\0\2\273"+
    "\2\0\1\273\2\0\1\140\1\273\13\0\1\273\2\0"+
    "\4\240\2\0\1\274\1\275\20\0\2\240\3\0\4\52"+
    "\1\53\1\0\2\276\2\0\1\276\2\0\1\55\1\276"+
    "\13\0\1\276\2\0\4\277\2\0\2\300\5\0\1\301"+
    "\11\0\1\302\5\0\4\277\2\0\2\300\5\0\1\301"+
    "\17\0\4\210\1\211\1\0\2\303\25\0\4\210\1\211"+
    "\1\0\2\304\2\0\1\304\3\0\1\304\13\0\1\304"+
    "\2\0\4\40\1\41\1\0\2\40\4\0\1\43\1\44"+
    "\17\0\4\102\2\0\2\305\4\0\1\104\20\0\4\250"+
    "\2\0\1\306\1\307\20\0\2\250\3\0\4\102\2\0"+
    "\2\310\2\0\1\310\1\0\1\104\1\0\1\310\13\0"+
    "\1\310\2\0\4\252\11\0\1\254\17\0\4\252\2\0"+
    "\2\311\5\0\1\254\17\0\4\254\11\0\1\312\25\0"+
    "\2\313\2\0\1\313\3\0\1\313\13\0\1\313\2\0"+
    "\4\40\1\41\1\0\2\40\2\0\1\40\1\0\1\43"+
    "\1\44\1\40\13\0\1\40\2\0\4\66\2\0\2\314"+
    "\5\0\1\70\17\0\4\66\2\0\2\315\2\0\1\315"+
    "\2\0\1\70\1\315\13\0\1\315\2\0\4\226\2\0"+
    "\2\316\5\0\1\230\17\0\4\262\2\0\1\317\1\320"+
    "\25\0\4\226\2\0\2\321\2\0\1\321\2\0\1\230"+
    "\1\321\13\0\1\321\25\0\1\322\11\0\4\265\11\0"+
    "\1\267\17\0\4\265\2\0\2\323\5\0\1\267\17\0"+
    "\4\267\11\0\1\324\25\0\2\325\2\0\1\325\3\0"+
    "\1\325\13\0\1\325\2\0\4\52\1\53\1\0\2\52"+
    "\5\0\1\55\17\0\4\136\2\0\2\326\5\0\1\140"+
    "\17\0\4\136\2\0\2\327\2\0\1\327\2\0\1\140"+
    "\1\327\13\0\1\327\2\0\4\330\2\0\2\331\5\0"+
    "\1\332\11\0\1\333\5\0\4\330\2\0\2\331\5\0"+
    "\1\332\17\0\4\52\1\53\1\0\2\52\2\0\1\52"+
    "\2\0\1\55\1\52\13\0\1\52\2\0\4\277\11\0"+
    "\1\301\17\0\4\277\2\0\2\334\5\0\1\301\17\0"+
    "\4\301\11\0\1\335\25\0\2\336\2\0\1\336\3\0"+
    "\1\336\13\0\1\336\2\0\4\210\1\211\1\0\2\337"+
    "\25\0\4\210\1\211\1\0\2\340\2\0\1\340\3\0"+
    "\1\340\13\0\1\340\2\0\4\102\2\0\2\341\4\0"+
    "\1\104\20\0\4\342\2\0\2\343\5\0\1\344\11\0"+
    "\1\345\5\0\4\342\2\0\2\343\5\0\1\344\17\0"+
    "\4\102\2\0\2\346\2\0\1\346\1\0\1\104\1\0"+
    "\1\346\13\0\1\346\2\0\4\252\2\0\2\347\5\0"+
    "\1\254\17\0\4\312\11\0\1\350\17\0\4\252\2\0"+
    "\2\351\2\0\1\351\2\0\1\254\1\351\13\0\1\351"+
    "\2\0\4\66\2\0\2\66\5\0\1\70\17\0\4\66"+
    "\2\0\2\66\2\0\1\66\2\0\1\70\1\66\13\0"+
    "\1\66\2\0\4\226\2\0\2\352\5\0\1\230\17\0"+
    "\4\353\1\354\1\0\2\355\17\0\1\356\5\0\4\353"+
    "\1\354\1\0\2\355\25\0\4\226\2\0\2\357\2\0"+
    "\1\357\2\0\1\230\1\357\13\0\1\357\2\0\4\322"+
    "\10\0\1\360\13\0\2\322\3\0\4\265\2\0\2\361"+
    "\5\0\1\267\17\0\4\362\10\0\1\363\20\0\4\265"+
    "\2\0\2\364\2\0\1\364\2\0\1\267\1\364\13\0"+
    "\1\364\2\0\4\136\2\0\2\365\5\0\1\140\17\0"+
    "\4\136\2\0\2\366\2\0\1\366\2\0\1\140\1\366"+
    "\13\0\1\366\2\0\4\330\11\0\1\332\17\0\4\330"+
    "\2\0\2\367\5\0\1\332\17\0\4\332\11\0\1\370"+
    "\25\0\2\371\2\0\1\371\3\0\1\371\13\0\1\371"+
    "\2\0\4\277\2\0\2\372\5\0\1\301\17\0\4\277"+
    "\2\0\2\373\2\0\1\373\2\0\1\301\1\373\13\0"+
    "\1\373\2\0\4\210\1\211\1\0\2\374\25\0\4\210"+
    "\1\211\1\0\2\375\2\0\1\375\3\0\1\375\13\0"+
    "\1\375\2\0\4\102\2\0\2\102\4\0\1\104\20\0"+
    "\4\342\11\0\1\344\17\0\4\342\2\0\2\376\5\0"+
    "\1\344\17\0\4\344\11\0\1\377\25\0\2\u0100\2\0"+
    "\1\u0100\3\0\1\u0100\13\0\1\u0100\2\0\4\102\2\0"+
    "\2\102\2\0\1\102\1\0\1\104\1\0\1\102\13\0"+
    "\1\102\2\0\4\252\2\0\2\u0101\5\0\1\254\17\0"+
    "\4\252\2\0\2\u0102\2\0\1\u0102\2\0\1\254\1\u0102"+
    "\13\0\1\u0102\2\0\4\226\2\0\2\u0103\5\0\1\230"+
    "\17\0\4\353\1\354\30\0\4\354\20\0\1\u0104\10\0"+
    "\4\353\1\354\1\0\2\u0105\33\0\2\u0106\2\0\1\u0106"+
    "\3\0\1\u0106\13\0\1\u0106\2\0\4\226\2\0\2\u0107"+
    "\2\0\1\u0107\2\0\1\230\1\u0107\13\0\1\u0107\2\0"+
    "\4\360\2\0\1\u0108\1\u0109\20\0\2\360\3\0\4\265"+
    "\2\0\2\u010a\5\0\1\267\17\0\4\363\2\0\1\u010b"+
    "\1\u010c\14\0\1\u010d\3\0\2\363\3\0\4\265\2\0"+
    "\2\u010e\2\0\1\u010e\2\0\1\267\1\u010e\13\0\1\u010e"+
    "\2\0\4\136\2\0\2\u010f\5\0\1\140\17\0\4\136"+
    "\2\0\2\u0110\2\0\1\u0110\2\0\1\140\1\u0110\13\0"+
    "\1\u0110\2\0\4\330\2\0\2\u0111\5\0\1\332\17\0"+
    "\4\330\2\0\2\u0112\2\0\1\u0112\2\0\1\332\1\u0112"+
    "\13\0\1\u0112\2\0\4\277\2\0\2\u0113\5\0\1\301"+
    "\17\0\4\277\2\0\2\u0114\2\0\1\u0114\2\0\1\301"+
    "\1\u0114\13\0\1\u0114\2\0\4\210\1\211\1\0\2\u0115"+
    "\25\0\4\210\1\211\1\0\2\u0116\2\0\1\u0116\3\0"+
    "\1\u0116\13\0\1\u0116\2\0\4\342\2\0\2\u0117\5\0"+
    "\1\344\17\0\4\377\11\0\1\u0118\17\0\4\342\2\0"+
    "\2\u0119\2\0\1\u0119\2\0\1\344\1\u0119\13\0\1\u0119"+
    "\2\0\4\252\2\0\2\u011a\5\0\1\254\17\0\4\252"+
    "\2\0\2\u011b\2\0\1\u011b\2\0\1\254\1\u011b\13\0"+
    "\1\u011b\2\0\4\226\2\0\2\u011c\5\0\1\230\44\0"+
    "\1\u011d\7\0\4\353\1\354\1\0\2\u011e\25\0\4\353"+
    "\1\354\1\0\2\u011f\2\0\1\u011f\3\0\1\u011f\13\0"+
    "\1\u011f\2\0\4\226\2\0\2\u0120\2\0\1\u0120\2\0"+
    "\1\230\1\u0120\13\0\1\u0120\2\0\4\u0121\2\0\2\u0122"+
    "\5\0\1\u0123\11\0\1\u0124\5\0\4\u0121\2\0\2\u0122"+
    "\5\0\1\u0123\17\0\4\265\2\0\2\u0125\5\0\1\267"+
    "\17\0\4\u0126\2\0\2\u0127\5\0\1\u0128\11\0\1\u0129"+
    "\5\0\4\u0126\2\0\2\u0127\5\0\1\u0128\44\0\1\u012a"+
    "\7\0\4\265\2\0\2\u012b\2\0\1\u012b\2\0\1\267"+
    "\1\u012b\13\0\1\u012b\2\0\4\136\2\0\2\136\5\0"+
    "\1\140\17\0\4\136\2\0\2\136\2\0\1\136\2\0"+
    "\1\140\1\136\13\0\1\136\2\0\4\330\2\0\2\u012c"+
    "\5\0\1\332\17\0\4\330\2\0\2\u012d\2\0\1\u012d"+
    "\2\0\1\332\1\u012d\13\0\1\u012d\2\0\4\277\2\0"+
    "\2\u012e\5\0\1\301\17\0\4\277\2\0\2\u012f\2\0"+
    "\1\u012f\2\0\1\301\1\u012f\13\0\1\u012f\2\0\4\210"+
    "\1\211\1\0\2\u0130\25\0\4\210\1\211\1\0\2\u0131"+
    "\2\0\1\u0131\3\0\1\u0131\13\0\1\u0131\2\0\4\342"+
    "\2\0\2\u0132\5\0\1\344\17\0\4\u0118\11\0\1\u0133"+
    "\17\0\4\342\2\0\2\u0134\2\0\1\u0134\2\0\1\344"+
    "\1\u0134\13\0\1\u0134\2\0\4\252\2\0\2\u0135\5\0"+
    "\1\254\17\0\4\252\2\0\2\u0136\2\0\1\u0136\2\0"+
    "\1\254\1\u0136\13\0\1\u0136\2\0\4\226\2\0\2\u0137"+
    "\5\0\1\230\41\0\1\u0138\12\0\4\353\1\354\1\0"+
    "\2\u0139\25\0\4\353\1\354\1\0\2\u013a\2\0\1\u013a"+
    "\3\0\1\u013a\13\0\1\u013a\2\0\4\226\2\0\2\u013b"+
    "\2\0\1\u013b\2\0\1\230\1\u013b\13\0\1\u013b\2\0"+
    "\4\u0121\11\0\1\u0123\17\0\4\u0121\2\0\2\u013c\5\0"+
    "\1\u0123\17\0\4\u0123\1\0\1\u013d\35\0\2\u013e\2\0"+
    "\1\u013e\3\0\1\u013e\13\0\1\u013e\2\0\4\265\2\0"+
    "\2\u013f\5\0\1\267\17\0\4\u0126\11\0\1\u0128\17\0"+
    "\4\u0126\2\0\2\u0140\5\0\1\u0128\25\0\2\u0141\2\0"+
    "\1\u0141\3\0\1\u0141\13\0\1\u0141\24\0\1\u0142\12\0"+
    "\4\265\2\0\2\u0143\2\0\1\u0143\2\0\1\267\1\u0143"+
    "\13\0\1\u0143\2\0\4\330\2\0\2\u0144\5\0\1\332"+
    "\17\0\4\330\2\0\2\u0145\2\0\1\u0145\2\0\1\332"+
    "\1\u0145\13\0\1\u0145\2\0\4\277\2\0\2\u0146\5\0"+
    "\1\301\17\0\4\277\2\0\2\u0147\2\0\1\u0147\2\0"+
    "\1\301\1\u0147\13\0\1\u0147\2\0\4\210\1\211\1\0"+
    "\2\u0148\25\0\4\210\1\211\1\0\2\u0149\2\0\1\u0149"+
    "\3\0\1\u0149\13\0\1\u0149\2\0\4\342\2\0\2\u014a"+
    "\5\0\1\344\17\0\4\342\2\0\2\u014b\2\0\1\u014b"+
    "\2\0\1\344\1\u014b\13\0\1\u014b\2\0\4\252\2\0"+
    "\2\u014c\5\0\1\254\17\0\4\252\2\0\2\u014d\2\0"+
    "\1\u014d\2\0\1\254\1\u014d\13\0\1\u014d\2\0\4\226"+
    "\2\0\2\u014e\5\0\1\230\42\0\1\u014f\11\0\4\353"+
    "\1\354\1\0\2\u0150\25\0\4\353\1\354\1\0\2\u0151"+
    "\2\0\1\u0151\3\0\1\u0151\13\0\1\u0151\2\0\4\226"+
    "\2\0\2\u0152\2\0\1\u0152\2\0\1\230\1\u0152\13\0"+
    "\1\u0152\2\0\4\u0121\2\0\2\u0153\5\0\1\u0123\17\0"+
    "\4\u013d\2\0\1\u0154\1\u0155\25\0\4\u0121\2\0\2\u0156"+
    "\2\0\1\u0156\2\0\1\u0123\1\u0156\13\0\1\u0156\2\0"+
    "\4\265\2\0\2\u0157\5\0\1\267\17\0\4\u0126\2\0"+
    "\2\u0158\5\0\1\u0128\17\0\4\u0126\2\0\2\u0159\2\0"+
    "\1\u0159\2\0\1\u0128\1\u0159\13\0\1\u0159\25\0\1\u015a"+
    "\11\0\4\265\2\0\2\u015b\2\0\1\u015b\2\0\1\267"+
    "\1\u015b\13\0\1\u015b\2\0\4\330\2\0\2\u015c\5\0"+
    "\1\332\17\0\4\330\2\0\2\u015d\2\0\1\u015d\2\0"+
    "\1\332\1\u015d\13\0\1\u015d\2\0\4\277\2\0\2\u015e"+
    "\5\0\1\301\17\0\4\277\2\0\2\u015f\2\0\1\u015f"+
    "\2\0\1\301\1\u015f\13\0\1\u015f\2\0\4\210\1\211"+
    "\1\0\2\210\25\0\4\210\1\211\1\0\2\210\2\0"+
    "\1\210\3\0\1\210\13\0\1\210\2\0\4\342\2\0"+
    "\2\u0160\5\0\1\344\17\0\4\342\2\0\2\u0161\2\0"+
    "\1\u0161\2\0\1\344\1\u0161\13\0\1\u0161\2\0\4\252"+
    "\2\0\2\u0162\5\0\1\254\17\0\4\252\2\0\2\u0163"+
    "\2\0\1\u0163\2\0\1\254\1\u0163\13\0\1\u0163\2\0"+
    "\4\226\2\0\2\226\5\0\1\230\17\0\4\u014f\10\0"+
    "\1\u0164\20\0\4\353\1\354\1\0\2\u0165\25\0\4\353"+
    "\1\354\1\0\2\u0166\2\0\1\u0166\3\0\1\u0166\13\0"+
    "\1\u0166\2\0\4\226\2\0\2\226\2\0\1\226\2\0"+
    "\1\230\1\226\13\0\1\226\2\0\4\u0121\2\0\2\u0167"+
    "\5\0\1\u0123\17\0\4\u0168\2\0\2\u0169\5\0\1\u016a"+
    "\11\0\1\u016b\5\0\4\u0168\2\0\2\u0169\5\0\1\u016a"+
    "\17\0\4\u0121\2\0\2\u016c\2\0\1\u016c\2\0\1\u0123"+
    "\1\u016c\13\0\1\u016c\2\0\4\265\2\0\2\u016d\5\0"+
    "\1\267\17\0\4\u0126\2\0\2\u016e\5\0\1\u0128\17\0"+
    "\4\u0126\2\0\2\u016f\2\0\1\u016f\2\0\1\u0128\1\u016f"+
    "\13\0\1\u016f\2\0\4\u015a\10\0\1\u0170\13\0\2\u015a"+
    "\3\0\4\265\2\0\2\u0171\2\0\1\u0171\2\0\1\267"+
    "\1\u0171\13\0\1\u0171\2\0\4\330\2\0\2\u0172\5\0"+
    "\1\332\17\0\4\330\2\0\2\u0173\2\0\1\u0173\2\0"+
    "\1\332\1\u0173\13\0\1\u0173\2\0\4\277\2\0\2\u0174"+
    "\5\0\1\301\17\0\4\277\2\0\2\u0175\2\0\1\u0175"+
    "\2\0\1\301\1\u0175\13\0\1\u0175\2\0\4\342\2\0"+
    "\2\u0176\5\0\1\344\17\0\4\342\2\0\2\u0177\2\0"+
    "\1\u0177\2\0\1\344\1\u0177\13\0\1\u0177\2\0\4\252"+
    "\2\0\2\252\5\0\1\254\17\0\4\252\2\0\2\252"+
    "\2\0\1\252\2\0\1\254\1\252\13\0\1\252\2\0"+
    "\4\u0164\2\0\1\u0178\1\u0179\20\0\2\u0164\3\0\4\353"+
    "\1\354\1\0\2\u017a\25\0\4\353\1\354\1\0\2\u017b"+
    "\2\0\1\u017b\3\0\1\u017b\13\0\1\u017b\2\0\4\u0121"+
    "\2\0\2\u017c\5\0\1\u0123\17\0\4\u0168\11\0\1\u016a"+
    "\17\0\4\u0168\2\0\2\u017d\5\0\1\u016a\17\0\4\u016a"+
    "\1\0\1\u017e\35\0\2\u017f\2\0\1\u017f\3\0\1\u017f"+
    "\13\0\1\u017f\2\0\4\u0121\2\0\2\u0180\2\0\1\u0180"+
    "\2\0\1\u0123\1\u0180\13\0\1\u0180\2\0\4\265\2\0"+
    "\2\265\5\0\1\267\17\0\4\u0126\2\0\2\u0181\5\0"+
    "\1\u0128\17\0\4\u0126\2\0\2\u0182\2\0\1\u0182\2\0"+
    "\1\u0128\1\u0182\13\0\1\u0182\2\0\4\u0170\2\0\1\u0183"+
    "\1\u0184\20\0\2\u0170\3\0\4\265\2\0\2\265\2\0"+
    "\1\265\2\0\1\267\1\265\13\0\1\265\2\0\4\330"+
    "\2\0\2\u0185\5\0\1\332\17\0\4\330\2\0\2\u0186"+
    "\2\0\1\u0186\2\0\1\332\1\u0186\13\0\1\u0186\2\0"+
    "\4\277\2\0\2\277\5\0\1\301\17\0\4\277\2\0"+
    "\2\277\2\0\1\277\2\0\1\301\1\277\13\0\1\277"+
    "\2\0\4\342\2\0\2\u0187\5\0\1\344\17\0\4\342"+
    "\2\0\2\u0188\2\0\1\u0188\2\0\1\344\1\u0188\13\0"+
    "\1\u0188\2\0\4\u0189\2\0\2\u018a\5\0\1\u018b\11\0"+
    "\1\u018c\5\0\4\u0189\2\0\2\u018a\5\0\1\u018b\17\0"+
    "\4\353\1\354\1\0\2\u018d\25\0\4\353\1\354\1\0"+
    "\2\u018e\2\0\1\u018e\3\0\1\u018e\13\0\1\u018e\2\0"+
    "\4\u0121\2\0\2\u018f\5\0\1\u0123\17\0\4\u0168\2\0"+
    "\2\u0190\5\0\1\u016a\17\0\4\u017e\2\0\1\u0191\1\u0192"+
    "\25\0\4\u0168\2\0\2\u0193\2\0\1\u0193\2\0\1\u016a"+
    "\1\u0193\13\0\1\u0193\2\0\4\u0121\2\0\2\u0194\2\0"+
    "\1\u0194\2\0\1\u0123\1\u0194\13\0\1\u0194\2\0\4\u0126"+
    "\2\0\2\u0195\5\0\1\u0128\17\0\4\u0126\2\0\2\u0196"+
    "\2\0\1\u0196\2\0\1\u0128\1\u0196\13\0\1\u0196\2\0"+
    "\4\u0197\2\0\2\u0198\5\0\1\u0199\11\0\1\u019a\5\0"+
    "\4\u0197\2\0\2\u0198\5\0\1\u0199\17\0\4\330\2\0"+
    "\2\330\5\0\1\332\17\0\4\330\2\0\2\330\2\0"+
    "\1\330\2\0\1\332\1\330\13\0\1\330\2\0\4\342"+
    "\2\0\2\342\5\0\1\344\17\0\4\342\2\0\2\342"+
    "\2\0\1\342\2\0\1\344\1\342\13\0\1\342\2\0"+
    "\4\u0189\11\0\1\u018b\17\0\4\u0189\2\0\2\u019b\5\0"+
    "\1\u018b\17\0\4\u018b\11\0\1\u019c\25\0\2\u019d\2\0"+
    "\1\u019d\3\0\1\u019d\13\0\1\u019d\2\0\4\353\1\354"+
    "\1\0\2\353\25\0\4\353\1\354\1\0\2\353\2\0"+
    "\1\353\3\0\1\353\13\0\1\353\2\0\4\u0121\2\0"+
    "\2\u019e\5\0\1\u0123\17\0\4\u0168\2\0\2\u019f\5\0"+
    "\1\u016a\17\0\4\u01a0\2\0\2\u01a1\5\0\1\u01a2\11\0"+
    "\1\u01a3\5\0\4\u01a0\2\0\2\u01a1\5\0\1\u01a2\17\0"+
    "\4\u0168\2\0\2\u01a4\2\0\1\u01a4\2\0\1\u016a\1\u01a4"+
    "\13\0\1\u01a4\2\0\4\u0121\2\0\2\u01a5\2\0\1\u01a5"+
    "\2\0\1\u0123\1\u01a5\13\0\1\u01a5\2\0\4\u0126\2\0"+
    "\2\u01a6\5\0\1\u0128\17\0\4\u0126\2\0\2\u01a7\2\0"+
    "\1\u01a7\2\0\1\u0128\1\u01a7\13\0\1\u01a7\2\0\4\u0197"+
    "\11\0\1\u0199\17\0\4\u0197\2\0\2\u01a8\5\0\1\u0199"+
    "\17\0\4\u0199\11\0\1\u01a9\25\0\2\u01aa\2\0\1\u01aa"+
    "\3\0\1\u01aa\13\0\1\u01aa\2\0\4\u0189\2\0\2\u01ab"+
    "\5\0\1\u018b\17\0\4\u0189\2\0\2\u01ac\2\0\1\u01ac"+
    "\2\0\1\u018b\1\u01ac\13\0\1\u01ac\2\0\4\u0121\2\0"+
    "\2\u01ad\5\0\1\u0123\17\0\4\u0168\2\0\2\u01ae\5\0"+
    "\1\u016a\17\0\4\u01a0\11\0\1\u01a2\17\0\4\u01a0\2\0"+
    "\2\u01af\5\0\1\u01a2\25\0\2\u01b0\2\0\1\u01b0\3\0"+
    "\1\u01b0\13\0\1\u01b0\2\0\4\u0168\2\0\2\u01b1\2\0"+
    "\1\u01b1\2\0\1\u016a\1\u01b1\13\0\1\u01b1\2\0\4\u0121"+
    "\2\0\2\u01b2\2\0\1\u01b2\2\0\1\u0123\1\u01b2\13\0"+
    "\1\u01b2\2\0\4\u0126\2\0\2\u01b3\5\0\1\u0128\17\0"+
    "\4\u0126\2\0\2\u01b4\2\0\1\u01b4\2\0\1\u0128\1\u01b4"+
    "\13\0\1\u01b4\2\0\4\u0197\2\0\2\u01b5\5\0\1\u0199"+
    "\17\0\4\u0197\2\0\2\u01b6\2\0\1\u01b6\2\0\1\u0199"+
    "\1\u01b6\13\0\1\u01b6\2\0\4\u0189\2\0\2\u01b7\5\0"+
    "\1\u018b\17\0\4\u0189\2\0\2\u01b8\2\0\1\u01b8\2\0"+
    "\1\u018b\1\u01b8\13\0\1\u01b8\2\0\4\u0121\2\0\2\u0121"+
    "\5\0\1\u0123\17\0\4\u0168\2\0\2\u01b9\5\0\1\u016a"+
    "\17\0\4\u01a0\2\0\2\u01ba\5\0\1\u01a2\17\0\4\u01a0"+
    "\2\0\2\u01bb\2\0\1\u01bb\2\0\1\u01a2\1\u01bb\13\0"+
    "\1\u01bb\2\0\4\u0168\2\0\2\u01bc\2\0\1\u01bc\2\0"+
    "\1\u016a\1\u01bc\13\0\1\u01bc\2\0\4\u0121\2\0\2\u0121"+
    "\2\0\1\u0121\2\0\1\u0123\1\u0121\13\0\1\u0121\2\0"+
    "\4\u0126\2\0\2\u0126\5\0\1\u0128\17\0\4\u0126\2\0"+
    "\2\u0126\2\0\1\u0126\2\0\1\u0128\1\u0126\13\0\1\u0126"+
    "\2\0\4\u0197\2\0\2\u01bd\5\0\1\u0199\17\0\4\u0197"+
    "\2\0\2\u01be\2\0\1\u01be\2\0\1\u0199\1\u01be\13\0"+
    "\1\u01be\2\0\4\u0189\2\0\2\u01bf\5\0\1\u018b\17\0"+
    "\4\u0189\2\0\2\u01c0\2\0\1\u01c0\2\0\1\u018b\1\u01c0"+
    "\13\0\1\u01c0\2\0\4\u0168\2\0\2\u01c1\5\0\1\u016a"+
    "\17\0\4\u01a0\2\0\2\u01c2\5\0\1\u01a2\17\0\4\u01a0"+
    "\2\0\2\u01c3\2\0\1\u01c3\2\0\1\u01a2\1\u01c3\13\0"+
    "\1\u01c3\2\0\4\u0168\2\0\2\u01c4\2\0\1\u01c4\2\0"+
    "\1\u016a\1\u01c4\13\0\1\u01c4\2\0\4\u0197\2\0\2\u01c5"+
    "\5\0\1\u0199\17\0\4\u0197\2\0\2\u01c6\2\0\1\u01c6"+
    "\2\0\1\u0199\1\u01c6\13\0\1\u01c6\2\0\4\u0189\2\0"+
    "\2\u01c7\5\0\1\u018b\17\0\4\u0189\2\0\2\u01c8\2\0"+
    "\1\u01c8\2\0\1\u018b\1\u01c8\13\0\1\u01c8\2\0\4\u0168"+
    "\2\0\2\u01c9\5\0\1\u016a\17\0\4\u01a0\2\0\2\u01ca"+
    "\5\0\1\u01a2\17\0\4\u01a0\2\0\2\u01cb\2\0\1\u01cb"+
    "\2\0\1\u01a2\1\u01cb\13\0\1\u01cb\2\0\4\u0168\2\0"+
    "\2\u01cc\2\0\1\u01cc\2\0\1\u016a\1\u01cc\13\0\1\u01cc"+
    "\2\0\4\u0197\2\0\2\u01cd\5\0\1\u0199\17\0\4\u0197"+
    "\2\0\2\u01ce\2\0\1\u01ce\2\0\1\u0199\1\u01ce\13\0"+
    "\1\u01ce\2\0\4\u0189\2\0\2\u01cf\5\0\1\u018b\17\0"+
    "\4\u0189\2\0\2\u01d0\2\0\1\u01d0\2\0\1\u018b\1\u01d0"+
    "\13\0\1\u01d0\2\0\4\u0168\2\0\2\u0168\5\0\1\u016a"+
    "\17\0\4\u01a0\2\0\2\u01d1\5\0\1\u01a2\17\0\4\u01a0"+
    "\2\0\2\u01d2\2\0\1\u01d2\2\0\1\u01a2\1\u01d2\13\0"+
    "\1\u01d2\2\0\4\u0168\2\0\2\u0168\2\0\1\u0168\2\0"+
    "\1\u016a\1\u0168\13\0\1\u0168\2\0\4\u0197\2\0\2\u01d3"+
    "\5\0\1\u0199\17\0\4\u0197\2\0\2\u01d4\2\0\1\u01d4"+
    "\2\0\1\u0199\1\u01d4\13\0\1\u01d4\2\0\4\u0189\2\0"+
    "\2\u01d5\5\0\1\u018b\17\0\4\u0189\2\0\2\u01d6\2\0"+
    "\1\u01d6\2\0\1\u018b\1\u01d6\13\0\1\u01d6\2\0\4\u01a0"+
    "\2\0\2\u01d7\5\0\1\u01a2\17\0\4\u01a0\2\0\2\u01d8"+
    "\2\0\1\u01d8\2\0\1\u01a2\1\u01d8\13\0\1\u01d8\2\0"+
    "\4\u0197\2\0\2\u01d9\5\0\1\u0199\17\0\4\u0197\2\0"+
    "\2\u01da\2\0\1\u01da\2\0\1\u0199\1\u01da\13\0\1\u01da"+
    "\2\0\4\u0189\2\0\2\u0189\5\0\1\u018b\17\0\4\u0189"+
    "\2\0\2\u0189\2\0\1\u0189\2\0\1\u018b\1\u0189\13\0"+
    "\1\u0189\2\0\4\u01a0\2\0\2\u01db\5\0\1\u01a2\17\0"+
    "\4\u01a0\2\0\2\u01dc\2\0\1\u01dc\2\0\1\u01a2\1\u01dc"+
    "\13\0\1\u01dc\2\0\4\u0197\2\0\2\u0197\5\0\1\u0199"+
    "\17\0\4\u0197\2\0\2\u0197\2\0\1\u0197\2\0\1\u0199"+
    "\1\u0197\13\0\1\u0197\2\0\4\u01a0\2\0\2\u01a0\5\0"+
    "\1\u01a2\17\0\4\u01a0\2\0\2\u01a0\2\0\1\u01a0\2\0"+
    "\1\u01a2\1\u01a0\13\0\1\u01a0\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13398];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\0\7\1\2\0\1\1\15\0"+
    "\1\11\10\0\1\1\12\0\1\11\47\0\1\11\163\0"+
    "\1\1\10\0\1\11\12\0\1\11\17\0\1\11\57\0"+
    "\1\11\12\0\1\11\150\0\1\11\5\0\1\11\6\0"+
    "\1\11\63\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[476];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public FateScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FateScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 21: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 22: break;
          case 3:
            { return EOL;
            }
          // fall through
          case 23: break;
          case 4:
            { return DEC;
            }
          // fall through
          case 24: break;
          case 5:
            { return COMMENT;
            }
          // fall through
          case 25: break;
          case 6:
            { return ID;
            }
          // fall through
          case 26: break;
          case 7:
            { return HEX;
            }
          // fall through
          case 27: break;
          case 8:
            { return PARAMINLINE1;
            }
          // fall through
          case 28: break;
          case 9:
            { return PARAMGAMEVAR1;
            }
          // fall through
          case 29: break;
          case 10:
            { return PARAMSTORAGE;
            }
          // fall through
          case 30: break;
          case 11:
            { return PARAMGAMEVARARRAY3;
            }
          // fall through
          case 31: break;
          case 12:
            { return PARAMGAMEVAR2;
            }
          // fall through
          case 32: break;
          case 13:
            { return PARAMINLINE6;
            }
          // fall through
          case 33: break;
          case 14:
            { return PARAMINLINE2;
            }
          // fall through
          case 34: break;
          case 15:
            { return PARAMGAMEVARARRAY1;
            }
          // fall through
          case 35: break;
          case 16:
            { return PARAMGAMEVARARRAY4;
            }
          // fall through
          case 36: break;
          case 17:
            { return PARAMINLINE3;
            }
          // fall through
          case 37: break;
          case 18:
            { return PARAMOTHERSTORAGEOFFSET;
            }
          // fall through
          case 38: break;
          case 19:
            { return PARAMOTHEROTHERSTORAGE;
            }
          // fall through
          case 39: break;
          case 20:
            { return PARAMGAMEVARARRAY2;
            }
          // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
