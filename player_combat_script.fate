entrypoint :ENTRYPOINT_0
entrypoint :ENTRYPOINT_1
entrypoint :ENTRYPOINT_2
entrypoint :ENTRYPOINT_3
entrypoint :ENTRYPOINT_4
entrypoint :ENTRYPOINT_5
entrypoint :ENTRYPOINT_6
entrypoint :ENTRYPOINT_7
entrypoint :ENTRYPOINT_8
entrypoint :ENTRYPOINT_9
entrypoint :ENTRYPOINT_10
entrypoint :ENTRYPOINT_11
entrypoint :ENTRYPOINT_12
entrypoint :ENTRYPOINT_13
entrypoint :ENTRYPOINT_14
entrypoint :ENTRYPOINT_15
entrypoint :ENTRYPOINT_16
entrypoint :ENTRYPOINT_17
entrypoint :ENTRYPOINT_18
entrypoint :ENTRYPOINT_19
entrypoint :ENTRYPOINT_20
entrypoint :ENTRYPOINT_21
entrypoint :ENTRYPOINT_22
entrypoint :ENTRYPOINT_23
entrypoint :ENTRYPOINT_24
entrypoint :ENTRYPOINT_25
entrypoint :ENTRYPOINT_26
entrypoint :ENTRYPOINT_27
entrypoint :ENTRYPOINT_28
entrypoint :ENTRYPOINT_29
entrypoint :ENTRYPOINT_30
entrypoint :ENTRYPOINT_31
data 0x10c
data 0xf00ff2d
data 0x49

; SUBROUTINE
LABEL_60:
yield
call Bttl_800c::scriptAnimationHasFinished, stor[0], stor[8] ; bentIndex, finished
jmp_cmp ==, 0, stor[8], inl[:LABEL_60] ; operand, right, addr
return

; SUBROUTINE
LABEL_207:
yield
call Bttl_800c::scriptAnimationHasFinished, stor[28], stor[8] ; bentIndex, finished
jmp_cmp ==, 0, stor[8], inl[:LABEL_207] ; operand, right, addr
return

; SUBROUTINE
LABEL_108:
jmp_cmp &, 0x2, stor[stor[stor[0], 28], 7], inl[:LABEL_109] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_110] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x10, stor[8], inl[:LABEL_110] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat2, stor[28], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
jmp_cmp >=, 0, stor[8], inl[:LABEL_110] ; operand, right, addr
call Bttl_800c::scriptGetBentStat2, stor[28], MAX_HP, stor[9] ; bentIndex, statIndex, value
div 0x4, stor[9] ; amount, operand
jmp_cmp >=, stor[9], stor[8], inl[:LABEL_111] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x40, stor[8], inl[:LABEL_112] ; operand, left, right, addr
LABEL_109:
call Bttl_800c::FUN_800cb9b0, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_113] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0x0 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[28], 0x1 ; bentIndex, loop
return
LABEL_110:
call Bttl_800c::FUN_800cb9b0, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xe, stor[8], inl[:LABEL_113] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0xe ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[28], 0x0 ; bentIndex, loop
return
LABEL_112:
call Bttl_800c::FUN_800cb9b0, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xa, stor[8], inl[:LABEL_113] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0xa ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[28], 0x1 ; bentIndex, loop
return
LABEL_111:
call Bttl_800c::FUN_800cb9b0, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xb, stor[8], inl[:LABEL_113] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0xb ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[28], 0x1 ; bentIndex, loop
LABEL_113:
return

; SUBROUTINE
LABEL_763:
call Bttl_800c::scriptGetBentSlot, stor[28], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
mov stor[8], var[128 + stor[10]][5] ; source, dest
mov 0x5, var[128 + stor[10]][0] ; source, dest
call Bttl_800c::scriptSetBentStat, stor[30], stor[8], SPELL_ID ; bentIndex, value, statIndex
call Bttl_800f::scriptSetTempSpellStats, stor[30] ; bentIndex
mov stor[8], var[45][119] ; source, dest
call Bttl_800c::scriptGetBentStat, stor[30], SPELL_TARGET_TYPE, stor[9] ; bentIndex, statIndex, value
jmp_cmp &, 0x80, stor[9], inl[:LABEL_764] ; operand, left, right, addr
call Bttl_800f::scriptCheckPhysicalHit, stor[30], stor[28], stor[9] ; attackerIndex, defenderIndex, hit
jmp inl[:LABEL_765] ; addr
LABEL_764:
call Bttl_800f::scriptCheckSpellOrStatusHit, stor[30], stor[28], stor[9] ; attackerIndex, defenderIndex, hit
LABEL_765:
jmp_cmp ==, 0, stor[9], inl[:LABEL_766] ; operand, right, addr
gosub inl[:LABEL_767] ; addr
mov stor[9], var[45][119] ; source, dest
jmp_cmp ==, 0, stor[8], inl[:LABEL_769] ; operand, right, addr
call Bttl_800c::scriptGetBentStat, stor[30], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x8, stor[9], inl[:LABEL_769] ; operand, left, right, addr
shr 0x1, stor[8] ; right, left
LABEL_769:
mov var[45][119], stor[9] ; source, dest
return
LABEL_766:
mov 0xffffffff, stor[8] ; source, dest
return

; SUBROUTINE
LABEL_767:
call Bttl_800c::scriptGetBentStat, stor[30], SPELL_TARGET_TYPE, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x80, stor[8], inl[:LABEL_768] ; operand, left, right, addr
call Bttl_800f::scriptPhysicalAttack, stor[30], stor[28], stor[8], stor[10] ; attackerIndex, defenderIndex, damage, specialEffects
return
LABEL_768:
call Bttl_800f::scriptDragoonMagicStatusItemAttack, stor[30], stor[28], var[45][119], stor[8], stor[10] ; attackerIndex, defenderIndex, spellId, damage, specialEffects
return
data 0xa80338
data 0x200001e
data 0x2000008
data 0x25
data 0x1ed0138
data 0x200001e
data 0x208
data 0x2000008
data 0xf00772d
data 0x1fb0338
data 0x200001e
data 0x200001c
data 0x2000009
data 0x20242
data 0x2000009
data 0x9000021
data 0x1730338
data 0x200001c
data 0x200000a
data 0x0
data 0x208
data 0x2000008
data 0x10050a80
data 0x208
data 0x2
data 0x10000a80
data 0x208
data 0x200001e
data 0x10030a80
data 0x208
data 0x2000008
data 0x10020a80
data 0xa90338
data 0x200001e
data 0x50
data 0x2000008
data 0x208
data 0x2000008
data 0x10010a80
data 0x1ec0538
data 0x200001e
data 0x200001c
data 0xf00772d
data 0x2000008
data 0x200000a
data 0x49
data 0x208
data 0xffffffff
data 0x2000008
data 0x49

; SUBROUTINE
LABEL_32:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; right, left
or stor[9], var[45][246] ; right, left
return

; SUBROUTINE
LABEL_151:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; right, left
neg stor[9] ; operand
decr stor[9] ; operand
and stor[9], var[45][246] ; right, left
return
data 0x10c
data 0x2000008
data 0x70341
data 0x1000000
data 0x200000
data 0x3071c00
data 0x9000007
data 0x11b
data 0x2000008
data 0x49
data 0x357
data 0x200001c
data 0xa
data 0x2000008

; SUBROUTINE
LABEL_426:
yield
jmp_cmp &, 0x200000, stor[stor[stor[0], 28], 7], inl[:LABEL_426] ; operand, left, right, addr
yield
yield
return

; SUBROUTINE
LABEL_141:
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_142] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat2, stor[28], CURRENT_HP, stor[10] ; bentIndex, statIndex, value
add stor[8], stor[10] ; amount, operand
call Bttl_800c::scriptGetBentStat2, stor[28], MAX_HP, stor[9] ; bentIndex, statIndex, value
jmp_cmp >=, stor[9], stor[10], inl[:LABEL_143] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat2, stor[28], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
mov stor[9], stor[10] ; source, dest
sub stor[8], stor[9] ; amount, operand
mov stor[9], stor[8] ; source, dest
LABEL_143:
call Bttl_800f::scriptRenderRecover, stor[28], stor[8], 0x7 ; bentIndex, amount, colourIndex
call Bttl_800c::scriptSetBentRawStat, stor[28], stor[10], CURRENT_HP ; bentIndex, value, statIndex
LABEL_142:
return

; SUBROUTINE
LABEL_81:
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_82] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[28], CURRENT_MP, stor[10] ; bentIndex, statIndex, value
add stor[8], stor[10] ; amount, operand
call Bttl_800c::scriptGetBentStat, stor[28], MAX_MP, stor[9] ; bentIndex, statIndex, value
jmp_cmp >=, stor[9], stor[10], inl[:LABEL_83] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[28], CURRENT_MP, stor[8] ; bentIndex, statIndex, value
mov stor[9], stor[10] ; source, dest
sub stor[8], stor[9] ; amount, operand
mov stor[9], stor[8] ; source, dest
LABEL_83:
call Bttl_800f::scriptRenderRecover, stor[28], stor[8], 0xc ; bentIndex, amount, colourIndex
call Bttl_800c::scriptSetBentRawStat, stor[28], stor[10], CURRENT_MP ; bentIndex, value, statIndex
LABEL_82:
return

; SUBROUTINE
LABEL_92:
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_93] ; operand, left, right, addr
call Bttl_800f::scriptGiveSp, stor[28], stor[8], stor[9] ; bentIndex, amount, total
call Bttl_800f::scriptRenderRecover, stor[28], stor[8], 0xd ; bentIndex, amount, colourIndex
jmp_cmp !&, 0x2, stor[stor[stor[0], 28], 7], inl[:LABEL_93] ; operand, left, right, addr
div 0x64, stor[8] ; amount, operand
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x1 ; bentIndex, charOrBentSlot, mode
add 0x45, stor[9] ; amount, operand
add stor[8], var[45][stor[9]] ; amount, operand
LABEL_93:
return

; SUBROUTINE
LABEL_277:
yield
mov var[49], stor[9] ; source, dest
mov 0, stor[10] ; dest
mov 0, stor[11] ; dest
mov 0, stor[12] ; dest
mov 0, stor[8] ; dest
LABEL_278:
mov var[48][stor[8]], stor[12] ; source, dest
mov stor[stor[stor[0], 12], 7], stor[10] ; source, dest
and 0x200000, stor[10] ; right, left
or stor[10], stor[11] ; right, left
incr stor[8] ; operand
jmp_cmp >, stor[9], stor[8], inl[:LABEL_278] ; operand, left, right, addr
jmp_cmp !=, 0, stor[11], inl[:LABEL_277] ; operand, right, addr
yield
yield
return

; SUBROUTINE
LABEL_279:
yield
call Bttl_800f::scriptIsFloatingNumberOnScreen, stor[8] ; onScreen
jmp_cmp !=, 0, stor[8], inl[:LABEL_279] ; operand, right, addr
return

; SUBROUTINE
LABEL_492:
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
mov 0, var[45][stor[9]] ; dest
call Bttl_800c::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; right, left
call Bttl_800c::scriptSetBentStat, stor[28], stor[8], STATUS ; bentIndex, value, statIndex
return
data 0x40242
data 0xf00402d
data 0x900006e
data 0xa80338
data 0x200001e
data 0xf00402d
data 0x29
data 0x1e10438
data 0x200001e
data 0x200001c
data 0x2000009
data 0x200000a
data 0x208
data 0x200000a
data 0xf00f12d
data 0xa90338
data 0x200001e
data 0x5
data 0x200000b
data 0x70341
data 0x1000000
data 0x8
data 0x200000b
data 0x900000b
data 0x20242
data 0x2000009
data 0x9000006
data 0x216
data 0x1
data 0x2000009
data 0x1730338
data 0x200001e
data 0x200000a
data 0x0
data 0x218
data 0xbd
data 0x200000a
data 0x208
data 0x7000a2d
data 0x200000a
data 0x70341
data 0x2
data 0x200000a
data 0x900000b
data 0x60341
data 0x4
data 0x200000a
data 0x9000007
data 0x216
data 0x1
data 0x2000009
data 0x50242
data 0x2000009
data 0x9000033
data 0x1730338
data 0x200001e
data 0x200000a
data 0x0
data 0x218
data 0xbd
data 0x200000a
data 0x70341
data 0x1
data 0x7000a2d
data 0x9000029
data 0xb10338
data 0x200001e
data 0x2
data 0x200000a
data 0xb10338
data 0x200001e
data 0x6
data 0x200000b
data 0x221
data 0x2
data 0x200000b
data 0x10341
data 0x200000b
data 0x200000a
data 0x900001a
data 0xb10338
data 0x200001e
data 0x6
data 0x200000b
data 0x221
data 0x4
data 0x200000b
data 0x50341
data 0x200000b
data 0x200000a
data 0x900000c
data 0x220
data 0x3
data 0x2000009
data 0x216
data 0x1
data 0x2000009
data 0x140
data 0x9000005
data 0x220
data 0x2
data 0x2000009
data 0x50341
data 0x3b9ac9ff
data 0x2000009
data 0x9000007
data 0x208
data 0x3b9ac9ff
data 0x2000009
data 0x49
data 0x208
data 0xffffffff
data 0x2000009
data 0x208
data 0xffffffff
data 0x200000a
data 0x49
data 0x357
data 0x200001c
data 0x11
data 0x0
data 0x148
data 0x900ff43
data 0x49
data 0x10c
data 0x200000d
data 0x208
data 0x7000d32
data 0x200001c
data 0x70341
data 0x1000000
data 0x2
data 0x3071c00
data 0x900000b
data 0x357
data 0x200001c
data 0x11
data 0x0
data 0x148
data 0x900ff32
data 0x11b
data 0x200000d
data 0x208
data 0xa
data 0x200000e
data 0x40341
data 0x5000033
data 0x200000d
data 0x900ffed
data 0x49

; SUBROUTINE
LABEL_98:
memcpy 0x2, stor[8], inl[:LABEL_99] ; size, src, dest
gosub inl[:LABEL_100] ; addr
memcpy 0x2, inl[:LABEL_99], stor[8] ; size, src, dest
return

; SUBROUTINE
LABEL_100:
call Bttl_800c::scriptGetBentStat, stor[8], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x4000, stor[9], inl[:LABEL_101] ; operand, left, right, addr
mov 0x9, stor[9] ; source, dest
jmp inl[:LABEL_102] ; addr
LABEL_101:
call Bttl_800c::scriptGetCharOrMonsterId, stor[8], stor[9] ; bentIndex, id
LABEL_102:
jmp_cmp &, 0x2, stor[stor[stor[0], 8], 7], inl[:LABEL_103] ; operand, left, right, addr
call Bttl_800e::FUN_800ee3c0, stor[8], inl[:LABEL_104[stor[9]]] ; bentIndex, modelPartAttachmentIndex
call Bttl_800e::scriptSetBentShadowSize, stor[8], inl[:LABEL_105[stor[9]]], inl[:LABEL_105[stor[9]]] ; bentIndex, x, z
return
LABEL_103:
call Bttl_800e::FUN_800ee3c0, stor[8], inl[:LABEL_106[stor[9]]] ; bentIndex, modelPartAttachmentIndex
return
LABEL_99:
data 0x0
data 0x0
LABEL_104:
data 0x8
data 0x9
data 0xd
data 0xb
data 0xa
data 0x9
data 0xc
data 0x8
data 0xc
data 0x8
LABEL_106:
data 0x8
data 0x9
data 0xb
data 0xb
data 0x8
data 0x9
data 0xc
data 0x8
data 0xb
data 0x7
LABEL_105:
data 0x1800
data 0x1800
data 0x1000
data 0xe00
data 0x1600
data 0x1300
data 0xe00
data 0x2000
data 0x1300
data 0x1500
LABEL_546:
mov 0x8, stor[8] ; source, dest
LABEL_544:
jmp_cmp <, 0x8, stor[8], inl[:LABEL_545] ; operand, left, right, addr
jmp_cmp >, 0, stor[8], inl[:LABEL_546] ; operand, right, addr
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[30], stor[stor[stor[0], 18], 30] ; source, dest
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[8], stor[stor[stor[0], 18], 31] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_547] ; scriptIndex, address
return

; FORK RE-ENTRY
LABEL_547:
gosub inl[:LABEL_548] ; addr
call Bttl_800e::allocateBillboardSpriteEffect, stor[18], 0xfff25 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[20], stor[21], stor[22] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x500, 0x500, 0x500 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[18], stor[18], 0x0, 0xfffffe00, 0xfffffe00, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddRelativePositionScalerTicks1, stor[18], 0xffffffff, 0xf, stor[10], stor[11], stor[12] ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptUpdateParabolicPositionScalerAttachment, stor[18], 0xffffffff, 0x0, 0x2000, 0x0 ; effectIndex, unused, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, inl[:LABEL_552[stor[31]]], inl[:LABEL_553[stor[31]]], inl[:LABEL_554[stor[31]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddLifespanAttachment, stor[18], 0xf ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[19], stor[18], 0xfff3e, 0x20, 0x40, 0xc, 0x200, 0x0, 0x37 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[20], stor[21], stor[22] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRelativePositionScalerTicks1, stor[19], 0xffffffff, 0xf, stor[10], stor[11], stor[12] ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptUpdateParabolicPositionScalerAttachment, stor[19], 0xffffffff, 0x0, 0x2000, 0x0 ; effectIndex, unused, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddLifespanAttachment, stor[19], 0x20 ; effectIndex, ticks
call Bttl_800e::allocateBillboardSpriteEffect, stor[19], 0xfff17 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0xfffffc00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0xf ; effectIndex, ticks
call Bttl_800e::allocateBillboardSpriteEffect, stor[19], 0xfff18 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0x400, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0xf ; effectIndex, ticks
call Bttl_800e::allocateBillboardSpriteEffect, stor[19], 0xfff17 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0x0, 0xfffffc00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0xf ; effectIndex, ticks
call Bttl_800e::allocateBillboardSpriteEffect, stor[19], 0xfff18 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0x0, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0xf ; effectIndex, ticks
mov 0xf, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAllocateParticleEffect, stor[19], stor[18], 0xfff17, 0x4, 0x200, 0x2, 0x200, 0xc7f00, 0x27 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[10], stor[11], stor[12] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0x14 ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[19], stor[18], 0xfff18, 0x4, 0x200, 0x2, 0x200, 0xc7f00, 0x27 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[10], stor[11], stor[12] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0x14 ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[19], stor[18], 0xfff25, 0x10, 0x200, 0x2, 0x200, 0x40c7f00, 0x27 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[10], stor[11], stor[12] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, inl[:LABEL_552[stor[31]]], inl[:LABEL_553[stor[31]]], inl[:LABEL_554[stor[31]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetGenericEffectValue, stor[19], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[19], 0x14 ; effectIndex, ticks
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
deallocate

; SUBROUTINE
LABEL_548:
jmp_cmp <=, 0, stor[28], inl[:LABEL_549] ; operand, right, addr
mov var[53], stor[23] ; source, dest
mov 0, stor[8] ; dest
mov 0, stor[10] ; dest
mov 0, stor[11] ; dest
mov 0, stor[12] ; dest
LABEL_550:
mov var[52][stor[8]], stor[9] ; source, dest
call Bttl_800c::scriptGetBentPos, stor[9], stor[20], stor[21], stor[22] ; bentIndex, x, y, z
add stor[20], stor[10] ; amount, operand
add stor[21], stor[11] ; amount, operand
add stor[22], stor[12] ; amount, operand
incr stor[8] ; operand
jmp_cmp >, stor[23], stor[8], inl[:LABEL_550] ; operand, left, right, addr
div stor[23], stor[10] ; amount, operand
div stor[23], stor[11] ; amount, operand
div stor[23], stor[12] ; amount, operand
sub 0x600, stor[11] ; amount, operand
sub 0x200, stor[11] ; amount, operand
mov 0, stor[12] ; dest
LABEL_551:
call Bttl_800c::scriptGetBentPos, stor[30], stor[20], stor[21], stor[22] ; bentIndex, x, y, z
sub 0x400, stor[21] ; amount, operand
return

; SUBROUTINE
LABEL_549:
gosub inl[:LABEL_361] ; addr
memcpy 0x3, stor[24], stor[10] ; size, src, dest
jmp inl[:LABEL_551] ; addr
LABEL_552:
data 0xff
data 0x51
data 0x55
data 0xd8
data 0xe7
data 0xe8
data 0x10
data 0x0
data 0xf5
LABEL_553:
data 0x20
data 0xa6
data 0xc8
data 0xd4
data 0xe7
data 0xe0
data 0x10
data 0x0
data 0xff
LABEL_554:
data 0x0
data 0xe8
data 0x83
data 0x88
data 0x78
data 0x88
data 0xd8
data 0x0
data 0xd7
LABEL_545:
sub 0x9, stor[8] ; amount, operand
jmp inl[:LABEL_555] ; addr
data 0x208
data 0x8
data 0x2000008
LABEL_555:
jmp_cmp <, 0x8, stor[8], inl[:LABEL_546] ; operand, left, right, addr
jmp_cmp >, 0, stor[8], inl[:LABEL_546] ; operand, right, addr
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[30], stor[stor[stor[0], 18], 30] ; source, dest
mov stor[8], stor[stor[stor[0], 18], 8] ; source, dest
jmp_cmp >=, 0, stor[28], inl[:LABEL_556] ; operand, right, addr
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_557] ; scriptIndex, address
LABEL_556:
return

; FORK RE-ENTRY
LABEL_557:
gosub inl[:LABEL_549] ; addr
call Bttl_800e::allocateBillboardSpriteEffect, stor[18], 0xfff26 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[20], stor[21], stor[22] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[18], stor[18], 0x0, 0xfffffe00, 0xfffffe00, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddRelativePositionScalerTicks1, stor[18], 0xffffffff, 0xf, stor[10], stor[11], stor[12] ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptUpdateParabolicPositionScalerAttachment, stor[18], 0xffffffff, 0x0, 0x2000, 0x0 ; effectIndex, unused, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, inl[:LABEL_558[stor[8]]], inl[:LABEL_559[stor[8]]], inl[:LABEL_560[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::FUN_801153e4, stor[18], 0x3 ; effectIndex, set
call SEffe::scriptAddLifespanAttachment, stor[18], 0xf ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[19], stor[18], 0xfff3e, 0x20, 0x40, 0xc, 0x200, 0x4207f00, 0x37 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[20], stor[21], stor[22] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRelativePositionScalerTicks1, stor[19], 0xffffffff, 0xf, stor[10], stor[11], stor[12] ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptUpdateParabolicPositionScalerAttachment, stor[19], 0xffffffff, 0x0, 0x2000, 0x0 ; effectIndex, unused, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, inl[:LABEL_558[stor[8]]], inl[:LABEL_559[stor[8]]], inl[:LABEL_560[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetGenericEffectValue, stor[19], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[19], 0x20 ; effectIndex, ticks
call Bttl_800e::allocateBillboardSpriteEffect, stor[19], 0xfff26 ; effectIndex, flags
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, inl[:LABEL_558[stor[8]]], inl[:LABEL_559[stor[8]]], inl[:LABEL_560[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0xfffffa00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0xf ; effectIndex, ticks
call Bttl_800e::allocateBillboardSpriteEffect, stor[19], 0xfff26 ; effectIndex, flags
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, inl[:LABEL_558[stor[8]]], inl[:LABEL_559[stor[8]]], inl[:LABEL_560[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0x600, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0xf ; effectIndex, ticks
call Bttl_800e::allocateBillboardSpriteEffect, stor[19], 0xfff26 ; effectIndex, flags
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, inl[:LABEL_558[stor[8]]], inl[:LABEL_559[stor[8]]], inl[:LABEL_560[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0x0, 0xfffffa00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0xf ; effectIndex, ticks
call Bttl_800e::allocateBillboardSpriteEffect, stor[19], 0xfff26 ; effectIndex, flags
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, inl[:LABEL_558[stor[8]]], inl[:LABEL_559[stor[8]]], inl[:LABEL_560[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0x0, 0x600 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0xf ; effectIndex, ticks
mov 0xf, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAllocateParticleEffect, stor[19], stor[18], inl[:LABEL_561[stor[8]]], 0x6, 0x200, 0x2, 0x200, 0xc7f00, 0x27 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[10], stor[11], stor[12] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0x14 ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[19], stor[18], inl[:LABEL_561[stor[8]]], 0x6, 0x200, 0x2, 0x200, 0xc7f00, 0x27 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[10], stor[11], stor[12] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0x14 ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[19], stor[18], 0xfff26, 0xc, 0x200, 0x2, 0x200, 0x40c7f00, 0x27 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[10], stor[11], stor[12] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, inl[:LABEL_558[stor[8]]], inl[:LABEL_559[stor[8]]], inl[:LABEL_560[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetGenericEffectValue, stor[19], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[19], 0x14 ; effectIndex, ticks
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
deallocate
LABEL_558:
data 0xff
data 0x78
data 0x64
data 0x1e
data 0x78
data 0xe8
data 0x10
data 0x0
data 0xf5
LABEL_559:
data 0x20
data 0x0
data 0x64
data 0x1e
data 0x78
data 0xe0
data 0x10
data 0x50
data 0xff
LABEL_560:
data 0x0
data 0x78
data 0x0
data 0xf0
data 0x0
data 0x88
data 0xd8
data 0x14
data 0xd7
LABEL_561:
data 0xfff00
data 0xfff2b
data 0xfff2f
data 0xfff33
data 0xfff05
data 0xfff00
data 0xfff00
data 0xfff38
data 0xfff00

; SUBROUTINE
LABEL_361:
call Bttl_800c::scriptGetBentStat, stor[28], _64, stor[24] ; bentIndex, statIndex, value
call Bttl_800c::scriptGetBentStat, stor[28], _65, stor[25] ; bentIndex, statIndex, value
mul 0x64, stor[24] ; amount, operand
mul 0x64, stor[25] ; amount, operand
neg stor[25] ; operand
mov 0, stor[26] ; dest
call Bttl_800c::scriptGetBentPos, stor[28], stor[14], stor[15], stor[16] ; bentIndex, x, y, z
add stor[14], stor[24] ; amount, operand
add stor[15], stor[25] ; amount, operand
add stor[16], stor[26] ; amount, operand
return
data 0x1730338
data 0x200001c
data 0x2000008
data 0x0
data 0x208
data 0x200001e
data 0x10040880
data 0x49

; SUBROUTINE
LABEL_72:
jmp_cmp >, 0, var[45][224], inl[:LABEL_73] ; operand, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp !&, 0x10, stor[8], inl[:LABEL_73] ; operand, left, right, addr
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[8] ; amount, operand
or 0xf00, var[45][stor[8]] ; right, left
LABEL_73:
return
data 0x0
data 0x60341
data 0x4
data 0xf00f52d
data 0x900ffff
data 0x49

; SUBROUTINE
LABEL_592:
call Bttl_800c::scriptGetBentStat, stor[28], SPECIAL_EFFECT_FLAGS, stor[8] ; bentIndex, statIndex, value
and 0x80, stor[8] ; right, left
return

; SUBROUTINE
LABEL_630:
call SEffe::scriptGetAdditionOverlayActiveStatus, 0x0, stor[8] ; type, state
jmp_cmp ==, 0, stor[8], inl[:LABEL_631] ; operand, right, addr
mov var[45][104], stor[8] ; source, dest
return
LABEL_631:
mov 0xffffffff, stor[8] ; source, dest
return

; SUBROUTINE
LABEL_785:
mov 0, var[45][253] ; dest
return

; SUBROUTINE
LABEL_428:
mov 0xffffffff, var[45][253] ; source, dest
return

; SUBROUTINE
LABEL_467:
mov 0, stor[12] ; dest
mov var[51], stor[29] ; source, dest
LABEL_469:
mov var[50][stor[12]], stor[28] ; source, dest
gosub inl[:LABEL_456] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_468] ; operand, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0x4 ; bentIndex, animIndex
jmp_cmp &, 0x2, stor[stor[stor[0], 28], 7], inl[:LABEL_468] ; operand, left, right, addr
call Bttl_800c::scriptSetBentRotationY, stor[28], 0xc00 ; bentIndex, y
LABEL_468:
incr stor[12] ; operand
jmp_cmp !=, stor[29], stor[12], inl[:LABEL_469] ; operand, left, right, addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x20, 0x0, 0x0, 0x0, 0x3 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
mov 0, stor[12] ; dest
LABEL_471:
mov var[50][stor[12]], stor[28] ; source, dest
gosub inl[:LABEL_456] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_470] ; operand, right, addr
call Bttl_800c::FUN_800cbb00, stor[28], stor[28], 0x14, 0x7d0, 0x0, 0x0 ; bentIndex0, bentIndex1, ticks, x, y, z
call SEffe::scriptAllocateParticleEffect, stor[stor[stor[0], 28], 18], stor[28], 0xfff03, 0x8, 0xc8, 0x3, 0x100, 0x4124000, 0x3 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[stor[stor[0], 28], 18], stor[28], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[stor[stor[0], 28], 18], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[stor[stor[0], 28], 18], 0xffffffff, 0x4f, 0x45, 0x38 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetGenericEffectValue, stor[stor[stor[0], 28], 18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptSetParticleAcceleration, 0x0, stor[stor[stor[0], 28], 18], 0xfffff800, 0x0, 0x0, 0x100 ; mode, effectIndex, accelerationX, accelerationY, accelerationZ, accelerationScale
call SEffe::scriptAddLifespanAttachment, stor[stor[stor[0], 28], 18], 0x12 ; effectIndex, ticks
LABEL_470:
incr stor[12] ; operand
jmp_cmp !=, stor[29], stor[12], inl[:LABEL_471] ; operand, left, right, addr
mov 0x10, stor[23] ; source, dest
wait stor[23] ; frames
mov 0, stor[12] ; dest
LABEL_473:
mov var[50][stor[12]], stor[28] ; source, dest
gosub inl[:LABEL_456] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_472] ; operand, right, addr
call SEffe::scriptSetParticleAcceleration, 0x1, stor[stor[stor[0], 28], 18], 0x0, 0x0, 0x0, 0x0 ; mode, effectIndex, accelerationX, accelerationY, accelerationZ, accelerationScale
LABEL_472:
incr stor[12] ; operand
jmp_cmp !=, stor[29], stor[12], inl[:LABEL_473] ; operand, left, right, addr
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
call Scus94491BpeSegment::scriptStopSound, 0x0, 0x20, 0x3 ; soundFileIndex, soundIndex, mode
mov 0, stor[12] ; dest
LABEL_475:
mov var[50][stor[12]], stor[28] ; source, dest
gosub inl[:LABEL_456] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_474] ; operand, right, addr
LABEL_474:
incr stor[12] ; operand
jmp_cmp !=, stor[29], stor[12], inl[:LABEL_475] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_455:
mov 0, stor[12] ; dest
mov var[51], stor[29] ; source, dest
LABEL_459:
mov var[50][stor[12]], stor[28] ; source, dest
gosub inl[:LABEL_456] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_458] ; operand, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0x4 ; bentIndex, animIndex
jmp_cmp &, 0x2, stor[stor[stor[0], 28], 7], inl[:LABEL_458] ; operand, left, right, addr
call Bttl_800c::scriptSetBentRotationY, stor[28], 0xc00 ; bentIndex, y
LABEL_458:
incr stor[12] ; operand
jmp_cmp !=, stor[29], stor[12], inl[:LABEL_459] ; operand, left, right, addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
mov 0, stor[12] ; dest
LABEL_466:
mov var[50][stor[12]], stor[28] ; source, dest
gosub inl[:LABEL_456] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_460] ; operand, right, addr
gosub inl[:LABEL_461] ; addr
call Bttl_800c::scriptSetBentRotationY, stor[28], 0x400 ; bentIndex, y
LABEL_460:
incr stor[12] ; operand
jmp_cmp !=, stor[29], stor[12], inl[:LABEL_466] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_456:
mov 0, stor[8] ; dest
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
mov var[45][stor[9]], stor[10] ; source, dest
and 0xf, stor[10] ; right, left
jmp_cmp !=, 0x4, stor[10], inl[:LABEL_457] ; operand, left, right, addr
incr stor[8] ; operand
LABEL_457:
return

; SUBROUTINE
LABEL_54:
mov 0, stor[8] ; dest
call Bttl_800c::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
mov var[45][stor[9]], stor[10] ; source, dest
and 0xf, stor[10] ; right, left
jmp_cmp !=, 0x4, stor[10], inl[:LABEL_55] ; operand, left, right, addr
incr stor[8] ; operand
jmp inl[:LABEL_56] ; addr
LABEL_55:
jmp_cmp !&, 0x40, stor[7], inl[:LABEL_56] ; operand, left, right, addr
incr stor[8] ; operand
LABEL_56:
return

; SUBROUTINE
LABEL_90:
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[10] ; bentIndex, statIndex, value
jmp_cmp !&, 0x2000, stor[10], inl[:LABEL_91] ; operand, left, right, addr
LABEL_800:
mov 0x1, stor[10] ; source, dest
return
LABEL_91:
mov 0, stor[10] ; dest
return

; SUBROUTINE
LABEL_799:
call Bttl_800c::scriptGetBentStat, stor[28], STATUS, stor[10] ; bentIndex, statIndex, value
jmp_cmp !&, 0x2000, stor[10], inl[:LABEL_91] ; operand, left, right, addr
jmp inl[:LABEL_800] ; addr

; SUBROUTINE
LABEL_254:
jmp_cmp !=, 0x4, stor[11], inl[:LABEL_255] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x9 ; bentIndex, animIndex
gosub inl[:LABEL_60] ; addr
LABEL_255:
gosub inl[:LABEL_66] ; addr
return

; SUBROUTINE TABLE
LABEL_346:
rel :JMP_1e58_0
rel :JMP_1e58_1
rel :JMP_1e58_1
rel :JMP_1e58_1
rel :LABEL_340
rel :LABEL_341

; SUBROUTINE TABLE
LABEL_350:
rel :JMP_1e58_0
rel :JMP_1e70_1
rel :JMP_1e70_2
rel :JMP_1e70_3
rel :LABEL_340
rel :LABEL_341

; SUBROUTINE
LABEL_341:
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0xffffffff, var[128 + stor[9]][0] ; source, dest
mov 0xffffffff, var[128 + stor[9]][1] ; source, dest
mov 0xffffffff, var[128 + stor[9]][2] ; source, dest
mov 0xffffffff, var[128 + stor[9]][3] ; source, dest
mov 0xffffffff, var[128 + stor[9]][4] ; source, dest
return

; SUBROUTINE
JMP_1e58_0:
gosub inl[:LABEL_341] ; addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x0, var[128 + stor[9]][0] ; source, dest
mov stor[0], var[128 + stor[9]][3] ; source, dest
return

; SUBROUTINE
LABEL_340:
gosub inl[:LABEL_341] ; addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
LABEL_358:
mov 0x4, var[128 + stor[9]][0] ; source, dest
mov stor[0], var[128 + stor[9]][3] ; source, dest
return
data 0x148
data 0x900ffd2
data 0x1730338
data 0x200001c
data 0x2000009
data 0x0
data 0x208
data 0x4
data 0x10000980
data 0x208
data 0x200001e
data 0x10030980
data 0x49

; SUBROUTINE
JMP_1e70_1:
jmp_cmp >, 0, stor[28], inl[:LABEL_357] ; operand, right, addr
gosub inl[:LABEL_341] ; addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
jmp_cmp &, 0x2, stor[7], inl[:LABEL_358] ; operand, left, right, addr
mov 0x1, var[128 + stor[9]][0] ; source, dest
mov stor[0], var[128 + stor[9]][3] ; source, dest
LABEL_357:
return

; SUBROUTINE
JMP_1e70_2:
jmp_cmp >, 0, stor[28], inl[:LABEL_356] ; operand, right, addr
gosub inl[:LABEL_341] ; addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x2, var[128 + stor[9]][0] ; source, dest
mov stor[0], var[128 + stor[9]][3] ; source, dest
mov stor[29], var[128 + stor[9]][2] ; source, dest
LABEL_356:
return

; SUBROUTINE
JMP_1e70_3:
jmp_cmp >, 0, stor[28], inl[:LABEL_354] ; operand, right, addr
gosub inl[:LABEL_341] ; addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x3, var[128 + stor[9]][0] ; source, dest
mov stor[0], var[128 + stor[9]][3] ; source, dest
mov inl[:LABEL_355[stor[31]]], var[128 + stor[9]][1] ; source, dest
mov stor[29], stor[8] ; source, dest
add 0xc0, stor[8] ; amount, operand
mov stor[8], var[128 + stor[9]][2] ; source, dest
LABEL_354:
return
LABEL_355:
data 0x80
data 0x1
data 0x40
data 0x10
data 0x2
data 0x20
data 0x4
data 0x0
data 0x0

; SUBROUTINE
JMP_1e58_1:
jmp_cmp <=, 0, stor[28], inl[:LABEL_349] ; operand, right, addr
mov stor[8], stor[10] ; source, dest
mov 0, stor[11] ; dest
LABEL_359:
mov var[52][stor[11]], stor[28] ; source, dest
gosub_table stor[10], inl[:LABEL_350] ; index, table
incr stor[11] ; operand
jmp_cmp >, var[53], stor[11], inl[:LABEL_359] ; operand, left, right, addr
return
LABEL_349:
jmp_table stor[8], inl[:LABEL_350] ; index, table

; SUBROUTINE TABLE
LABEL_503:
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_4
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_8
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_11
rel :JMP_2108_12
rel :JMP_2108_12
rel :JMP_2108_12
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_19
rel :JMP_2108_20
rel :JMP_2108_4
rel :JMP_2108_0
rel :JMP_2108_23
rel :JMP_2108_0
rel :JMP_2108_25
rel :JMP_2108_26
rel :JMP_2108_4
rel :JMP_2108_0
rel :JMP_2108_29
rel :JMP_2108_30
rel :JMP_2108_30
rel :JMP_2108_30
rel :JMP_2108_33
rel :JMP_2108_4
rel :JMP_2108_35
rel :JMP_2108_36
rel :JMP_2108_37
rel :JMP_2108_38
rel :JMP_2108_39
rel :JMP_2108_0
rel :JMP_2108_41
rel :JMP_2108_37
rel :JMP_2108_43
rel :JMP_2108_0
rel :JMP_2108_43
rel :JMP_2108_0
rel :JMP_2108_47
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_0
rel :JMP_2108_41
rel :JMP_2108_0
JMP_2108_29:
mov 0x8, stor[8] ; source, dest
gosub inl[:LABEL_541] ; addr
mov stor[29], stor[8] ; source, dest
mov stor[0], stor[30] ; source, dest
gosub inl[:LABEL_592] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_593] ; operand, right, addr
call Bttl_800c::scriptSetBentRawStat, stor[28], 0x0, CURRENT_HP ; bentIndex, value, statIndex
fork_reenter stor[28], 0x4, 0x0 ; index, entrypoint, p2
gosub inl[:LABEL_417] ; addr
gosub inl[:LABEL_277] ; addr
jmp inl[:LABEL_594] ; addr
LABEL_593:
call Bttl_800c::scriptRenderDamage, stor[28], 0xffffffff ; bentIndex, damage
LABEL_594:
gosub inl[:LABEL_536] ; addr
return
JMP_2108_38:
mov 0xcd, stor[8] ; source, dest
gosub inl[:LABEL_585] ; addr
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
gosub inl[:LABEL_587] ; addr
call Scus94491BpeSegment::scriptUnloadSoundFile, 0x6 ; soundType
mov 0x20, stor[23] ; source, dest
wait stor[23] ; frames
jmp_cmp ==, 0, var[46][2], inl[:LABEL_591] ; operand, right, addr
or 0x1, var[45][77] ; right, left
return
LABEL_591:
or 0x1, var[45][77] ; right, left
or 0x8, var[45][77] ; right, left
return

; SUBROUTINE
LABEL_587:
call SEffe::scriptAllocateParticleEffect, stor[18], 0xffffffff, 0xfff03, 0x8, 0x7d0, 0x3, 0x100, 0x4204000, 0x0 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
gosub inl[:LABEL_588] ; addr
yield
call SEffe::scriptAllocateParticleEffect, stor[18], 0xffffffff, 0xfff03, 0x8, 0x320, 0x3, 0x100, 0x4204000, 0x0 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
gosub inl[:LABEL_588] ; addr
return

; SUBROUTINE
LABEL_588:
gosub inl[:LABEL_589] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[10], stor[11], stor[12] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0xa00, 0xa00, 0xa00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x4f, 0x45, 0x38 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x20 ; effectIndex, ticks
return

; SUBROUTINE
LABEL_589:
mov var[35], stor[19] ; source, dest
mov 0, stor[8] ; dest
mov 0, stor[10] ; dest
mov 0, stor[11] ; dest
mov 0, stor[12] ; dest
LABEL_590:
mov var[34][stor[8]], stor[9] ; source, dest
call Bttl_800c::scriptGetBentPos, stor[9], stor[20], stor[21], stor[22] ; bentIndex, x, y, z
add stor[20], stor[10] ; amount, operand
add stor[21], stor[11] ; amount, operand
add stor[22], stor[12] ; amount, operand
incr stor[8] ; operand
jmp_cmp >, stor[19], stor[8], inl[:LABEL_590] ; operand, left, right, addr
div stor[19], stor[10] ; amount, operand
div stor[19], stor[11] ; amount, operand
div stor[19], stor[12] ; amount, operand
return
JMP_2108_47:
return
JMP_2108_33:
rand 0x7, stor[31] ; bound, dest
jmp_cmp >=, 0x3, stor[31], inl[:LABEL_583] ; operand, left, right, addr
mov 0xffffffff, stor[28] ; source, dest
LABEL_583:
mov inl[:LABEL_584[stor[31]]], stor[29] ; source, dest
sub 0xc0, stor[29] ; amount, operand
call Bttl_800c::scriptSetBentStat, stor[0], stor[29], ITEM_ID ; bentIndex, value, statIndex
call Bttl_800f::scriptSetTempItemMagicStats, stor[0] ; bentIndex
mov stor[29], stor[8] ; source, dest
mov stor[0], stor[30] ; source, dest
jmp_table stor[29], inl[:LABEL_503] ; index, table
LABEL_584:
data 0xd3
data 0xe5
data 0xcb
data 0xe7
data 0xea
data 0xe9
data 0xf9
JMP_2108_8:
rand 0x19, stor[31] ; bound, dest
jmp_cmp >=, 0xa, stor[31], inl[:LABEL_581] ; operand, left, right, addr
mov 0xffffffff, stor[28] ; source, dest
LABEL_581:
mov inl[:LABEL_582[stor[31]]], stor[29] ; source, dest
sub 0xc0, stor[29] ; amount, operand
call Bttl_800c::scriptSetBentStat, stor[0], stor[29], ITEM_ID ; bentIndex, value, statIndex
call Bttl_800f::scriptSetTempItemMagicStats, stor[0] ; bentIndex
mov stor[29], stor[8] ; source, dest
mov stor[0], stor[30] ; source, dest
jmp_table stor[29], inl[:LABEL_503] ; index, table
LABEL_582:
data 0xc2
data 0xc3
data 0xc5
data 0xc6
data 0xc7
data 0xc9
data 0xca
data 0xd4
data 0xd7
data 0xd9
data 0xda
data 0xcf
data 0xd0
data 0xd1
data 0xd2
data 0xd6
data 0xd8
data 0xdc
data 0xf2
data 0xf3
data 0xf4
data 0xf5
data 0xf6
data 0xf7
data 0xf8
JMP_2108_0:
gosub inl[:LABEL_539] ; addr
mov stor[29], stor[8] ; source, dest
add 0xc0, stor[8] ; amount, operand
call Bttl_800e::scriptLoadDeff, stor[8], stor[0], stor[28], 0x0, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
gosub inl[:LABEL_577] ; addr
LABEL_540:
gosub inl[:LABEL_541] ; addr
call Bttl_800e::FUN_800e6db4, 0x1 ; p0
call Bttl_800e::FUN_800e6db4, 0x2 ; p0
call Bttl_800e::FUN_800e6db4, 0x3 ; p0
gosub inl[:LABEL_536] ; addr
gosub inl[:LABEL_420] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
LABEL_577:
call Bttl_800c::scriptGetBentStat, stor[0], ITEM_ELEMENT, stor[8] ; bentIndex, statIndex, value
mov 0x1, stor[9] ; source, dest
mov 0, stor[10] ; dest
LABEL_579:
jmp_cmp &, stor[9], stor[8], inl[:LABEL_578] ; operand, left, right, addr
shl 0x1, stor[9] ; right, left
incr stor[10] ; operand
jmp_cmp >, 0x8, stor[10], inl[:LABEL_579] ; operand, left, right, addr
mov 0x8, stor[8] ; source, dest
return
LABEL_578:
mov inl[:LABEL_580[stor[10]]], stor[8] ; source, dest
return
LABEL_580:
data 0x1
data 0x4
data 0x6
data 0x8
data 0x3
data 0x5
data 0x2
data 0x0
JMP_2108_35:
gosub inl[:LABEL_563] ; addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
or 0xc, var[128 + stor[8]][7] ; right, left
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x14, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
gosub inl[:LABEL_51] ; addr
mov 0x18, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_536] ; addr
return
JMP_2108_36:
gosub inl[:LABEL_563] ; addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
or 0x3, var[128 + stor[8]][7] ; right, left
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x14, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
gosub inl[:LABEL_576] ; addr
mov 0x18, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_536] ; addr
return
JMP_2108_43:
add 0xc0, stor[29] ; amount, operand
call Bttl_800e::scriptLoadDeff, stor[29], stor[0], stor[28], 0x0, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
gosub inl[:LABEL_563] ; addr
call Bttl_800e::FUN_800e6db4, 0x1 ; p0
call Bttl_800e::FUN_800e6db4, 0x2 ; p0
call Bttl_800e::FUN_800e6db4, 0x3 ; p0
gosub inl[:LABEL_536] ; addr
gosub inl[:LABEL_108] ; addr
return
JMP_2108_12:
gosub inl[:LABEL_563] ; addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
mov var[45][stor[9]], stor[9] ; source, dest
and 0xf, stor[9] ; right, left
mov stor[29], stor[8] ; source, dest
sub 0xc, stor[8] ; amount, operand
mov inl[:LABEL_569[stor[9]]], stor[9] ; source, dest
and inl[:LABEL_570[stor[8]]], stor[9] ; right, left
jmp_cmp ==, 0, stor[9], inl[:LABEL_571] ; operand, right, addr
gosub inl[:LABEL_492] ; addr
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
jmp_cmp ==, 0xc, stor[29], inl[:LABEL_572] ; operand, left, right, addr
gosub inl[:LABEL_108] ; addr
LABEL_572:
jmp_cmp !=, 0xe, stor[29], inl[:LABEL_573] ; operand, left, right, addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0, var[128 + stor[9]][6] ; dest
LABEL_573:
gosub inl[:LABEL_536] ; addr
return
LABEL_571:
jmp_cmp !=, 0xe, stor[29], inl[:LABEL_572] ; operand, left, right, addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
jmp_cmp ==, 0, var[128 + stor[9]][6], inl[:LABEL_572] ; operand, right, addr
gosub inl[:LABEL_574] ; addr
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
jmp inl[:LABEL_572] ; addr

; SUBROUTINE
LABEL_574:
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_575] ; scriptIndex, address
return
LABEL_569:
data 0x1
data 0x2
data 0x4
data 0x8
data 0x10
data 0x20
data 0x40
data 0x80
LABEL_570:
data 0x1
data 0x4e
data 0xb0
JMP_2108_20:
gosub inl[:LABEL_539] ; addr
call Bttl_800e::scriptLoadDeff, 0xd4, stor[0], stor[28], 0x0, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
mov 0xb, stor[8] ; source, dest
jmp inl[:LABEL_540] ; addr
JMP_2108_26:
gosub inl[:LABEL_539] ; addr
call Bttl_800e::scriptLoadDeff, 0xda, stor[0], stor[28], 0x0, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
mov 0xc, stor[8] ; source, dest
jmp inl[:LABEL_540] ; addr
JMP_2108_23:
gosub inl[:LABEL_539] ; addr
call Bttl_800e::scriptLoadDeff, 0xd7, stor[0], stor[28], 0x0, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
mov 0xd, stor[8] ; source, dest
jmp inl[:LABEL_540] ; addr
JMP_2108_25:
gosub inl[:LABEL_539] ; addr
call Bttl_800e::scriptLoadDeff, 0xd9, stor[0], stor[28], 0x0, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
mov 0x10, stor[8] ; source, dest
jmp inl[:LABEL_540] ; addr

; SUBROUTINE
LABEL_539:
gosub inl[:LABEL_334] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
return
data 0x208
data 0x2000000
data 0x5000050
data 0x208
data 0x200001c
data 0x5000051
data 0x208
data 0x4c
data 0x500002c
data 0x49

; SUBROUTINE
LABEL_542:
mov stor[0], var[80] ; source, dest
mov stor[28], var[81] ; source, dest
return

; SUBROUTINE
LABEL_541:
gosub inl[:LABEL_542] ; addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x7 ; bentIndex, animIndex
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x15, 0x0, 0x0, 0xf, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
mov 0x10, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_543] ; addr
mov 0x3, stor[8] ; source, dest
gosub_table stor[8], inl[:LABEL_346] ; index, table
jmp inl[:LABEL_562] ; addr
data 0x148
data 0x900ffd4
data 0x1420238
data 0x2000000
data 0x3
data 0x140
data 0x9000005
data 0x1420238
data 0x2000000
data 0x3
data 0xec0638
data 0x0
data 0x15
data 0x0
data 0x0
data 0xf
data 0x0
LABEL_562:
gosub inl[:LABEL_60] ; addr
gosub inl[:LABEL_66] ; addr
call Bttl_800c::scriptSetBentRotationY, stor[0], 0x400 ; bentIndex, y
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
LABEL_536:
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x21, var[44] ; source, dest
return

; SUBROUTINE
LABEL_563:
mov 0x8, stor[8] ; source, dest
gosub inl[:LABEL_526] ; addr
mov 0x8, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x8, stor[8] ; source, dest
gosub inl[:LABEL_564] ; addr
mov 0x10, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
LABEL_501:
jmp_cmp >, 0x40, stor[29], inl[:LABEL_502] ; operand, left, right, addr
return
LABEL_502:
mov 0, var[45][248] ; dest
mov 0, var[45][249] ; dest
call Bttl_800c::scriptSetBentStat, stor[0], stor[29], ITEM_ID ; bentIndex, value, statIndex
call Bttl_800f::scriptSetTempItemMagicStats, stor[0] ; bentIndex
mov stor[29], stor[8] ; source, dest
mov stor[0], stor[30] ; source, dest
jmp_table stor[29], inl[:LABEL_503] ; index, table

; SUBROUTINE
LABEL_543:
jmp inl[:LABEL_544] ; addr

; SUBROUTINE
LABEL_50:
jmp_cmp !=, 0, stor[8], inl[:LABEL_51] ; operand, right, addr

; SUBROUTINE
LABEL_576:
call Bttl_800d::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x2, 0xfd, 0x8b, 0x15 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
jmp inl[:LABEL_52] ; addr

; SUBROUTINE
LABEL_147:
call Bttl_800d::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x2, 0xd5, 0xfd, 0x15 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
jmp inl[:LABEL_52] ; addr

; SUBROUTINE
LABEL_51:
call Bttl_800d::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x2, 0x19, 0x82, 0xfd ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
LABEL_52:
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0xfffffd00, 0xfffffe00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0xc00, 0xc00 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xa, 0xfffffa00, 0xc00, 0xc00 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xa ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff20, 0x18, 0x10, 0x4, 0x400, 0xc7f00, 0x2c ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
gosub inl[:LABEL_53] ; addr
return

; SUBROUTINE
LABEL_53:
call SEffe::scriptSetRelativeRotation, stor[19], stor[28], 0x0, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[19], stor[28], 0x0, 0xfffffd00, 0xfffffe00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0x18 ; effectIndex, ticks
return

; SUBROUTINE
LABEL_585:
call Scus94491BpeSegment::scriptLoadMonsterAttackSounds, stor[8] ; monsterIndex
LABEL_586:
yield
call Scus94491BpeSegment::scriptGetLoadedSoundFiles, stor[23] ; flags
jmp_cmp &, 0x20, stor[23], inl[:LABEL_586] ; operand, left, right, addr
return
JMP_2108_4:
return
JMP_2108_30:
mov 0x8, stor[8] ; source, dest
jmp inl[:LABEL_525] ; addr
JMP_2108_11:
call Bttl_800e::scriptLoadDeff, 0xe7, stor[0], stor[28], 0x1, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
jmp inl[:LABEL_538] ; addr
JMP_2108_39:
call Bttl_800e::scriptLoadDeff, 0xe7, stor[0], stor[28], 0x0, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
LABEL_538:
mov 0x9, stor[8] ; source, dest
jmp inl[:LABEL_537] ; addr
JMP_2108_19:
mov 0xb, stor[8] ; source, dest
jmp inl[:LABEL_525] ; addr
JMP_2108_37:
mov 0xa, stor[8] ; source, dest
jmp inl[:LABEL_525] ; addr
JMP_2108_41:
mov 0x9, stor[8] ; source, dest
jmp inl[:LABEL_525] ; addr
LABEL_525:
mov stor[29], stor[9] ; source, dest
add 0xc0, stor[9] ; amount, operand
call Bttl_800e::scriptLoadDeff, stor[9], stor[0], stor[28], 0x0, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
LABEL_537:
gosub inl[:LABEL_526] ; addr
mov 0x8, stor[23] ; source, dest
wait stor[23] ; frames
call Bttl_800e::FUN_800e6db4, 0x1 ; p0
call Bttl_800e::FUN_800e6db4, 0x2 ; p0
call Bttl_800e::FUN_800e6db4, 0x3 ; p0
gosub inl[:LABEL_536] ; addr
return

; SUBROUTINE
LABEL_417:
call Bttl_800d::scriptGetBobjModelPartCount, stor[28], stor[8] ; bobjIndex, partCount
call SEffe::scriptAllocateParticleEffect, stor[18], stor[28], 0xfff18, stor[8], 0x0, 0x2, 0x0, 0x7064000, 0x40 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x40, 0x600, 0x600 ; bobjIndex1, bobjIndex2, x, y, z
gosub inl[:LABEL_418] ; addr
call Bttl_800d::scriptGetBobjModelPartCount, stor[28], stor[8] ; bobjIndex, partCount
call SEffe::scriptAllocateParticleEffect, stor[18], stor[28], 0xfff18, stor[8], 0x0, 0x2, 0x0, 0x7064000, 0x40 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0xc00, 0x40, 0xc00 ; bobjIndex1, bobjIndex2, x, y, z
gosub inl[:LABEL_418] ; addr
return

; SUBROUTINE
LABEL_418:
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::FUN_801153e4, stor[18], 0x2 ; effectIndex, set
call SEffe::scriptSetEffectZ, stor[18], 0xffffff00 ; effectIndex, z
call Bttl_800d::scriptGetBobjModelPartCount, stor[28], stor[8] ; bobjIndex, partCount
call SEffe::scriptAddLifespanAttachment, stor[18], stor[8] ; effectIndex, ticks
return

; SUBROUTINE TABLE
LABEL_617:
rel :JMP_3128_0
rel :JMP_3128_1
rel :JMP_3128_2
rel :JMP_3128_3
rel :JMP_3128_4

; SUBROUTINE
LABEL_613:
gosub inl[:JMP_1e58_0] ; addr
mov 0, var[45][64] ; dest
mov 0, var[45][82] ; dest
mov 0, var[45][81] ; dest
mov 0, var[45][107] ; dest
mov 0, var[45][83] ; dest
mov 0, var[45][67] ; dest
mov 0, var[45][99] ; dest
mov 0, var[45][103] ; dest
mov 0, var[45][75] ; dest
mov 0, var[45][108] ; dest
mov 0, var[45][112] ; dest
mov 0, var[45][66] ; dest
mov 0, var[45][181] ; dest
mov 0, stor[15] ; dest
incr stor[15] ; operand
mov 0x18, var[45][106] ; source, dest
gosub inl[:LABEL_614] ; addr
mov stor[9], var[45][89] ; source, dest
fork_reenter stor[28], 0x5, stor[0] ; index, entrypoint, p2
LABEL_735:
mov var[45][82], stor[17] ; source, dest
mov var[45][83], stor[14] ; source, dest
gosub_table stor[17], inl[:LABEL_617] ; index, table
gosub inl[:LABEL_709] ; addr
gosub inl[:LABEL_714] ; addr
gosub inl[:LABEL_717] ; addr
gosub inl[:LABEL_727] ; addr
jmp_cmp !=, 0x3, var[45][66], inl[:LABEL_734] ; operand, left, right, addr
mov 0x10, stor[8] ; source, dest
add stor[14], stor[8] ; amount, operand
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], stor[8] ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
LABEL_734:
yield
jmp_cmp !=, 0x5, var[45][82], inl[:LABEL_735] ; operand, left, right, addr
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_736] ; operand, right, addr
mov var[45][108], stor[8] ; source, dest
call Bttl_800c::scriptGetBentSlot, stor[0], stor[31], 0x1 ; bentIndex, charOrBentSlot, mode
add 0x73, stor[31] ; amount, operand
add stor[8], var[45][stor[31]] ; amount, operand
call Bttl_800f::scriptGiveSp, stor[0], stor[8], stor[9] ; bentIndex, amount, total
jmp_cmp !=, 0x2, var[45][242], inl[:LABEL_736] ; operand, left, right, addr
jmp_cmp !=, 0x3, var[45][243], inl[:LABEL_736] ; operand, left, right, addr
jmp_cmp >, 0x64, stor[9], inl[:LABEL_737] ; operand, left, right, addr
or 0x20, stor[stor[stor[0], 28], 7] ; right, left
incr var[45][243] ; operand
jmp inl[:LABEL_736] ; addr
LABEL_737:
or 0x20, stor[7] ; right, left
LABEL_736:
jmp_cmp !=, 0x3, var[45][66], inl[:LABEL_738] ; operand, left, right, addr
mov var[45][105], stor[8] ; source, dest
yield
jmp_cmp !=, 0x2, stor[30], inl[:LABEL_736] ; operand, left, right, addr
call Bttl_800c::scriptPauseAnimation, stor[0] ; bentIndex
mov 0, var[104] ; dest
call Bttl_800e::scriptApplyScreenDarkening, 0x6 ; intensity
gosub inl[:LABEL_739] ; addr
or 0x80, var[45][105] ; right, left
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x26, 0x1, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
incr var[104] ; operand
call Bttl_800e::scriptApplyScreenDarkening, 0x10 ; intensity
jmp_cmp !=, 0x1, var[45][75], inl[:LABEL_740] ; operand, left, right, addr
mov 0x4, var[45][66] ; source, dest
jmp inl[:LABEL_741] ; addr
LABEL_740:
call Scus94491BpeSegment::scriptStartFadeEffect, 0x4, 0xa ; type, frames
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x17, 0x1, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
LABEL_741:
call Bttl_800c::scriptResumeAnimation, stor[0] ; bentIndex
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_742] ; operand, right, addr
call Bttl_800d::scriptAllocateSpTextEffect, 0xffffffff, 0x0 ; p0, p1
LABEL_742:
return
LABEL_738:
jmp_cmp ==, 0, var[45][99], inl[:LABEL_743] ; operand, right, addr
mov stor[14], stor[9] ; source, dest
decr stor[9] ; operand
call Bttl_800c::scriptGetHitProperty, stor[0], stor[9], 0xe, stor[8] ; bentIndex, hitNum, hitPropertyIndex, value
jmp_cmp ==, 0, inl[:LABEL_744[stor[8]]], inl[:LABEL_743] ; operand, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], inl[:LABEL_744[stor[8]]] ; bentIndex, animIndex
LABEL_745:
yield
call Bttl_800c::scriptAnimationHasFinished, stor[0], stor[8] ; bentIndex, finished
jmp_cmp ==, 0, stor[8], inl[:LABEL_745] ; operand, right, addr
LABEL_743:
jmp_cmp >=, 0, stor[13], inl[:LABEL_746] ; operand, right, addr
call Bttl_800c::scriptGetCharOrMonsterId, stor[0], stor[8] ; bentIndex, id
call Bttl_800c::scriptPauseAnimation, stor[0] ; bentIndex
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_747] ; addr
mov 0xd, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_749] ; operand, right, addr
call Bttl_800d::scriptAllocateSpTextEffect, 0xffffffff, 0x0 ; p0, p1
LABEL_749:
gosub inl[:LABEL_700] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_750] ; operand, right, addr
jmp_cmp !=, 0, var[45][243], inl[:LABEL_750] ; operand, right, addr
call Bttl_800c::scriptLevelUpAddition, stor[0], 0x1 ; bentIndex, doIt
LABEL_750:
return
LABEL_746:
call Bttl_800c::scriptPauseAnimation, stor[0] ; bentIndex
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_747] ; addr
mov 0x8, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_751] ; operand, right, addr
call Bttl_800d::scriptAllocateSpTextEffect, 0xffffffff, 0x0 ; p0, p1
LABEL_751:
call Bttl_800c::scriptLevelUpAddition, stor[0], 0x0 ; bentIndex, doIt
return
LABEL_744:
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x18
data 0x19

; SUBROUTINE
JMP_3128_0:
gosub inl[:LABEL_643] ; addr
gosub inl[:LABEL_645] ; addr
mov 0x10, stor[8] ; source, dest
add stor[14], stor[8] ; amount, operand
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], stor[8] ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
gosub inl[:LABEL_652] ; addr
gosub inl[:LABEL_658] ; addr
mov 0, var[45][84] ; dest
mov var[45][88], var[45][85] ; source, dest
incr var[45][82] ; operand
return

; SUBROUTINE
JMP_3128_1:
incr var[45][84] ; operand
jmp_cmp !=, var[45][87], var[45][84], inl[:LABEL_708] ; operand, left, right, addr
incr var[45][82] ; operand
LABEL_708:
return

; SUBROUTINE
JMP_3128_2:
incr var[45][84] ; operand
decr var[45][85] ; operand
jmp_cmp !=, 0, var[45][85], inl[:LABEL_706] ; operand, right, addr
incr var[45][82] ; operand
gosub inl[:LABEL_707] ; addr
LABEL_706:
return

; SUBROUTINE
JMP_3128_3:
incr var[45][84] ; operand
incr var[45][82] ; operand
gosub inl[:LABEL_691] ; addr
gosub inl[:LABEL_694] ; addr
gosub inl[:LABEL_696] ; addr
mov stor[14], stor[8] ; source, dest
incr stor[8] ; operand
jmp_cmp !=, stor[8], var[45][89], inl[:LABEL_704] ; operand, left, right, addr
call Bttl_800c::scriptGetCharOrMonsterId, stor[0], stor[8] ; bentIndex, id
call Bttl_800d::scriptAllocateAdditionScript, stor[8], 0x0 ; charId, p1
or 0x20, var[45][105] ; right, left
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
gosub inl[:LABEL_705] ; addr
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_704] ; operand, right, addr
mov var[45][108], stor[8] ; source, dest
call Bttl_800d::scriptAllocateAdditionNameEffect, stor[8] ; p0
LABEL_704:
return

; SUBROUTINE
LABEL_694:
jmp_cmp &, 0x10, var[45][105], inl[:LABEL_695] ; operand, left, right, addr
incr var[45][64] ; operand
return
LABEL_695:
mov 0xffffffff, var[45][64] ; source, dest
return

; SUBROUTINE
LABEL_645:
call Bttl_800c::scriptGetCharOrMonsterId, stor[0], stor[8] ; bentIndex, id
call Bttl_800c::scriptAllocateWeaponTrailEffect, stor[18], stor[0], inl[:LABEL_646[stor[8]]] ; effectIndex, parentIndex, dobjIndex
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, inl[:LABEL_647[stor[8]]] ; effectIndex, genericIndex, value
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, inl[:LABEL_648[stor[8]]], inl[:LABEL_649[stor[8]]], inl[:LABEL_650[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call Bttl_800c::scriptSetWeaponTrailSegmentCount, stor[18], 0x3 ; effectIndex, count
call SEffe::scriptAddLifespanAttachment, stor[18], var[45][86] ; effectIndex, ticks
jmp_cmp !=, 0x4, stor[8], inl[:LABEL_651] ; operand, left, right, addr
call Bttl_800c::scriptAllocateWeaponTrailEffect, stor[18], stor[0], 0x6 ; effectIndex, parentIndex, dobjIndex
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, inl[:LABEL_647[stor[8]]] ; effectIndex, genericIndex, value
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, inl[:LABEL_648[stor[8]]], inl[:LABEL_649[stor[8]]], inl[:LABEL_650[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call Bttl_800c::scriptSetWeaponTrailSegmentCount, stor[18], 0x3 ; effectIndex, count
call SEffe::scriptAddLifespanAttachment, stor[18], var[45][86] ; effectIndex, ticks
LABEL_651:
return
LABEL_647:
data 0x0
data 0x2
data 0x0
data 0x2
data 0x2
data 0x2
data 0x0
data 0x2
data 0x0
data 0x0
data 0x0
LABEL_646:
data 0xe
data 0x3
data 0x0
data 0x12
data 0x5
data 0x3
data 0x15
data 0x9
data 0x0
data 0x0
data 0x0
LABEL_648:
data 0xe8
data 0x78
data 0x80
data 0xd8
data 0xd8
data 0x78
data 0x80
data 0xf0
data 0x80
data 0x80
LABEL_649:
data 0x68
data 0xa8
data 0x80
data 0x90
data 0xd4
data 0xa8
data 0x80
data 0xd0
data 0x80
data 0x80
LABEL_650:
data 0x20
data 0x20
data 0x80
data 0x10
data 0x88
data 0x20
data 0x80
data 0x90
data 0x80
data 0x80

; SUBROUTINE
LABEL_696:
jmp_cmp &, 0x10, var[45][105], inl[:LABEL_697] ; operand, left, right, addr
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_697] ; operand, right, addr
call Bttl_800c::scriptGetHitProperty, stor[0], stor[14], 0x5, stor[8] ; bentIndex, hitNum, hitPropertyIndex, value
call Bttl_800c::scriptGetBentStat, stor[0], ADDITION_SP_MULTIPLIER, stor[9] ; bentIndex, statIndex, value
call Bttl_800c::scriptGetBentStat, stor[0], SP_MULTIPLIER, stor[10] ; bentIndex, statIndex, value
add 0x64, stor[9] ; amount, operand
mul stor[9], stor[8] ; amount, operand
div 0x64, stor[8] ; amount, operand
add 0x64, stor[10] ; amount, operand
mul stor[10], stor[8] ; amount, operand
div 0x64, stor[8] ; amount, operand
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x40, stor[9], inl[:LABEL_698] ; operand, left, right, addr
mov 0, stor[9] ; dest
jmp inl[:LABEL_699] ; addr
LABEL_698:
mov stor[8], stor[9] ; source, dest
gosub inl[:LABEL_700] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_703] ; operand, right, addr
shr 0x1, stor[9] ; right, left
LABEL_703:
jmp_cmp >=, 0x63, stor[9], inl[:LABEL_699] ; operand, left, right, addr
mov 0x63, stor[9] ; source, dest
LABEL_699:
call Bttl_800d::scriptAllocateSpTextEffect, stor[9], stor[15] ; p0, p1
add stor[9], var[45][108] ; amount, operand
LABEL_697:
return

; SUBROUTINE
JMP_3128_4:
incr var[45][84] ; operand
jmp_cmp <, var[45][84], var[45][86], inl[:LABEL_623] ; operand, left, right, addr
incr stor[14] ; operand
incr var[45][83] ; operand
jmp_cmp ==, stor[14], var[45][89], inl[:LABEL_624] ; operand, left, right, addr
decr stor[14] ; operand
call SEffe::scriptGetHitCompletionState, stor[0], stor[14], stor[13] ; unused, index, result
incr stor[14] ; operand
jmp_cmp <=, 0, stor[13], inl[:LABEL_625] ; operand, right, addr
or 0x2, var[45][105] ; right, left
LABEL_625:
jmp_cmp !&, 0x10, var[45][105], inl[:LABEL_626] ; operand, left, right, addr
mov 0xffffffff, stor[13] ; source, dest
LABEL_626:
jmp_cmp ==, 0x3, var[45][66], inl[:LABEL_627] ; operand, left, right, addr
jmp_cmp >=, 0, stor[13], inl[:LABEL_628] ; operand, right, addr
jmp_cmp !=, 0x2, var[45][66], inl[:LABEL_629] ; operand, left, right, addr
jmp_cmp ==, 0x2, var[45][80], inl[:LABEL_629] ; operand, left, right, addr
gosub inl[:LABEL_630] ; addr
jmp_cmp >, 0, stor[8], inl[:LABEL_632] ; operand, right, addr
call SEffe::scriptAlterAdditionContinuationState, stor[8], 0x1 ; effectIndex, state
LABEL_632:
jmp inl[:LABEL_628] ; addr
LABEL_629:
mov 0, var[45][82] ; dest
mov 0, var[45][81] ; dest
mov 0, var[45][107] ; dest
gosub inl[:LABEL_634] ; addr
jmp inl[:JMP_3128_0] ; addr
LABEL_624:
mov 0x1, stor[13] ; source, dest
LABEL_627:
jmp_cmp >=, 0, stor[13], inl[:LABEL_690] ; operand, right, addr
jmp inl[:LABEL_690] ; addr
LABEL_690:
mov 0x5, var[45][82] ; source, dest
return
LABEL_628:
mov 0x5, var[45][82] ; source, dest
incr var[45][66] ; operand
jmp_cmp !=, 0x3, var[45][66], inl[:LABEL_633] ; operand, left, right, addr
mov 0x3e7, stor[31] ; source, dest
jmp inl[:LABEL_633] ; addr
LABEL_633:
incr var[45][99] ; operand
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_623] ; operand, right, addr
mov var[45][108], stor[8] ; source, dest
call Bttl_800d::scriptAllocateAdditionNameEffect, stor[8] ; p0
LABEL_623:
return

; SUBROUTINE
LABEL_634:
jmp_cmp !=, 0x2, var[45][66], inl[:LABEL_635] ; operand, left, right, addr
or 0x1, var[45][105] ; right, left
mov 0x5, var[45][66] ; source, dest
call Bttl_800c::scriptPauseAnimation, stor[0] ; bentIndex
gosub inl[:LABEL_630] ; addr
jmp_cmp >, 0, stor[8], inl[:LABEL_636] ; operand, right, addr
call SEffe::scriptAlterAdditionContinuationState, stor[8], 0x0 ; effectIndex, state
LABEL_636:
mov 0, var[104] ; dest
call Bttl_800e::scriptApplyScreenDarkening, 0x6 ; intensity
gosub inl[:LABEL_637] ; addr
mov 0x7, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x3, stor[23] ; source, dest
wait stor[23] ; frames
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x26, 0x1, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
incr var[104] ; operand
call Bttl_800e::scriptApplyScreenDarkening, 0x10 ; intensity
call Bttl_800c::scriptResumeAnimation, stor[0] ; bentIndex
gosub inl[:LABEL_630] ; addr
jmp_cmp >, 0, stor[8], inl[:LABEL_642] ; operand, right, addr
call SEffe::scriptAlterAdditionContinuationState, stor[8], 0x0 ; effectIndex, state
mov 0, stor[stor[stor[0], 8], 8] ; dest
LABEL_642:
return
LABEL_635:
return

; SUBROUTINE
LABEL_637:
mov 0x320, stor[19] ; source, dest
mov 0xfffff800, stor[20] ; source, dest
mov 0x17, stor[22] ; source, dest
jmp inl[:LABEL_638] ; addr

; SUBROUTINE
LABEL_739:
mov 0xfffffce0, stor[19] ; source, dest
mov 0x800, stor[20] ; source, dest
mov 0x11, stor[22] ; source, dest
jmp inl[:LABEL_638] ; addr
LABEL_638:
call Bttl_800d::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0xfffffce0, 0xfffffe70 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x2000, 0x2000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x10, stor[19], 0x2000, 0x2000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAllocateScreenDistortionEffect, stor[21], 0x0, 0x2 ; effectIndex, angleStep, type
call SEffe::scriptAddLifespanAttachment, stor[21], 0xe ; effectIndex, ticks
gosub inl[:LABEL_639] ; addr
add 0x1000, stor[10] ; amount, operand
shl 0x8, stor[8] ; right, left
shl 0x8, stor[9] ; right, left
shl 0x8, stor[10] ; right, left
call Bttl_800d::FUN_800dac20, 0x5, stor[8], stor[9], stor[10], 0x0 ; mode, x, y, z, scriptIndex
yield
sub 0x100000, stor[10] ; amount, operand
call Bttl_800d::FUN_800db8b0, 0x5, stor[8], stor[9], stor[10], 0x6, 0x1, 0x1, 0x0, 0x0 ; mode, x, y, z, ticks, stepSmoothingMode, stepZ, stepType, scriptIndex
LABEL_640:
yield
call Bttl_800d::scriptIsCameraMoving, 0x0, stor[8] ; type, isMoving
jmp_cmp !=, 0, stor[8], inl[:LABEL_640] ; operand, right, addr
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x7, stor[20], 0x2000, 0x2000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x7, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddLifespanAttachment, stor[18], 0x7 ; effectIndex, ticks
gosub inl[:LABEL_641] ; addr
return

; SUBROUTINE
LABEL_709:
jmp_cmp !=, 0, var[45][81], inl[:LABEL_710] ; operand, right, addr
mov 0, var[45][80] ; dest
jmp_cmp !&, 0x20, var[4], inl[:LABEL_711] ; operand, left, right, addr
incr var[45][80] ; operand
LABEL_711:
jmp_cmp !&, 0x40, var[4], inl[:LABEL_712] ; operand, left, right, addr
incr var[45][80] ; operand
incr var[45][80] ; operand
LABEL_712:
jmp_cmp ==, 0, var[45][80], inl[:LABEL_710] ; operand, right, addr
jmp_cmp <=, 0x3, var[45][80], inl[:LABEL_713] ; operand, left, right, addr
jmp_cmp !=, 0x2, var[45][82], inl[:LABEL_713] ; operand, left, right, addr
mov 0x1, var[45][81] ; source, dest
LABEL_710:
return
LABEL_713:
mov 0xffffffff, var[45][81] ; source, dest
return

; SUBROUTINE
LABEL_714:
mov stor[14], stor[8] ; source, dest
incr stor[8] ; operand
jmp_cmp >=, stor[8], var[45][89], inl[:LABEL_715] ; operand, left, right, addr
jmp_cmp &, 0x10, var[45][105], inl[:LABEL_715] ; operand, left, right, addr
jmp_cmp !=, 0, var[45][107], inl[:LABEL_715] ; operand, right, addr
call SEffe::scriptGetHitCompletionState, stor[0], stor[14], stor[8] ; unused, index, result
mov stor[8], var[45][177] ; source, dest
jmp_cmp ==, 0, stor[8], inl[:LABEL_715] ; operand, right, addr
jmp_cmp >, 0, stor[8], inl[:LABEL_716] ; operand, right, addr
mov 0x1, var[45][107] ; source, dest
LABEL_715:
return
LABEL_716:
mov 0xffffffff, var[45][107] ; source, dest
return

; SUBROUTINE
LABEL_717:
jmp_cmp &, 0x10, var[45][105], inl[:LABEL_718] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[28], MONSTER_DAMAGE_REDUCTION, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x10, stor[8], inl[:LABEL_719] ; operand, left, right, addr
jmp_cmp ==, 0x5, var[45][82], inl[:LABEL_718] ; operand, left, right, addr
mov var[45][83], stor[14] ; source, dest
incr stor[14] ; operand
mov var[45][87], stor[10] ; source, dest
add var[45][88], stor[10] ; amount, operand
jmp_cmp !=, var[45][84], stor[10], inl[:LABEL_718] ; operand, left, right, addr
mov 0x3, stor[9] ; source, dest
jmp_cmp ==, stor[14], var[45][89], inl[:LABEL_720] ; operand, left, right, addr
call Bttl_800c::scriptGetHitProperty, stor[0], stor[14], 0xc, stor[8] ; bentIndex, hitNum, hitPropertyIndex, value
mov stor[8], stor[9] ; source, dest
sub var[45][122], stor[8] ; amount, operand
mov stor[9], var[45][122] ; source, dest
call Bttl_800c::scriptGetHitProperty, stor[0], stor[14], 0xb, stor[9] ; bentIndex, hitNum, hitPropertyIndex, value
jmp_cmp !&, 0x80, stor[9], inl[:LABEL_721] ; operand, left, right, addr
or 0xffffff00, stor[9] ; right, left
LABEL_721:
add stor[8], stor[9] ; amount, operand
add var[45][123], stor[9] ; amount, operand
mov 0, stor[8] ; dest
jmp_cmp <=, 0, stor[9], inl[:LABEL_722] ; operand, right, addr
mov stor[9], stor[8] ; source, dest
mov 0, stor[9] ; dest
LABEL_722:
mov stor[8], var[45][123] ; source, dest
LABEL_720:
mul 0x64, stor[9] ; amount, operand
add stor[9], var[45][67] ; amount, operand
neg stor[9] ; operand
mov stor[9], var[45][112] ; source, dest
call Bttl_800c::scriptGetBentPos, stor[28], stor[18], stor[19], stor[20] ; bentIndex, x, y, z
add stor[9], stor[18] ; amount, operand
call Bttl_800c::FUN_800cbde0, stor[28], 0xffffffff, 0x3, stor[18], stor[19], stor[20] ; bentIndex0, bentIndex1, ticks, x, y, z
LABEL_718:
return
LABEL_719:
jmp_cmp ==, 0x5, var[45][82], inl[:LABEL_723] ; operand, left, right, addr
mov var[45][83], stor[14] ; source, dest
incr stor[14] ; operand
mov var[45][87], stor[10] ; source, dest
add var[45][88], stor[10] ; amount, operand
jmp_cmp !=, var[45][84], stor[10], inl[:LABEL_723] ; operand, left, right, addr
mov 0x3, stor[9] ; source, dest
mov 0x3, stor[11] ; source, dest
jmp_cmp ==, stor[14], var[45][89], inl[:LABEL_724] ; operand, left, right, addr
call Bttl_800c::scriptGetHitProperty, stor[0], stor[14], 0xc, stor[8] ; bentIndex, hitNum, hitPropertyIndex, value
mov stor[8], stor[9] ; source, dest
sub var[45][122], stor[8] ; amount, operand
mov stor[9], var[45][122] ; source, dest
call Bttl_800c::scriptGetHitProperty, stor[0], stor[14], 0xb, stor[9] ; bentIndex, hitNum, hitPropertyIndex, value
jmp_cmp !&, 0x80, stor[9], inl[:LABEL_725] ; operand, left, right, addr
or 0xffffff00, stor[9] ; right, left
LABEL_725:
add stor[8], stor[9] ; amount, operand
add var[45][123], stor[9] ; amount, operand
mov 0, stor[8] ; dest
jmp_cmp <=, 0, stor[9], inl[:LABEL_726] ; operand, right, addr
mov stor[9], stor[8] ; source, dest
mov 0, stor[9] ; dest
LABEL_726:
mov stor[8], var[45][123] ; source, dest
LABEL_724:
mul 0x64, stor[9] ; amount, operand
add stor[9], var[45][67] ; amount, operand
call Bttl_800c::scriptGetBentPos, stor[0], stor[18], stor[19], stor[20] ; bentIndex, x, y, z
add stor[9], stor[18] ; amount, operand
call Bttl_800c::FUN_800cbb00, stor[0], 0xffffffff, stor[11], stor[18], stor[19], stor[20] ; bentIndex0, bentIndex1, ticks, x, y, z
LABEL_723:
return

; SUBROUTINE
LABEL_614:
mov 0, stor[9] ; dest
LABEL_616:
call Bttl_800c::scriptGetHitProperty, stor[0], stor[9], 0x1, stor[10] ; bentIndex, hitNum, hitPropertyIndex, value
jmp_cmp ==, 0, stor[10], inl[:LABEL_615] ; operand, right, addr
incr stor[9] ; operand
jmp_cmp !=, 0x8, stor[9], inl[:LABEL_616] ; operand, left, right, addr
LABEL_615:
return

; SUBROUTINE
LABEL_643:
mov 0x56, stor[11] ; source, dest
mov 0x1, stor[10] ; source, dest
mov 0x3, stor[12] ; source, dest
LABEL_644:
call Bttl_800c::scriptGetHitProperty, stor[0], stor[14], stor[10], var[45][stor[11]] ; bentIndex, hitNum, hitPropertyIndex, value
incr stor[10] ; operand
incr stor[11] ; operand
while stor[12], inl[:LABEL_644] ; counter, addr
decr var[45][86] ; operand
return
data 0x24a
data 0x200001e
data 0xb1f1fd3

; SUBROUTINE
LABEL_652:
call Bttl_800c::scriptGetBentSlot, stor[28], stor[8], 0x1 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; right, left
jmp_cmp &, stor[9], var[45][250], inl[:LABEL_653] ; operand, left, right, addr
call Bttl_800c::scriptGetHitProperty, stor[0], 0x0, 0x6, stor[8] ; bentIndex, hitNum, hitPropertyIndex, value
mov inl[:LABEL_654[stor[8]]], stor[8] ; source, dest
mov var[45][83], stor[18] ; source, dest
mul 0x4, stor[18] ; amount, operand
add stor[8], stor[18] ; amount, operand
mov 0, var[45][74] ; dest
mov 0x4, stor[21] ; source, dest
LABEL_657:
mov inl[:LABEL_654[stor[18]]], stor[9] ; source, dest
mov stor[9], stor[10] ; source, dest
mov stor[9], stor[11] ; source, dest
and 0xc0000000, stor[9] ; right, left
and 0xffff00, stor[10] ; right, left
shr 0x8, stor[10] ; right, left
and 0xff, stor[11] ; right, left
jmp_cmp >, 0, stor[9], inl[:LABEL_653] ; operand, right, addr
jmp_cmp ==, 0, stor[9], inl[:LABEL_655] ; operand, right, addr
call Scus94491BpeSegment::scriptPlaySound, 0x0, stor[10], 0x1, 0x0, stor[11], 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
jmp inl[:LABEL_656] ; addr
LABEL_655:
call Scus94491BpeSegment::scriptPlayBentSound, 0x1, stor[0], stor[10], 0x1, 0x0, stor[11], 0x0 ; type, bentIndex, soundIndex, a3, a4, initialDelay, repeatDelay
LABEL_656:
incr stor[18] ; operand
while stor[21], inl[:LABEL_657] ; counter, addr
LABEL_653:
return

; SUBROUTINE
LABEL_691:
mov var[45][83], stor[8] ; source, dest
incr stor[8] ; operand
jmp_cmp ==, stor[8], var[45][89], inl[:LABEL_692] ; operand, left, right, addr
call Bttl_800d::scriptAllocateAdditionStarburstEffect, stor[19], 0xffffffff, var[45][106], 0x0 ; effectIndex, parentIndex, rayCount, type
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
jmp inl[:LABEL_693] ; addr
LABEL_692:
call Bttl_800d::scriptAllocateAdditionStarburstEffect, stor[19], 0xffffffff, var[45][106], 0x1 ; effectIndex, parentIndex, rayCount, type
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0xa0, 0xa0, 0x60 ; bobjIndex1, bobjIndex2, r, g, b
LABEL_693:
call SEffe::scriptAddLifespanAttachment, stor[19], 0x6 ; effectIndex, ticks
mov var[45][83], stor[8] ; source, dest
shl 0x5, stor[8] ; right, left
div var[45][89], stor[8] ; amount, operand
add stor[8], var[45][106] ; amount, operand
return

; SUBROUTINE
LABEL_727:
jmp_cmp &, 0x10, var[45][105], inl[:LABEL_728] ; operand, left, right, addr
jmp_cmp ==, 0x5, var[45][82], inl[:LABEL_728] ; operand, left, right, addr
mov var[45][83], stor[14] ; source, dest
jmp_cmp ==, 0, stor[14], inl[:LABEL_728] ; operand, right, addr
mov var[45][89], stor[8] ; source, dest
decr stor[8] ; operand
jmp_cmp ==, stor[14], stor[8], inl[:LABEL_729] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[28], MONSTER_DAMAGE_REDUCTION, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x10, stor[8], inl[:LABEL_728] ; operand, left, right, addr
call Bttl_800c::scriptGetHitProperty, stor[0], stor[14], 0x9, stor[10] ; bentIndex, hitNum, hitPropertyIndex, value
jmp_cmp !=, var[45][84], stor[10], inl[:LABEL_728] ; operand, left, right, addr
gosub inl[:LABEL_730] ; addr
mov var[45][112], stor[11] ; source, dest
add stor[11], stor[8] ; amount, operand
call Bttl_800c::scriptGetHitProperty, stor[0], stor[14], 0x8, stor[11] ; bentIndex, hitNum, hitPropertyIndex, value
jmp_cmp ==, 0, stor[11], inl[:LABEL_731] ; operand, right, addr
mul 0x64, stor[11] ; amount, operand
add stor[11], stor[8] ; amount, operand
LABEL_731:
mul 0x100, stor[8] ; amount, operand
mul 0x100, stor[9] ; amount, operand
mul 0x100, stor[10] ; amount, operand
call Bttl_800c::scriptGetHitProperty, stor[0], stor[14], 0xa, stor[11] ; bentIndex, hitNum, hitPropertyIndex, value
call Bttl_800d::FUN_800db574, 0x0, stor[8], stor[9], stor[10], 0x0, stor[11], 0x0, stor[0] ; mode, x, y, z, ?, ticks, stepType, scriptIndex
LABEL_728:
return
LABEL_729:
jmp_cmp !=, 0x3, var[45][82], inl[:LABEL_728] ; operand, left, right, addr
call SEffe::scriptAllocateScreenDistortionEffect, stor[21], 0x0, 0x2 ; effectIndex, angleStep, type
call SEffe::scriptAddLifespanAttachment, stor[21], 0x6 ; effectIndex, ticks
call Bttl_800c::scriptGetHitProperty, stor[0], stor[14], 0x7, stor[11] ; bentIndex, hitNum, hitPropertyIndex, value
jmp_cmp ==, 0, stor[11], inl[:LABEL_732] ; operand, right, addr
gosub inl[:LABEL_639] ; addr
add 0x80, stor[9] ; amount, operand
mul 0x100, stor[11] ; amount, operand
add stor[11], stor[10] ; amount, operand
shl 0x8, stor[8] ; right, left
shl 0x8, stor[9] ; right, left
shl 0x8, stor[10] ; right, left
call Bttl_800d::FUN_800db8b0, 0x5, stor[8], stor[9], stor[10], 0x6, 0x1, 0x1, 0x0, 0x0 ; mode, x, y, z, ticks, stepSmoothingMode, stepZ, stepType, scriptIndex
LABEL_732:
call Bttl_800c::scriptGetHitProperty, stor[0], stor[14], 0x8, stor[11] ; bentIndex, hitNum, hitPropertyIndex, value
jmp_cmp ==, 0, stor[11], inl[:LABEL_733] ; operand, right, addr
gosub inl[:LABEL_730] ; addr
mul 0x64, stor[11] ; amount, operand
add stor[11], stor[8] ; amount, operand
mul 0x100, stor[8] ; amount, operand
mul 0x100, stor[9] ; amount, operand
mul 0x100, stor[10] ; amount, operand
call Bttl_800d::FUN_800db574, 0x0, stor[8], stor[9], stor[10], 0x0, 0x6, 0x0, stor[0] ; mode, x, y, z, ?, ticks, stepType, scriptIndex
LABEL_733:
return

; SUBROUTINE
LABEL_730:
call Bttl_800d::scriptCalculateCameraValue, 0x1, 0x0, 0x0, stor[0], stor[8] ; type, mode, component, scriptIndex, out
call Bttl_800d::scriptCalculateCameraValue, 0x1, 0x0, 0x1, stor[0], stor[9] ; type, mode, component, scriptIndex, out
call Bttl_800d::scriptCalculateCameraValue, 0x1, 0x0, 0x2, stor[0], stor[10] ; type, mode, component, scriptIndex, out
return

; SUBROUTINE
LABEL_639:
call Bttl_800d::scriptCalculateCameraValue, 0x0, 0x5, 0x0, 0x0, stor[8] ; type, mode, component, scriptIndex, out
call Bttl_800d::scriptCalculateCameraValue, 0x0, 0x5, 0x1, 0x0, stor[9] ; type, mode, component, scriptIndex, out
call Bttl_800d::scriptCalculateCameraValue, 0x0, 0x5, 0x2, 0x0, stor[10] ; type, mode, component, scriptIndex, out
return

; SUBROUTINE
LABEL_707:
call Scus94491BpeSegment::FUN_80017584, 0x0, 0x1 ; joypadIndex, p1
call Scus94491BpeSegment::FUN_80017688, 0x0, 0x0, 0xc ; p0, p1, p2
return

; SUBROUTINE
LABEL_705:
call Scus94491BpeSegment::FUN_80017584, 0x0, 0x2 ; joypadIndex, p1
call Scus94491BpeSegment::FUN_80017688, 0x0, 0x0, 0xc ; p0, p1, p2
return

; SUBROUTINE
LABEL_641:
call Scus94491BpeSegment::FUN_80017584, 0x0, 0x3 ; joypadIndex, p1
call Scus94491BpeSegment::FUN_80017688, 0x0, 0x0, 0xc ; p0, p1, p2
return

; SUBROUTINE
LABEL_780:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
add 0xbd, stor[8] ; amount, operand
mov var[45][stor[8]], stor[8] ; source, dest
and 0x2, stor[8] ; right, left
jmp_cmp ==, 0, var[45][243], inl[:LABEL_781] ; operand, right, addr
mov 0, stor[8] ; dest
LABEL_781:
return

; SUBROUTINE
LABEL_700:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
add 0xbd, stor[8] ; amount, operand
mov var[45][stor[8]], stor[8] ; source, dest
jmp_cmp &, 0x4, stor[8], inl[:LABEL_701] ; operand, left, right, addr
and 0x2, stor[8] ; right, left
jmp_cmp ==, 0, var[45][243], inl[:LABEL_702] ; operand, right, addr
LABEL_701:
mov 0, stor[8] ; dest
LABEL_702:
return
LABEL_654:
data 0x29
data 0x3d
data 0x31
data 0x4d
data 0x61
data 0x79
data 0x95
data 0xb5
data 0xb5
data 0xbd
data 0xc9
data 0xdd
data 0xf9
data 0x119
data 0x119
data 0x121
data 0x12d
data 0x145
data 0x165
data 0x2a5
data 0x2ad
data 0x2bd
data 0x2d5
data 0x23d
data 0x245
data 0x255
data 0x269
data 0x285
data 0x2a5
data 0x165
data 0x16d
data 0x179
data 0x189
data 0x19d
data 0x1b9
data 0x1d9
data 0x1d9
data 0x1e1
data 0x1ed
data 0x201
data 0x21d
data 0x409
data 0x7
data 0xffffffff
data 0xffffffff
data 0x50b
data 0x309
data 0xffffffff
data 0xffffffff
data 0x409
data 0x7
data 0xffffffff
data 0xffffffff
data 0xd0c
data 0x10a
data 0xffffffff
data 0xffffffff
data 0x908
data 0x306
data 0xffffffff
data 0xffffffff
data 0x409
data 0x7
data 0xffffffff
data 0xffffffff
data 0x51c
data 0x11a
data 0xffffffff
data 0xffffffff
data 0x90f
data 0x20d
data 0xffffffff
data 0xffffffff
data 0xa05
data 0x303
data 0xffffffff
data 0xffffffff
data 0x409
data 0x7
data 0xffffffff
data 0xffffffff
data 0x717
data 0x115
data 0xffffffff
data 0xffffffff
data 0x90e
data 0x30c
data 0xffffffff
data 0xffffffff
data 0x50e
data 0x20c
data 0xffffffff
data 0xffffffff
data 0xa08
data 0x306
data 0xffffffff
data 0xffffffff
data 0x409
data 0x7
data 0xffffffff
data 0xffffffff
data 0x50a
data 0x208
data 0xffffffff
data 0xffffffff
data 0x703
data 0x301
data 0xffffffff
data 0xffffffff
data 0x803
data 0x301
data 0xffffffff
data 0xffffffff
data 0x503
data 0x301
data 0xffffffff
data 0xffffffff
data 0x902
data 0x300
data 0xffffffff
data 0xffffffff
data 0x409
data 0x7
data 0xffffffff
data 0xffffffff
data 0x714
data 0x212
data 0xffffffff
data 0xffffffff
data 0x809
data 0x107
data 0xffffffff
data 0xffffffff
data 0x70b
data 0x309
data 0xffffffff
data 0xffffffff
data 0x407
data 0x205
data 0xffffffff
data 0xffffffff
data 0x507
data 0x205
data 0xffffffff
data 0xffffffff
data 0xa0c
data 0x30a
data 0xc28
data 0xffffffff
data 0x409
data 0x7
data 0xffffffff
data 0xffffffff
data 0x812
data 0x110
data 0xffffffff
data 0xffffffff
data 0x506
data 0x204
data 0xffffffff
data 0xffffffff
data 0x707
data 0x105
data 0xffffffff
data 0xffffffff
data 0x50f
data 0x30d
data 0xffffffff
data 0xffffffff
data 0x908
data 0x106
data 0xffffffff
data 0xffffffff
data 0xb09
data 0x207
data 0xffffffff
data 0xffffffff
data 0xa11
data 0x30f
data 0xffffffff
data 0xffffffff
data 0x50b
data 0x9
data 0xffffffff
data 0xffffffff
data 0x80d
data 0x30b
data 0xffffffff
data 0xffffffff
data 0x50b
data 0x9
data 0xffffffff
data 0xffffffff
data 0x910
data 0x10e
data 0xffffffff
data 0xffffffff
data 0xa14
data 0x312
data 0x704
data 0x70a
data 0x50b
data 0x9
data 0xffffffff
data 0xffffffff
data 0x80e
data 0x10c
data 0xffffffff
data 0xffffffff
data 0x807
data 0x205
data 0xffffffff
data 0xffffffff
data 0x90b
data 0x209
data 0xffffffff
data 0xffffffff
data 0xb0d
data 0x30b
data 0xffffffff
data 0xffffffff
data 0x50b
data 0x9
data 0xffffffff
data 0xffffffff
data 0x80e
data 0x10c
data 0xffffffff
data 0xffffffff
data 0xc0f
data 0x30d
data 0xffffffff
data 0xffffffff
data 0x806
data 0x4
data 0xffffffff
data 0xffffffff
data 0x911
data 0x10f
data 0x707
data 0x70c
data 0xa08
data 0x206
data 0xffffffff
data 0xffffffff
data 0xb13
data 0x311
data 0x70c
data 0x70f
data 0x50b
data 0x9
data 0xffffffff
data 0xffffffff
data 0xa0d
data 0x10b
data 0xffffffff
data 0xffffffff
data 0xd14
data 0x213
data 0xffffffff
data 0xffffffff
data 0x80b
data 0x9
data 0xffffffff
data 0xffffffff
data 0x911
data 0x20f
data 0xffffffff
data 0xffffffff
data 0x50d
data 0x20b
data 0xffffffff
data 0xffffffff
data 0xa0f
data 0x10d
data 0xffffffff
data 0xffffffff
data 0xb07
data 0x305
data 0xffffffff
data 0xffffffff
data 0x505
data 0x3
data 0xffffffff
data 0xffffffff
data 0x40b
data 0x209
data 0xffffffff
data 0xffffffff
data 0x505
data 0x3
data 0xffffffff
data 0xffffffff
data 0x709
data 0x107
data 0xffffffff
data 0xffffffff
data 0xa08
data 0x306
data 0xffffffff
data 0xffffffff
data 0x505
data 0x3
data 0xffffffff
data 0xffffffff
data 0x40c
data 0x10a
data 0xffffffff
data 0xffffffff
data 0x810
data 0x20e
data 0xffffffff
data 0xffffffff
data 0x506
data 0x104
data 0xffffffff
data 0xffffffff
data 0x90f
data 0x30d
data 0xffffffff
data 0xffffffff
data 0xa0c
data 0x20a
data 0xffffffff
data 0xffffffff
data 0x505
data 0x3
data 0xffffffff
data 0xffffffff
data 0x907
data 0x105
data 0xffffffff
data 0xffffffff
data 0x409
data 0x307
data 0xffffffff
data 0xffffffff
data 0x80e
data 0x10c
data 0xffffffff
data 0xffffffff
data 0x70e
data 0xc
data 0xffffffff
data 0xffffffff
data 0x80a
data 0x208
data 0xffffffff
data 0xffffffff
data 0x90b
data 0x109
data 0xffffffff
data 0xffffffff
data 0xa04
data 0x202
data 0xffffffff
data 0xffffffff
data 0x409
data 0x7
data 0xffffffff
data 0xffffffff
data 0xa03
data 0x101
data 0xffffffff
data 0xffffffff
data 0x409
data 0x7
data 0xffffffff
data 0xffffffff
data 0xa03
data 0x1
data 0xffffffff
data 0xffffffff
data 0xb2a
data 0x328
data 0xffffffff
data 0xffffffff
data 0x409
data 0x7
data 0xffffffff
data 0xffffffff
data 0x90a
data 0x108
data 0xffffffff
data 0xffffffff
data 0x50b
data 0x209
data 0xffffffff
data 0xffffffff
data 0xb0a
data 0x308
data 0xffffffff
data 0xffffffff
data 0x409
data 0x7
data 0xffffffff
data 0xffffffff
data 0x40a
data 0x108
data 0xffffffff
data 0xffffffff
data 0x806
data 0x104
data 0xffffffff
data 0xffffffff
data 0x906
data 0x204
data 0xffffffff
data 0xffffffff
data 0xb07
data 0x305
data 0xffffffff
data 0xffffffff
data 0x409
data 0x7
data 0xffffffff
data 0xffffffff
data 0x508
data 0x106
data 0xffffffff
data 0xffffffff
data 0x904
data 0x202
data 0xffffffff
data 0xffffffff
data 0x806
data 0x4
data 0xffffffff
data 0xffffffff
data 0x505
data 0x103
data 0xffffffff
data 0xffffffff
data 0xb09
data 0x207
data 0xffffffff
data 0xffffffff
data 0xa0a
data 0x308
data 0xffffffff
data 0xffffffff
data 0x408
data 0x6
data 0xffffffff
data 0xffffffff
data 0x908
data 0x106
data 0xffffffff
data 0xffffffff
data 0x802
data 0x200
data 0xffffffff
data 0xffffffff
data 0x507
data 0x5
data 0xffffffff
data 0xffffffff
data 0x905
data 0x203
data 0xffffffff
data 0xffffffff
data 0x803
data 0x101
data 0xffffffff
data 0xffffffff
data 0xb0a
data 0x208
data 0xffffffff
data 0xffffffff
data 0xa03
data 0x301
data 0xffffffff
data 0xffffffff
data 0x502
data 0x0
data 0xffffffff
data 0xffffffff
data 0x80f
data 0x30d
data 0xffffffff
data 0xffffffff
data 0x502
data 0x0
data 0xffffffff
data 0xffffffff
data 0x913
data 0x111
data 0x70d
data 0x70f
data 0xa04
data 0x302
data 0xffffffff
data 0xffffffff
data 0x502
data 0x0
data 0xffffffff
data 0xffffffff
data 0x816
data 0x114
data 0xffffffff
data 0xffffffff
data 0x804
data 0x202
data 0xffffffff
data 0xffffffff
data 0x903
data 0x201
data 0xffffffff
data 0xffffffff
data 0xb03
data 0x301
data 0xffffffff
data 0xffffffff
data 0x502
data 0x0
data 0xffffffff
data 0xffffffff
data 0x813
data 0x211
data 0xffffffff
data 0xffffffff
data 0xc0f
data 0x30d
data 0x703
data 0xffffffff
data 0x801
data 0x200
data 0xffffffff
data 0xffffffff
data 0x906
data 0x4
data 0x709
data 0x70e
data 0xa07
data 0x105
data 0xffffffff
data 0xffffffff
data 0xb0c
data 0x30a
data 0x709
data 0xffffffff
data 0x502
data 0x0
data 0xffffffff
data 0xffffffff
data 0xa0c
data 0x30a
data 0xffffffff
data 0xffffffff
data 0xd03
data 0x201
data 0x700
data 0xffffffff
data 0x804
data 0x2
data 0xffffffff
data 0xffffffff
data 0x90b
data 0x109
data 0xffffffff
data 0xffffffff
data 0x502
data 0x200
data 0xffffffff
data 0xffffffff
data 0xa0e
data 0xc
data 0xffffffff
data 0xffffffff
data 0xb07
data 0x305
data 0x700
data 0xffffffff
data 0x401
data 0x0
data 0xffffffff
data 0xffffffff
data 0x506
data 0x304
data 0xffffffff
data 0xffffffff
data 0x401
data 0x0
data 0xffffffff
data 0xffffffff
data 0x808
data 0x106
data 0xffffffff
data 0xffffffff
data 0xf03
data 0x1
data 0xffffffff
data 0xffffffff
data 0xe10
data 0x30e
data 0x71a
data 0xffffffff
data 0x401
data 0x0
data 0xffffffff
data 0xffffffff
data 0x808
data 0x106
data 0xffffffff
data 0xffffffff
data 0x911
data 0x20f
data 0x71e
data 0x721
data 0xa02
data 0x0
data 0xffffffff
data 0xffffffff
data 0xb0b
data 0x309
data 0xffffffff
data 0xffffffff
data 0x401
data 0x0
data 0xffffffff
data 0xffffffff
data 0xa07
data 0x105
data 0xffffffff
data 0xffffffff
data 0x509
data 0x7
data 0xffffffff
data 0xffffffff
data 0xd08
data 0x206
data 0xffffffff
data 0xffffffff
data 0xe01
data 0x0
data 0xffffffff
data 0xffffffff
data 0xa12
data 0x211
data 0xffffffff
data 0xffffffff
data 0xb01
data 0x300
data 0x70c
data 0x710
data 0x401
data 0x0
data 0xffffffff
data 0xffffffff
data 0x510
data 0x10e
data 0xffffffff
data 0xffffffff
data 0x901
data 0x100
data 0xffffffff
data 0xffffffff
data 0xf05
data 0x303
data 0xffffffff
data 0xffffffff
data 0x801
data 0x100
data 0xffffffff
data 0xffffffff
data 0x904
data 0x202
data 0xffffffff
data 0xffffffff
data 0xa07
data 0x5
data 0xffffffff
data 0xffffffff
data 0xb01
data 0x300
data 0xffffffff
data 0xffffffff
data 0x502
data 0x0
data 0xffffffff
data 0xffffffff
data 0xa15
data 0x313
data 0xffffffff
data 0xffffffff
data 0x502
data 0x0
data 0xffffffff
data 0xffffffff
data 0x92e
data 0x12c
data 0x71a
data 0x727
data 0xa03
data 0x201
data 0xffffffff
data 0xffffffff
data 0xc0d
data 0x30b
data 0xffffffff
data 0xffffffff
data 0x502
data 0x0
data 0xffffffff
data 0xffffffff
data 0x40e
data 0x10c
data 0xffffffff
data 0xffffffff
data 0xb05
data 0x103
data 0xffffffff
data 0xffffffff
data 0x908
data 0x6
data 0xffffffff
data 0xffffffff
data 0xd03
data 0x201
data 0xffffffff
data 0xffffffff
data 0xe0c
data 0x30a
data 0xffffffff
data 0xffffffff
LABEL_660:
data 0x29
data 0x33
data 0x2d
data 0x3b
data 0x45
data 0x51
data 0x5f
data 0x6f
data 0x6f
data 0x73
data 0x79
data 0x83
data 0x91
data 0xa1
data 0xa1
data 0xa5
data 0xab
data 0xb7
data 0xc7
data 0xc7
data 0xcb
data 0xd3
data 0xdf
data 0xdf
data 0xe3
data 0xeb
data 0xf5
data 0x103
data 0x113
data 0x113
data 0x117
data 0x11d
data 0x125
data 0x12f
data 0x13d
data 0x14d
data 0x14d
data 0x151
data 0x157
data 0x161
data 0x16f
data 0x1c80012
data 0xfc6f9c
data 0x2a60000
data 0xfd6f94
data 0x1c80012
data 0xfc6f9c
data 0x22800fee
data 0xfd0f82
data 0x1760ff4
data 0xfb2f68
data 0x1c80012
data 0xfc6f9c
data 0x65a0000
data 0xfccf96
data 0x3180000
data 0xfcef98
data 0x1760ffa
data 0xfc0f88
data 0x1880012
data 0xfc6f9c
data 0x5220000
data 0xfd2f86
data 0x2c00ffc
data 0xfc2f7c
data 0x43000ff4
data 0xfd6f38
data 0x1f00000
data 0xfb6f34
data 0x1880012
data 0xfc6f9c
data 0x1ea0008
data 0xfdcfa0
data 0x80014
data 0xfcef98
data 0x200ffe
data 0xfeefae
data 0x3a0014
data 0xfcef98
data 0x120000
data 0xfd6fa0
data 0x1880012
data 0xfc6f9c
data 0x45e0000
data 0xfc4f8c
data 0x18a0ff4
data 0xfd4f84
data 0x2580014
data 0xfc0f8f
data 0x41400000
data 0xfd6f5e
data 0x41400000
data 0xfd6f5e
data 0x42ee3000
data 0x18ff4f48
data 0x1880012
data 0xfc6f9c
data 0x3e60000
data 0xfd0f96
data 0x17a0ffc
data 0xfbefb8
data 0x1160000
data 0xfbcf94
data 0x31a0ff1
data 0xfcef7a
data 0x1b80fda
data 0xfd4f82
data 0x21c00000
data 0xfcef60
data 0x3cc000e
data 0xfc8f3c
data 0x42400ff8
data 0xfd2f72
data 0x2c00ffe
data 0xfd0f3a
data 0x42400ff8
data 0xfd2f72
data 0x3b80008
data 0xfbaf6c
data 0x4960ffe
data 0xfc8f3a
data 0x42400ff8
data 0xfd2f72
data 0x2fe0000
data 0xfcaf68
data 0x17e0000
data 0xfcaf38
data 0x23e0000
data 0xfcaeda
data 0x2fc0ff8
data 0xfd0e82
data 0x42400ff8
data 0xfd2f72
data 0x2fc0010
data 0xfc4f5a
data 0x23400000
data 0xfc6ee8
data 0x414e1000
data 0xc0fb9ea4
data 0x3880000
data 0xfc2e92
data 0x1600000
data 0xfc6e5c
data 0x4500000
data 0xfb8e2a
data 0x42400ff8
data 0xfd2f72
data 0x2f00000
data 0xfcef5c
data 0x24c00fe8
data 0xfd0f50
data 0x20a0ff0
data 0xfccf0c
data 0x3800fda
data 0xfc6f08
data 0x43000fec
data 0xfd4ece
data 0x30e0fe0
data 0xfa4e9a
data 0x1500fe8
data 0xfcae68
data 0xc05002
data 0xfd6f8e
data 0x2240004
data 0xfd8f90
data 0xc05002
data 0xfd6f8e
data 0x1de0004
data 0xfccf70
data 0x1405ff0
data 0xfe2f66
data 0xc05002
data 0xfd6f8e
data 0x2400000
data 0xfd6f8a
data 0x3b60ffc
data 0xff2f5c
data 0xc80028
data 0xfd2f66
data 0x43480000
data 0xfdcf0e
data 0x29c0000
data 0xfc8ede
data 0x1005002
data 0xfd6f8e
data 0x12a0000
data 0xfd8f8e
data 0x2004002
data 0xfdaf6e
data 0x33a0ff4
data 0xfd6f40
data 0x42c00000
data 0xfdaef2
data 0x26a0008
data 0xfe8ef8
data 0x2860000
data 0xfd8e92
data 0xa20ff0
data 0xfc6e96
data 0x100ff4
data 0xfd4f80
data 0x47a4000
data 0xfb6fc8
data 0x100ff4
data 0xfd4f80
data 0xb1c0ffc
data 0xfc4f7c
data 0x900000
data 0xfdef3a
data 0x2500ffe
data 0xfccefa
data 0x100ff4
data 0xfd4f80
data 0x30a4004
data 0xfc6f78
data 0x1180000
data 0xfd0f5c
data 0x1b20fdc
data 0xfb6f5c
data 0x100000
data 0xfd4f36
data 0x2500000
data 0xfd0eb8
data 0x20400010
data 0xfcefc8
data 0x21c00010
data 0xfc4fa4
data 0x20400010
data 0xfcefc8
data 0x21c00fe8
data 0xfc4fa4
data 0x2080000c
data 0xfccf90
data 0x23c00022
data 0xfccf8c
data 0x20400010
data 0xfcefc8
data 0x22000006
data 0xfd0fa6
data 0x24000000
data 0xfdcf16
data 0x20400020
data 0xfd0f04
data 0x23000fe0
data 0xfd6f16
data 0x20000010
data 0xfcefc8
data 0x21c00000
data 0xfcafa2
data 0x22400006
data 0xfd4f82
data 0x22400ff6
data 0xfe4f2e
data 0x20400ff0
data 0xfc6f14
data 0x24800000
data 0xfdeee8
data 0x20800020
data 0xfeaece
data 0x20400010
data 0xfcefc8
data 0x24000010
data 0xfe4f72
data 0x20400010
data 0xfd0f0a
data 0x21400ff8
data 0xfccef2
data 0x20400ffc
data 0xfd8e7e
data 0x21400000
data 0xfdee88
data 0x21c00000
data 0xfd4e94
data 0x20800000
data 0xfcae40
data 0x21c00000
data 0xfd0fca
data 0x20800000
data 0xfd4fca
data 0x21c00000
data 0xfd0fca
data 0x20400000
data 0xfd0fca
data 0x6b000000
data 0xfd0fc0
data 0x21c00000
data 0xfd0fca
data 0x22000000
data 0xfd0fca
data 0x22000000
data 0xfdefae
data 0x22400000
data 0xfc6fa0
data 0x21c00000
data 0xfd0fca
data 0x22000000
data 0xfd2fc6
data 0x21400000
data 0xfd8fa0
data 0x21000000
data 0xfd8fa0
data 0x21800000
data 0xfdef88
data 0x21c00000
data 0xfd0fca
data 0x21800000
data 0xfd2fa6
data 0x20c00028
data 0xfd6f9c
data 0x21000ff6
data 0xfd2f8c
data 0x20c00000
data 0xfccf8c
data 0x22000ffc
data 0xfd4f44
data 0x22400ffe
data 0xfd2f14
data 0x21c00000
data 0xfd0fca
data 0x21c00002
data 0xfd2fc6
data 0x20400006
data 0xfd2fa6
data 0x2180000a
data 0xffef90
data 0x21000016
data 0xfe0f9a
data 0x20800000
data 0xfc8f8c
data 0x22400002
data 0xfd4f4e
data 0x2080000a
data 0xfcef3e
data 0x40000ffa
data 0xfdef7a
data 0x33e0000
data 0xfbef92
data 0x40000ffa
data 0xfdef7a
data 0x4000ffe
data 0xfc4faa
data 0x1c0000
data 0xfe4fae
data 0x40000ffa
data 0xfdef7a
data 0x4f80018
data 0xfd4f9c
data 0x7e0000
data 0xfecf92
data 0x0
data 0xfc8f70
data 0x20fee
data 0xfc6f70
data 0x40000ffa
data 0xfdef7a
data 0x47c0fda
data 0xfcef96
data 0x23400fe0
data 0xfdcf28
data 0x3c0018
data 0xfe8f38
data 0x107d020
data 0xfd8f40
data 0x1220ff4
data 0xfd6f26
data 0x2900000
data 0xfd0ed4
data 0x40000ffa
data 0xfdef7a
data 0x2b45fea
data 0xfd4f80
data 0x20800000
data 0xfbef08
data 0x40800000
data 0xfe0eca
data 0x21e0000
data 0xfccf14
data 0x386fc6
data 0x10fd4f06
data 0x3260fc6
data 0xfd6f0a
data 0x10e1ff0
data 0xfbce6a
data 0x400000
data 0xfc0fa0

; SUBROUTINE
LABEL_658:
call Bttl_800c::scriptGetBentSlot, stor[28], stor[8], 0x1 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; right, left
jmp_cmp &, stor[9], var[45][250], inl[:LABEL_659] ; operand, left, right, addr
call Bttl_800c::scriptGetHitProperty, stor[0], 0x0, 0x6, stor[8] ; bentIndex, hitNum, hitPropertyIndex, value
mov inl[:LABEL_660[stor[8]]], stor[8] ; source, dest
mov var[45][83], stor[18] ; source, dest
mul 0x2, stor[18] ; amount, operand
add stor[8], stor[18] ; amount, operand
mov inl[:LABEL_660[stor[18]]], stor[22] ; source, dest
incr stor[18] ; operand
mov inl[:LABEL_660[stor[18]]], stor[23] ; source, dest
mov stor[22], stor[10] ; source, dest
and 0x3e0000, stor[10] ; right, left
shr 0x11, stor[10] ; right, left
shl 0x7, stor[10] ; right, left
mov stor[22], stor[11] ; source, dest
and 0x1f000, stor[11] ; right, left
shr 0xc, stor[11] ; right, left
shl 0x7, stor[11] ; right, left
mov stor[23], stor[12] ; source, dest
and 0xf8000000, stor[12] ; right, left
shr 0x1b, stor[12] ; right, left
shl 0x7, stor[12] ; right, left
mov stor[22], stor[19] ; source, dest
and 0xfff, stor[19] ; right, left
shl 0x4, stor[19] ; right, left
jmp_cmp !&, 0x8000, stor[19], inl[:LABEL_661] ; operand, left, right, addr
or 0xffff0000, stor[19] ; right, left
LABEL_661:
mov stor[23], stor[20] ; source, dest
and 0xfff000, stor[20] ; right, left
shr 0xc, stor[20] ; right, left
shl 0x4, stor[20] ; right, left
jmp_cmp !&, 0x8000, stor[20], inl[:LABEL_662] ; operand, left, right, addr
or 0xffff0000, stor[20] ; right, left
LABEL_662:
mov stor[23], stor[21] ; source, dest
and 0xfff, stor[21] ; right, left
shl 0x4, stor[21] ; right, left
jmp_cmp !&, 0x8000, stor[21], inl[:LABEL_663] ; operand, left, right, addr
or 0xffff0000, stor[21] ; right, left
LABEL_663:
mov stor[22], stor[9] ; source, dest
and 0x1fc00000, stor[9] ; right, left
shr 0x16, stor[9] ; right, left
mov stor[22], stor[8] ; source, dest
and 0xe0000000, stor[8] ; right, left
shr 0x1d, stor[8] ; right, left
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[0], stor[30] ; source, dest
mov stor[9], stor[stor[stor[0], 18], 9] ; source, dest
mov stor[10], stor[stor[stor[0], 18], 10] ; source, dest
mov stor[11], stor[stor[stor[0], 18], 11] ; source, dest
mov stor[12], stor[stor[stor[0], 18], 12] ; source, dest
mov stor[19], stor[stor[stor[0], 18], 19] ; source, dest
mov stor[20], stor[stor[stor[0], 18], 20] ; source, dest
mov stor[21], stor[stor[stor[0], 18], 21] ; source, dest
mov stor[30], stor[stor[stor[0], 18], 30] ; source, dest
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
call SEffe::scriptSetRelativePosition, stor[18], stor[30], stor[19], stor[20], stor[21] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], stor[30], stor[10], stor[11], stor[12] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_664[:LABEL_664[stor[8]]]] ; scriptIndex, address
LABEL_659:
return

; SUBROUTINE TABLE

; FORK RE-ENTRY
LABEL_664:
rel :JMP_5f58_0
rel :JMP_5f58_1
rel :JMP_5f58_2
rel :JMP_5f58_3
rel :JMP_5f58_0
rel :JMP_5f58_0
rel :JMP_5f58_0
rel :JMP_5f58_0

; FORK RE-ENTRY
JMP_5f58_0:
wait stor[9] ; frames
gosub inl[:LABEL_669] ; addr
gosub inl[:LABEL_670] ; addr
call Bttl_800e::allocateBillboardSpriteEffect, stor[22], 0xfff17 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[22], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], stor[0], 0x1000, 0x1000, 0x1000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[22], 0xffffffff, 0x3, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddLifespanAttachment, stor[22], 0x4 ; effectIndex, ticks
call SEffe::allocateDeffTmd, stor[18], 0xfff18 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[18], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, 0xfffff600, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x100, 0x100, 0x1000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x2, 0x1000, 0x1000, 0x1000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x2, 0xc0, 0xc0, 0xc0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::allocateDeffTmd, stor[19], 0xfff18 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[19], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0x400, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0xfffff600, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x100, 0x100, 0x1000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[19], 0xffffffff, 0x2, 0x1000, 0x1000, 0x1000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0x2, 0xc0, 0xc0, 0xc0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
yield
call Bttl_800d::scriptAllocateAdditionSparksEffect, stor[20], 0x40, 0xc4, 0xc4, 0x80, 0x600, 0x4 ; effectIndex, count, r, g, b, p5, p6
call SEffe::FUN_801156f8, stor[20], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativeRotation, stor[20], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[20], stor[0], 0xfffffe00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[20], 0x10 ; effectIndex, ticks
yield
call SEffe::scriptAllocateParticleEffect, stor[21], stor[0], 0xfff1f, 0x2, 0x0, 0x0, 0x0, 0xa7f00, 0x1 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::FUN_801156f8, stor[21], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[21], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[21], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[21], 0xffffffff, 0x2, 0xc00, 0xc00, 0xc00 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[21], 0x14 ; effectIndex, ticks
call SEffe::scriptAddRelativePositionScalerTicks0, stor[18], stor[18], 0x8, 0x800, 0x0, 0x0 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x8, 0x800, 0x100, 0x1000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0x8 ; effectIndex, ticks
call SEffe::scriptAddRelativePositionScalerTicks0, stor[19], stor[19], 0x8, 0x800, 0x0, 0x0 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[19], 0xffffffff, 0x8, 0x800, 0x100, 0x1000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0x8 ; effectIndex, ticks
yield
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
deallocate

; FORK RE-ENTRY
JMP_5f58_1:
wait stor[9] ; frames
gosub inl[:LABEL_669] ; addr
gosub inl[:LABEL_670] ; addr
call Bttl_800e::allocateBillboardSpriteEffect, stor[18], 0xfff40 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[18], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x2, 0x900, 0x900, 0x900 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAllocateParticleEffect, stor[19], 0xffffffff, 0x200002, 0x18, 0xa, 0x1, 0x800, 0xd087f00, 0x27 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::FUN_801156f8, stor[19], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[19], stor[0], 0x0, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x64, 0x80, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::allocateDeffTmd, stor[20], 0xfff1f ; effectIndex, flags
call SEffe::FUN_801156f8, stor[20], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativeRotation, stor[20], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x19, 0x20, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeScale, stor[20], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[20], 0xffffffff, 0x2, 0x800, 0x800, 0x800 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::allocateDeffTmd, stor[21], 0xfff1f ; effectIndex, flags
call SEffe::FUN_801156f8, stor[21], stor[20], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativeRotation, stor[21], 0xffffffff, 0x0, 0x0, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[21], 0xffffffff, 0x19, 0x20, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeScale, stor[21], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[21], 0xffffffff, 0x2, 0x800, 0x800, 0x800 ; effectIndex, parentIndex, ticks, x, y, z
mov 0x2, stor[27] ; source, dest
wait stor[27] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x4, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddLifespanAttachment, stor[18], 0x4 ; effectIndex, ticks
call SEffe::scriptAddLifespanAttachment, stor[19], 0x6 ; effectIndex, ticks
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[20], 0xffffffff, 0x6, 0x1400, 0x1400, 0x1400 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[21], 0xffffffff, 0x6, 0x1400, 0x1400, 0x1400 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[20], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddConstantColourScalerAttachment, stor[21], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
mov 0x6, stor[27] ; source, dest
wait stor[27] ; frames
deallocate_other stor[20] ; index
deallocate_other stor[21] ; index
deallocate

; FORK RE-ENTRY
JMP_5f58_3:
gosub inl[:LABEL_669] ; addr
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_679] ; addr
gosub inl[:LABEL_680] ; addr
mov 0x24, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_685] ; addr
gosub inl[:LABEL_670] ; addr
call SEffe::scriptAllocateParticleEffect, stor[19], 0xffffffff, 0xfff26, 0x18, 0xa, 0x1, 0x800, 0xd087f00, 0x27 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::FUN_801156f8, stor[19], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[19], stor[0], 0x0, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[19], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0xd8, 0x60, 0xd8 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_689] ; addr
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_689] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
deallocate

; SUBROUTINE
LABEL_689:
call SEffe::allocateDeffTmd, stor[20], 0xfff1f ; effectIndex, flags
mov 0x1, stor[stor[stor[0], 20], 8] ; source, dest
LABEL_686:
call SEffe::FUN_801156f8, stor[20], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptLoadSameScriptAndJump, stor[20], inl[:LABEL_687] ; scriptIndex, address
return

; SUBROUTINE
LABEL_685:
call SEffe::allocateDeffTmd, stor[20], 0xfff05 ; effectIndex, flags
mov 0x0, stor[stor[stor[0], 20], 8] ; source, dest
jmp inl[:LABEL_686] ; addr

; FORK RE-ENTRY
LABEL_687:
call SEffe::scriptSetRelativeRotation, stor[0], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[0], 0xffffffff, 0xd8, 0x60, 0xd8 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeScale, stor[0], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[0], 0xffffffff, 0x2, 0x800, 0x800, 0x800 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[0], stor[0], 0x0, 0x0, 0x100, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
mov 0x2, stor[27] ; source, dest
wait stor[27] ; frames
jmp_cmp ==, 0, stor[8], inl[:LABEL_688] ; operand, right, addr
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[0], 0xffffffff, 0x4, 0x1800, 0x1800, 0x1800 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[0], 0xffffffff, 0x4, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
mov 0x4, stor[27] ; source, dest
wait stor[27] ; frames
deallocate
LABEL_688:
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[0], 0xffffffff, 0x6, 0x1400, 0x1400, 0x1400 ; effectIndex, parentIndex, ticks, x, y, z
mov 0x5, stor[27] ; source, dest
wait stor[27] ; frames
deallocate

; SUBROUTINE
LABEL_679:
call SEffe::scriptAllocateParticleEffect, stor[18], 0xffffffff, 0x200003, 0x64, 0x5dc, 0xa, 0x200, 0x41a0000, 0x3a ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0xc0, 0xc0, 0x50 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptSetRelativePosition, stor[18], stor[30], 0xffffffb0, 0xfffffd6c, 0x104 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0x32 ; effectIndex, ticks
return

; SUBROUTINE
LABEL_680:
gosub inl[:LABEL_681] ; addr
gosub inl[:LABEL_681] ; addr
return

; SUBROUTINE
LABEL_681:
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov 0x1e, stor[stor[stor[0], 18], 8] ; source, dest
mov 0x1, stor[stor[stor[0], 18], 9] ; source, dest
mov stor[8], stor[stor[stor[0], 18], 10] ; source, dest
mov stor[30], stor[stor[stor[0], 18], 11] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_682] ; scriptIndex, address
return

; FORK RE-ENTRY
LABEL_682:
call Bttl_800c::scriptRand, stor[23], 0x0, stor[9] ; value, min, max
jmp_cmp !=, 0, stor[23], inl[:LABEL_683] ; operand, right, addr
call Bttl_800c::scriptRand, stor[18], 0x1, 0x2 ; value, min, max
call SEffe::scriptAllocateElectricityEffect, stor[15], 0xffffffff, 0x3e8, stor[18], 0x3e8, 0x100, 0x51060, 0x0 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[15], 0xffffffff, 0x18, 0x0, 0xa0 ; bobjIndex1, bobjIndex2, r, g, b
call Bttl_800c::scriptRand, stor[18], 0x0, 0x1000 ; value, min, max
call SEffe::scriptSetRelativePosition, stor[15], stor[11], 0xffffffb0, 0xfffffd6c, 0x104 ; bobjIndex1, bobjIndex2, x, y, z
add 0x400, stor[18] ; amount, operand
call SEffe::scriptSetRelativeRotation, stor[15], 0xffffffff, stor[18], 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x5, stor[stor[stor[0], 15], 8] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[15], inl[:LABEL_684] ; scriptIndex, address
LABEL_683:
yield
while stor[8], inl[:LABEL_682] ; counter, addr
deallocate

; FORK RE-ENTRY
LABEL_684:
mov stor[stor[stor[0], 0], 8], stor[stor[stor[0], 0], 23] ; source, dest
wait stor[stor[stor[0], 0], 23] ; frames
deallocate

; FORK RE-ENTRY
JMP_5f58_2:
mov 0x9, stor[10] ; source, dest
wait stor[9] ; frames
gosub inl[:LABEL_669] ; addr
gosub inl[:LABEL_670] ; addr
gosub inl[:LABEL_678] ; addr
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, 0x0, 0x500, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x1000, 0x1000, 0x1000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xa, 0x2000, 0x2000, 0x2000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0xff, 0x80, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAllocateParticleEffect, stor[21], stor[0], 0x200004, 0x14, 0x0, 0x0, 0x2000, 0x408ff00, 0x15 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[21], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[21], stor[0], 0x400, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[21], 0xffffffff, 0xf8, 0xf8, 0x80 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetGenericEffectValue, stor[21], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[21], 0x8 ; effectIndex, ticks
gosub inl[:LABEL_678] ; addr
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, 0x0, 0xfffffb00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x1000, 0x1000, 0x1000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xa, 0x2000, 0x2000, 0x2000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0xff, 0x80, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
gosub inl[:LABEL_678] ; addr
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, 0x0, 0x800, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x2000, 0x2000, 0x2000 ; bobjIndex1, bobjIndex2, x, y, z
mov stor[10], stor[11] ; source, dest
mul 0x1000, stor[11] ; amount, operand
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x7, 0x0, 0x0, stor[11] ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0xff, 0x80, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
deallocate

; SUBROUTINE
LABEL_678:
call SEffe::allocateDeffTmd, stor[18], 0xfff1b ; effectIndex, flags
call SEffe::FUN_801156f8, stor[18], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::FUN_80115388, stor[18], 0x1 ; effectIndex, set
call SEffe::FUN_801153e4, stor[18], 0x1 ; effectIndex, set
call SEffe::scriptAddLifespanAttachment, stor[18], 0x8 ; effectIndex, ticks
return

; SUBROUTINE
LABEL_669:
call Bttl_800c::scriptGetBentPos, stor[30], stor[14], stor[15], stor[16] ; bentIndex, x, y, z
add stor[21], stor[14] ; amount, operand
add stor[20], stor[15] ; amount, operand
add stor[19], stor[16] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[0], 0xffffffff, stor[14], stor[15], stor[16] ; bobjIndex1, bobjIndex2, x, y, z
return

; SUBROUTINE
LABEL_610:
call SEffe::scriptAllocateParticleEffect, stor[18], stor[0], 0xfff03, 0x8, 0xc8, 0x3, 0x200, 0x40a4000, 0x2 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xa ; effectIndex, ticks
LABEL_612:
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x4f, 0x45, 0x38 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
return

; SUBROUTINE
LABEL_611:
call SEffe::scriptAllocateParticleEffect, stor[18], stor[0], 0xfff03, 0x8, 0xc8, 0x3, 0x100, 0x4134000, 0x3 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xa ; effectIndex, ticks
jmp inl[:LABEL_612] ; addr
data 0x49

; SUBROUTINE
LABEL_761:
call SEffe::scriptAllocateParticleEffect, stor[18], stor[0], 0xfff03, 0x10, 0xc8, 0x3, 0x100, 0x4134000, 0x4 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xf ; effectIndex, ticks
jmp inl[:LABEL_612] ; addr
data 0x49

; SUBROUTINE
LABEL_670:
gosub inl[:LABEL_671] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_673] ; operand, right, addr
call Bttl_800d::scriptGetBobjModelPartCount, stor[28], stor[8] ; bobjIndex, partCount
call SEffe::scriptAllocateParticleEffect, stor[18], stor[28], 0xfff18, stor[8], 0x0, 0x4, 0x0, 0x7084000, 0x40 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x40, 0x600, 0x600 ; bobjIndex1, bobjIndex2, x, y, z
gosub inl[:LABEL_674] ; addr
call Bttl_800d::scriptGetBobjModelPartCount, stor[28], stor[8] ; bobjIndex, partCount
call SEffe::scriptAllocateParticleEffect, stor[18], stor[28], 0xfff18, stor[8], 0x0, 0x4, 0x0, 0x7084000, 0x40 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x1800, 0x40, 0x1800 ; bobjIndex1, bobjIndex2, x, y, z
gosub inl[:LABEL_674] ; addr
LABEL_673:
return

; SUBROUTINE
LABEL_674:
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call Bttl_800c::scriptGetCharOrMonsterId, stor[30], stor[8] ; bentIndex, id
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, inl[:LABEL_675[stor[8]]], inl[:LABEL_676[stor[8]]], inl[:LABEL_677[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetEffectZ, stor[18], 0xffffff00 ; effectIndex, z
call Bttl_800d::scriptGetBobjModelPartCount, stor[28], stor[8] ; bobjIndex, partCount
call SEffe::scriptAddLifespanAttachment, stor[18], stor[8] ; effectIndex, ticks
return

; SUBROUTINE
LABEL_671:
call Bttl_800c::scriptGetBentStat, stor[30], EQUIPMENT_ATTACK_ELEMENT_OR_MONSTER_DISPLAY_ELEMENT, stor[8] ; bentIndex, statIndex, value
call Bttl_800c::scriptGetBentStat, stor[28], MONSTER_ELEMENT, stor[9] ; bentIndex, statIndex, value
add stor[9], stor[8] ; amount, operand
jmp_cmp ==, 0x81, stor[8], inl[:LABEL_672] ; operand, left, right, addr
jmp_cmp ==, 0x42, stor[8], inl[:LABEL_672] ; operand, left, right, addr
jmp_cmp ==, 0x24, stor[8], inl[:LABEL_672] ; operand, left, right, addr
mov 0, stor[8] ; dest
LABEL_672:
return
data 0x80
data 0x40
data 0x20
data 0x4
data 0x10
data 0x40
data 0x1
data 0x2
data 0x20
data 0x80

; SUBROUTINE
JMP_bf38_0:
mov 0xffffffff, var[45][241] ; source, dest
call Bttl_800c::FUN_800ccec8, 0x0 ; p0
gosub inl[:LABEL_360] ; addr
call Bttl_800c::scriptGetBentPos, stor[0], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
call Bttl_800c::scriptGetBentPos, stor[28], stor[stor[stor[0], 28], 24], stor[stor[stor[0], 28], 25], stor[stor[stor[0], 28], 26] ; bentIndex, x, y, z
mov 0x22, var[44] ; source, dest
mov stor[0], var[80] ; source, dest
mov stor[28], var[81] ; source, dest
mov 0, var[45][105] ; dest
call Bttl_800c::scriptGetBentSlot, stor[28], stor[8], 0x1 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; right, left
jmp_cmp !&, stor[9], var[45][250], inl[:LABEL_601] ; operand, left, right, addr
or 0x10, var[45][105] ; right, left
or 0x2, var[45][105] ; right, left
jmp inl[:LABEL_602] ; addr
LABEL_601:
call Bttl_800c::scriptGetBentStat, stor[0], _159, stor[8] ; bentIndex, statIndex, value
call Bttl_800c::scriptSetBentStat, stor[0], stor[8], SPELL_ID ; bentIndex, value, statIndex
call Bttl_800f::scriptSetTempSpellStats, stor[0] ; bentIndex
call Bttl_800f::scriptCheckPhysicalHit, stor[0], stor[28], stor[8] ; attackerIndex, defenderIndex, hit
jmp_cmp !=, 0, stor[8], inl[:LABEL_779] ; operand, right, addr
or 0x10, var[45][105] ; right, left
or 0x2, var[45][105] ; right, left
jmp inl[:LABEL_602] ; addr
LABEL_779:
gosub inl[:LABEL_780] ; addr
call SEffe::scriptAllocateAdditionOverlaysEffect, stor[0], stor[28], stor[8], 0x0, stor[18] ; attackerIndex, targetIndex, autoCompleteType, unused, effectIndex
mov stor[18], var[45][104] ; source, dest
jmp_cmp ==, 0, stor[8], inl[:LABEL_602] ; operand, right, addr
call SEffe::FUN_80115324, stor[18], 0x0 ; effectIndex, clear
LABEL_602:
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x8 ; bentIndex, animIndex
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
mov 0, stor[8] ; dest
LABEL_604:
mov var[34][stor[8]], stor[9] ; source, dest
jmp_cmp ==, stor[0], stor[9], inl[:LABEL_603] ; operand, left, right, addr
call Bttl_800c::FUN_800cb618, stor[9], 0x0 ; bentIndex, set
LABEL_603:
incr stor[8] ; operand
jmp_cmp <, stor[8], var[35], inl[:LABEL_604] ; operand, left, right, addr
call SEffe::scriptLoadDeffStageEffects, 0x2 ; mode
gosub inl[:LABEL_605] ; addr
call Bttl_800c::scriptSetInterpolationEnabled, stor[0], 0x0 ; bentIndex, set
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x2 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
call Bttl_800c::scriptGetBentStat, stor[28], _64, stor[9] ; bentIndex, statIndex, value
call Bttl_800c::scriptGetHitProperty, stor[0], 0x0, 0xc, stor[8] ; bentIndex, hitNum, hitPropertyIndex, value
mov stor[8], var[45][122] ; source, dest
mov 0x0, var[45][123] ; source, dest
add stor[8], stor[9] ; amount, operand
call Bttl_800c::scriptGetHitProperty, stor[0], 0x0, 0xb, stor[8] ; bentIndex, hitNum, hitPropertyIndex, value
add stor[8], stor[9] ; amount, operand
mul 0x64, stor[9] ; amount, operand
call Bttl_800c::FUN_800cc0c8, stor[0], stor[28], 0x6, stor[9], 0x0 ; bentIndex0, bentIndex1, ticks, x, z
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x20, 0x0, 0x0, 0x0, 0x2 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
call Bttl_800f::FUN_800f9c00, 0x1 ; p0
call Bttl_800f::FUN_800f9b94, 0x2c, 0x2 ; p0, p1
gosub inl[:LABEL_610] ; addr
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_610] ; addr
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_610] ; addr
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_611] ; addr
call Scus94491BpeSegment::scriptStopSound, 0x0, 0x20, 0x3 ; soundFileIndex, soundIndex, mode
call Bttl_800c::scriptSetBentRotationY, stor[0], 0x400 ; bentIndex, y
mov stor[0], stor[stor[stor[0], 28], 28] ; source, dest
gosub inl[:LABEL_613] ; addr
call Bttl_800c::scriptSetInterpolationEnabled, stor[0], 0x1 ; bentIndex, set
call Bttl_800f::FUN_800f9bd4, 0x7 ; p0
jmp_cmp !&, 0x2, var[45][105], inl[:LABEL_752] ; operand, left, right, addr
jmp_cmp !&, 0x4, var[45][105], inl[:LABEL_752] ; operand, left, right, addr
or 0x40, var[45][105] ; right, left
LABEL_753:
mov var[45][105], stor[8] ; source, dest
yield
jmp_cmp !&, 0x8, var[45][105], inl[:LABEL_753] ; operand, left, right, addr
jmp inl[:LABEL_754] ; addr
LABEL_752:
jmp_cmp !=, 0x3, var[45][66], inl[:LABEL_778] ; operand, left, right, addr
LABEL_754:
mov 0xffffffff, var[45][241] ; source, dest
jmp_cmp &, 0x100, var[45][105], inl[:LABEL_755] ; operand, left, right, addr
mov 0x11, var[54] ; source, dest
mov 0xe2, var[44] ; source, dest
call Bttl_800d::scriptMoveCameraProjectionPlane, 0x2, 0x152, 0x11, 0x0 ; mode, newDistance, frames, stepZ1
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x1b ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
call Bttl_800c::scriptGetCharOrMonsterId, stor[0], stor[8] ; bentIndex, id
call Bttl_800c::scriptGetBobjLocalWorldMatrixTranslation, stor[0], inl[:LABEL_104[stor[8]]], stor[10], stor[11], stor[12] ; effectIndex, partIndex, x, y, z
call Bttl_800c::scriptSetBentPos, stor[0], stor[10], stor[11], stor[12] ; bentIndex, x, y, z
call Bttl_800c::FUN_800cbde0, stor[0], 0xffffffff, 0xa, stor[24], stor[25], stor[26] ; bentIndex0, bentIndex1, ticks, x, y, z
call Bttl_800c::FUN_800cbb00, stor[28], 0xffffffff, 0xa, stor[stor[stor[0], 28], 24], stor[stor[stor[0], 28], 25], stor[stor[stor[0], 28], 26] ; bentIndex0, bentIndex1, ticks, x, y, z
wait_cmp !&, 0x4000000, stor[7] ; operator, left, right
gosub inl[:LABEL_756] ; addr
gosub inl[:LABEL_759] ; addr
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
gosub inl[:LABEL_761] ; addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0xe ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
call Bttl_800c::FUN_800cbde0, stor[0], 0xffffffff, 0x7, stor[24], stor[25], stor[26] ; bentIndex0, bentIndex1, ticks, x, y, z
call Scus94491BpeSegment::FUN_80017688, 0x0, 0x1ff, 0x3 ; p0, p1, p2
mov 0x3, stor[23] ; source, dest
wait stor[23] ; frames
call Scus94491BpeSegment::FUN_80017688, 0x0, 0x15e, 0x3 ; p0, p1, p2
wait_cmp !&, 0x4000000, stor[7] ; operator, left, right
call Scus94491BpeSegment::FUN_80017688, 0x0, 0x1ff, 0x3 ; p0, p1, p2
mov 0x3, stor[23] ; source, dest
wait stor[23] ; frames
call Scus94491BpeSegment::FUN_80017688, 0x0, 0x0, 0x3 ; p0, p1, p2
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x20, stor[8] ; source, dest
jmp inl[:LABEL_762] ; addr
LABEL_755:
mov 0x21, stor[8] ; source, dest
LABEL_762:
mov stor[28], stor[18] ; source, dest
mov stor[30], stor[20] ; source, dest
mov stor[28], stor[30] ; source, dest
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_763] ; addr
mov stor[18], stor[28] ; source, dest
mov stor[20], stor[30] ; source, dest
mov stor[8], stor[32] ; source, dest
gosub inl[:LABEL_770] ; addr
jmp_cmp &, 0x40, stor[7], inl[:LABEL_773] ; operand, left, right, addr
call Bttl_800c::FUN_800cb9b0, stor[0], stor[8] ; bentIndex, animationIndex
jmp_cmp !=, 0xe, stor[8], inl[:LABEL_773] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x9 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
gosub inl[:LABEL_60] ; addr
jmp inl[:LABEL_773] ; addr
LABEL_778:
mov 0x11, var[54] ; source, dest
mov 0xe2, var[44] ; source, dest
call Bttl_800d::scriptMoveCameraProjectionPlane, 0x2, 0x152, 0x11, 0x0 ; mode, newDistance, frames, stepZ1
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x6 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
call Bttl_800c::scriptGetCharOrMonsterId, stor[0], stor[8] ; bentIndex, id
call Bttl_800c::scriptGetBobjLocalWorldMatrixTranslation, stor[0], inl[:LABEL_104[stor[8]]], stor[10], stor[11], stor[12] ; effectIndex, partIndex, x, y, z
call Bttl_800c::scriptSetBentPos, stor[0], stor[10], 0x0, stor[12] ; bentIndex, x, y, z
yield
call Bttl_800c::FUN_800cbb00, stor[0], 0xffffffff, 0x6, stor[24], stor[25], stor[26] ; bentIndex0, bentIndex1, ticks, x, y, z
call Bttl_800c::FUN_800cbb00, stor[28], 0xffffffff, 0xa, stor[stor[stor[0], 28], 24], stor[stor[stor[0], 28], 25], stor[stor[stor[0], 28], 26] ; bentIndex0, bentIndex1, ticks, x, y, z
wait_cmp !&, 0x4000000, stor[7] ; operator, left, right
gosub inl[:LABEL_756] ; addr
gosub inl[:LABEL_759] ; addr
gosub inl[:LABEL_611] ; addr
gosub inl[:LABEL_60] ; addr
LABEL_773:
call Bttl_800c::scriptSetBentPos, stor[28], stor[stor[stor[0], 28], 24], stor[stor[stor[0], 28], 25], stor[stor[stor[0], 28], 26] ; bentIndex, x, y, z
call Bttl_800c::scriptSetBentPos, stor[0], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
gosub inl[:LABEL_66] ; addr
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
jmp_cmp !&, 0x20, var[45][105], inl[:LABEL_774] ; operand, left, right, addr
call Bttl_800c::scriptGetCharOrMonsterId, stor[0], stor[8] ; bentIndex, id
call Bttl_800d::scriptAllocateAdditionScript, stor[8], 0xffffffff ; charId, p1
LABEL_774:
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_775] ; operand, right, addr
call Bttl_800d::scriptAllocateAdditionNameEffect, 0xffffffff ; p0
LABEL_775:
call Bttl_800f::FUN_800f9c00, 0x0 ; p0
jmp_cmp >, 0, var[45][241], inl[:LABEL_776] ; operand, right, addr
jmp_cmp &, 0x80, var[45][105], inl[:LABEL_776] ; operand, left, right, addr
gosub inl[:LABEL_277] ; addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_776] ; operand, left, right, addr
mov var[45][241], stor[8] ; source, dest
jmp_cmp ==, 0, stor[8], inl[:LABEL_777] ; operand, right, addr
gosub inl[:LABEL_153] ; addr
fork_reenter stor[28], 0xa, stor[8] ; index, entrypoint, p2
LABEL_776:
return
LABEL_777:
call Bttl_800c::scriptSetBentRawStat, stor[28], 0x0, CURRENT_HP ; bentIndex, value, statIndex
fork_reenter stor[28], 0x4, stor[8] ; index, entrypoint, p2
gosub inl[:LABEL_417] ; addr
return
data 0x49

; SUBROUTINE
LABEL_756:
mov 0, stor[8] ; dest
LABEL_758:
mov var[34][stor[8]], stor[9] ; source, dest
jmp_cmp ==, stor[0], stor[9], inl[:LABEL_757] ; operand, left, right, addr
call Bttl_800c::FUN_800cb618, stor[9], 0x1 ; bentIndex, set
LABEL_757:
incr stor[8] ; operand
jmp_cmp <, stor[8], var[35], inl[:LABEL_758] ; operand, left, right, addr
call SEffe::scriptLoadDeffStageEffects, 0x0 ; mode
return

; SUBROUTINE
LABEL_605:
gosub inl[:LABEL_606] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_609] ; operand, right, addr
gosub inl[:LABEL_216] ; addr
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[23] ; effectIndex
mov stor[28], stor[stor[stor[0], 23], 23] ; source, dest
gosub inl[:LABEL_239] ; addr
gosub inl[:LABEL_218] ; addr
LABEL_609:
return

; SUBROUTINE
LABEL_216:
mov 0, stor[8] ; dest
LABEL_217:
mov var[52][stor[8]], stor[9] ; source, dest
call Bttl_800c::FUN_800cb618, stor[9], 0x0 ; bentIndex, set
incr stor[8] ; operand
jmp_cmp <, stor[8], var[53], inl[:LABEL_217] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_759:
gosub inl[:LABEL_606] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_760] ; operand, right, addr

; SUBROUTINE
LABEL_238:
mov 0, stor[8] ; dest
LABEL_244:
mov var[52][stor[8]], stor[9] ; source, dest
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[23] ; effectIndex
mov stor[9], stor[stor[stor[0], 23], 23] ; source, dest
gosub inl[:LABEL_239] ; addr
incr stor[8] ; operand
jmp_cmp <, stor[8], var[53], inl[:LABEL_244] ; operand, left, right, addr
gosub inl[:LABEL_245] ; addr
LABEL_760:
return

; SUBROUTINE
LABEL_747:
mov var[45][241], stor[8] ; source, dest
jmp_cmp >, 0, stor[8], inl[:LABEL_748] ; operand, right, addr
gosub inl[:LABEL_397] ; addr
LABEL_748:
return

; SUBROUTINE
LABEL_239:
mov stor[8], stor[stor[stor[0], 23], 8] ; source, dest
mov stor[9], stor[stor[stor[0], 23], 9] ; source, dest
call Bttl_800c::FUN_800cb618, stor[stor[stor[0], 23], 23], 0x1 ; bentIndex, set
jmp_cmp !=, 0, inl[:LABEL_240], inl[:LABEL_241] ; operand, right, addr
jmp_cmp !&, 0x200, stor[stor[stor[23], 23], 7], inl[:LABEL_241] ; operand, left, right, addr
mov 0, stor[8] ; dest
LABEL_243:
mov var[36][stor[8]], stor[9] ; source, dest
jmp_cmp !&, 0x8000, stor[stor[stor[0], 9], 7], inl[:LABEL_242] ; operand, left, right, addr
call Bttl_800c::FUN_800cb618, stor[9], 0x1 ; bentIndex, set
jmp inl[:LABEL_241] ; addr
LABEL_242:
incr stor[9] ; operand
jmp_cmp <, stor[9], var[37], inl[:LABEL_243] ; operand, left, right, addr
LABEL_241:
mov stor[stor[stor[0], 23], 9], stor[9] ; source, dest
mov stor[stor[stor[0], 23], 8], stor[8] ; source, dest
deallocate_other stor[23] ; index
return
data 0x208
data 0x2000008
data 0x3081700
data 0x208
data 0x2000009
data 0x3091700
data 0x30242
data 0x900005c
data 0x900001d
data 0x70341
data 0x1000000
data 0x200
data 0x3071717
data 0x900001a
data 0x10c
data 0x2000008
data 0x208
data 0x7000824
data 0x2000009
data 0x70341
data 0x1000000
data 0x8000
data 0x3070900
data 0x900000a
data 0x208
data 0x2000009
data 0x3171700
data 0x140
data 0x9000008
data 0x11b
data 0x2000009
data 0x10341
data 0x2000009
data 0x5000025
data 0x900fff1
data 0x208
data 0x3171700
data 0x9000040
data 0x208
data 0x3091700
data 0x2000009
data 0x208
data 0x3081700
data 0x2000008
data 0x153
data 0x2000017
data 0x49

; SUBROUTINE
LABEL_245:
mov stor[8], inl[:LABEL_219] ; source, dest
gosub inl[:LABEL_220] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_246] ; operand, right, addr
call SEffe::FUN_80115324, var[45][50], 0x1 ; effectIndex, clear
LABEL_246:
mov inl[:LABEL_219], stor[8] ; source, dest
return

; SUBROUTINE
LABEL_218:
mov stor[8], inl[:LABEL_219] ; source, dest
gosub inl[:LABEL_220] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_223] ; operand, right, addr
call SEffe::FUN_80115324, var[45][50], 0x0 ; effectIndex, clear
LABEL_223:
mov inl[:LABEL_219], stor[8] ; source, dest
return

; SUBROUTINE
LABEL_220:
mov 0, stor[8] ; dest
jmp_cmp ==, 0x1a6, var[43], inl[:LABEL_221] ; operand, left, right, addr
jmp_cmp !=, 0x1bb, var[43], inl[:LABEL_222] ; operand, left, right, addr
jmp_cmp !=, 0x1, var[39], inl[:LABEL_222] ; operand, left, right, addr
LABEL_221:
jmp_cmp ==, 0, var[45][50], inl[:LABEL_222] ; operand, right, addr
incr stor[8] ; operand
LABEL_222:
return
LABEL_219:
data 0x0
LABEL_240:
data 0x0
data 0x0

; SUBROUTINE
LABEL_606:
mov 0, stor[8] ; dest
jmp_cmp ==, 0x19c, var[43], inl[:LABEL_607] ; operand, left, right, addr
jmp_cmp ==, 0x19f, var[43], inl[:LABEL_607] ; operand, left, right, addr
jmp_cmp ==, 0x1a2, var[43], inl[:LABEL_607] ; operand, left, right, addr
jmp_cmp ==, 0x1a3, var[43], inl[:LABEL_607] ; operand, left, right, addr
jmp_cmp ==, 0x1a6, var[43], inl[:LABEL_607] ; operand, left, right, addr
jmp_cmp ==, 0x1b0, var[43], inl[:LABEL_607] ; operand, left, right, addr
jmp_cmp !=, 0x1bb, var[43], inl[:LABEL_608] ; operand, left, right, addr
jmp_cmp ==, 0x0, var[39], inl[:LABEL_607] ; operand, left, right, addr
jmp_cmp ==, 0x1, var[39], inl[:LABEL_607] ; operand, left, right, addr
LABEL_608:
mov 0x1, stor[8] ; source, dest
LABEL_607:
return

; SUBROUTINE
JMP_bf60_2:
mov 0x1, stor[8] ; source, dest
gosub_table stor[8], inl[:LABEL_346] ; index, table
call Bttl_800c::FUN_800ccec8, 0x0 ; p0
gosub inl[:LABEL_360] ; addr
mov stor[0], var[80] ; source, dest
mov stor[28], var[81] ; source, dest
gosub inl[:LABEL_363] ; addr
mov 0, var[45][105] ; dest
call Bttl_800c::scriptGetBentSlot, stor[28], stor[8], 0x1 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; right, left
jmp_cmp !&, stor[9], var[45][250], inl[:LABEL_368] ; operand, left, right, addr
jmp_cmp ==, 0x19e, var[43], inl[:LABEL_368] ; operand, left, right, addr
or 0x10, var[45][105] ; right, left
LABEL_368:
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x10 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
gosub inl[:LABEL_369] ; addr
call Scus94491BpeSegment::scriptPlayBentSound, 0x1, stor[0], 0x0, 0x0, 0x0, inl[:LABEL_373[stor[8]]], 0x0 ; type, bentIndex, soundIndex, a3, a4, initialDelay, repeatDelay
call Scus94491BpeSegment::scriptPlayBentSound, 0x1, stor[0], 0x4, 0x0, 0x0, inl[:LABEL_374[stor[8]]], 0x0 ; type, bentIndex, soundIndex, a3, a4, initialDelay, repeatDelay
call Scus94491BpeSegment::scriptPlayBentSound, 0x1, stor[0], 0x5, 0x0, 0x0, inl[:LABEL_375[stor[8]]], 0x0 ; type, bentIndex, soundIndex, a3, a4, initialDelay, repeatDelay
gosub inl[:LABEL_376] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_378] ; operand, right, addr
mov 0, var[45][248] ; dest
mov 0, var[45][249] ; dest
call Bttl_800c::scriptSetBentStat, stor[0], 0x1, ITEM_ID ; bentIndex, value, statIndex
call Bttl_800f::scriptSetTempItemMagicStats, stor[0] ; bentIndex
call Bttl_800e::scriptLoadDeff, 0xc1, stor[0], 0xffffffff, 0x1, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
LABEL_378:
gosub inl[:LABEL_369] ; addr
mov inl[:LABEL_373[stor[8]]], stor[23] ; source, dest
wait stor[23] ; frames
mov stor[0], stor[30] ; source, dest
mov 0x0, stor[9] ; source, dest
mov 0xfffffc00, stor[10] ; source, dest
mov 0x0, stor[11] ; source, dest
gosub inl[:LABEL_379] ; addr
mov 0x6, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_376] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_384] ; operand, right, addr
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_385] ; scriptIndex, address
call Bttl_800c::scriptGetBentStat, stor[0], _159, stor[9] ; bentIndex, statIndex, value
call Bttl_800c::scriptSetBentStat, stor[0], stor[9], SPELL_ID ; bentIndex, value, statIndex
call Bttl_800f::scriptSetTempSpellStats, stor[0] ; bentIndex
call Bttl_800f::scriptCheckPhysicalHit, stor[0], stor[28], stor[8] ; attackerIndex, defenderIndex, hit
jmp_cmp ==, 0, stor[8], inl[:LABEL_390] ; operand, right, addr
jmp_cmp &, 0x10, var[45][105], inl[:LABEL_390] ; operand, left, right, addr
call Bttl_800f::scriptPhysicalAttack, stor[0], stor[28], stor[8], stor[9] ; attackerIndex, defenderIndex, damage, specialEffects
jmp inl[:LABEL_391] ; addr
LABEL_390:
mov 0xffffffff, stor[8] ; source, dest
mov 0xffffffff, stor[9] ; source, dest
LABEL_391:
jmp_cmp &, 0x2, stor[7], inl[:LABEL_392] ; operand, left, right, addr
jmp_cmp >, 0, stor[8], inl[:LABEL_392] ; operand, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[10] ; bentIndex, statIndex, value
jmp_cmp !&, 0x8, stor[10], inl[:LABEL_393] ; operand, left, right, addr
shr 0x1, stor[8] ; right, left
LABEL_393:
jmp_cmp >=, 0x3b9ac9ff, stor[8], inl[:LABEL_392] ; operand, left, right, addr
mov 0x3b9ac9ff, stor[8] ; source, dest
LABEL_392:
fork_reenter stor[28], 0x2, stor[8] ; index, entrypoint, p2
mov stor[8], var[45][120] ; source, dest
mov stor[9], var[45][121] ; source, dest
jmp_cmp >, 0, stor[8], inl[:LABEL_394] ; operand, right, addr
gosub inl[:LABEL_395] ; addr
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_394] ; operand, right, addr
jmp_cmp &, 0x2, stor[7], inl[:LABEL_394] ; operand, left, right, addr
jmp_cmp &, 0x10, var[45][105], inl[:LABEL_394] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], DLEVEL, stor[8] ; bentIndex, statIndex, value
jmp_cmp >=, 0, stor[8], inl[:LABEL_406] ; operand, right, addr
jmp_cmp <, 0x5, stor[8], inl[:LABEL_406] ; operand, left, right, addr
mov inl[:LABEL_407[stor[8]]], stor[8] ; source, dest
jmp inl[:LABEL_408] ; addr
LABEL_406:
mov 0x0, stor[8] ; source, dest
LABEL_408:
call Bttl_800c::scriptGetBentStat, stor[0], SP_MULTIPLIER, stor[9] ; bentIndex, statIndex, value
add 0x64, stor[9] ; amount, operand
mul stor[9], stor[8] ; amount, operand
div 0x64, stor[8] ; amount, operand
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x40, stor[9], inl[:LABEL_409] ; operand, left, right, addr
mov 0, stor[8] ; dest
LABEL_409:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[31], 0x1 ; bentIndex, charOrBentSlot, mode
add 0x73, stor[31] ; amount, operand
add stor[8], var[45][stor[31]] ; amount, operand
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_394] ; operand, right, addr
call Bttl_800f::scriptGiveSp, stor[0], stor[8], stor[31] ; bentIndex, amount, total
mov 0x1, stor[9] ; source, dest
call Bttl_800d::scriptAllocateSpTextEffect, stor[8], stor[9] ; p0, p1
mov stor[8], var[45][108] ; source, dest
LABEL_394:
yield
call Bttl_800c::scriptAnimationHasFinished, stor[0], stor[8] ; bentIndex, finished
jmp_cmp ==, 0, stor[8], inl[:LABEL_394] ; operand, right, addr
gosub inl[:LABEL_66] ; addr
jmp_cmp &, 0x2, stor[7], inl[:LABEL_410] ; operand, left, right, addr
jmp_cmp &, 0x10, var[45][105], inl[:LABEL_410] ; operand, left, right, addr
jmp_cmp >, 0, var[45][120], inl[:LABEL_411] ; operand, right, addr
mov var[45][121], stor[9] ; source, dest
jmp_cmp >, 0, stor[9], inl[:LABEL_411] ; operand, right, addr
mov stor[9], stor[8] ; source, dest
jmp_cmp ==, 0, stor[8], inl[:LABEL_412] ; operand, right, addr
gosub inl[:LABEL_153] ; addr
mov stor[8], stor[31] ; source, dest
gosub inl[:LABEL_277] ; addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_411] ; operand, left, right, addr
fork_reenter stor[28], 0xa, stor[31] ; index, entrypoint, p2
jmp inl[:LABEL_411] ; addr
LABEL_412:
gosub inl[:LABEL_277] ; addr
call Bttl_800c::scriptSetBentRawStat, stor[28], 0x0, CURRENT_HP ; bentIndex, value, statIndex
fork_reenter stor[28], 0x4, 0x0 ; index, entrypoint, p2
gosub inl[:LABEL_417] ; addr
LABEL_411:
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_410] ; operand, right, addr
mov var[45][108], stor[8] ; source, dest
call Bttl_800d::scriptAllocateAdditionNameEffect, stor[8] ; p0
LABEL_410:
gosub inl[:LABEL_277] ; addr
mov var[45][178], stor[8] ; source, dest
jmp_cmp ==, 0x44, stor[8], inl[:LABEL_413] ; operand, left, right, addr
gosub inl[:LABEL_414] ; addr
jmp inl[:LABEL_415] ; addr
LABEL_413:
mov 0xe3, var[44] ; source, dest
LABEL_415:
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_416] ; operand, right, addr
call Bttl_800d::scriptAllocateAdditionNameEffect, 0xffffffff ; p0
call Bttl_800d::scriptAllocateSpTextEffect, 0xffffffff, 0x0 ; p0, p1
LABEL_416:
return

; SUBROUTINE
LABEL_414:
mov 0x10, var[54] ; source, dest
mov 0xe2, var[44] ; source, dest
call Bttl_800d::scriptMoveCameraProjectionPlane, 0x2, 0x140, 0x10, 0x0 ; mode, newDistance, frames, stepZ1
return
LABEL_384:
call Bttl_800e::FUN_800e6db4, 0x1 ; p0
call Bttl_800e::FUN_800e6db4, 0x2 ; p0
LABEL_419:
yield
call Bttl_800c::scriptAnimationHasFinished, stor[0], stor[8] ; bentIndex, finished
jmp_cmp ==, 0, stor[8], inl[:LABEL_419] ; operand, right, addr
gosub inl[:LABEL_66] ; addr
call Bttl_800e::FUN_800e6db4, 0x3 ; p0
gosub inl[:LABEL_277] ; addr
gosub inl[:LABEL_414] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
return

; FORK RE-ENTRY
LABEL_385:
mov 0x200, stor[8] ; source, dest
gosub inl[:LABEL_386] ; addr
mov 0x1, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x400, stor[8] ; source, dest
gosub inl[:LABEL_386] ; addr
mov 0x3, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x100, stor[8] ; source, dest
mov 0x4, stor[9] ; source, dest
mov 0x8, stor[10] ; source, dest
mov 0x4, stor[11] ; source, dest
gosub inl[:LABEL_388] ; addr
mov 0x200, stor[8] ; source, dest
gosub inl[:LABEL_388] ; addr
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x100, stor[8] ; source, dest
mov 0x6, stor[9] ; source, dest
mov 0x6, stor[10] ; source, dest
mov 0x8, stor[11] ; source, dest
gosub inl[:LABEL_388] ; addr
mov 0x200, stor[8] ; source, dest
gosub inl[:LABEL_388] ; addr
mov 0xf, stor[23] ; source, dest
wait stor[23] ; frames
deallocate

; SUBROUTINE
LABEL_388:
call SEffe::allocateDeffTmd, stor[18], 0xfff1f ; effectIndex, flags
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[8], stor[stor[stor[0], 18], 8] ; source, dest
mov stor[9], stor[stor[stor[0], 18], 9] ; source, dest
mov stor[10], stor[stor[stor[0], 18], 10] ; source, dest
mov stor[11], stor[stor[stor[0], 18], 11] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_389] ; scriptIndex, address
return

; SUBROUTINE
LABEL_386:
call SEffe::allocateDeffTmd, stor[18], 0xfff05 ; effectIndex, flags
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[8], stor[stor[stor[0], 18], 8] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_387] ; scriptIndex, address
return

; FORK RE-ENTRY
LABEL_389:
gosub inl[:LABEL_361] ; addr
call SEffe::scriptSetRelativePosition, stor[0], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[0], 0xffffffff, 0x40, 0x60, 0x80 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeRotation, stor[0], 0xffffffff, 0x400, 0x200, stor[8] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[0], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[0], 0xffffffff, stor[11], 0xc00, 0xc00, 0xc00 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[0], 0xffffffff, 0xc, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
mov stor[9], stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[0], 0xffffffff, stor[10], 0x1000, 0x1000, 0x1000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[0], 0xffffffff, stor[10], 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
mov stor[10], stor[23] ; source, dest
wait stor[23] ; frames
deallocate

; FORK RE-ENTRY
LABEL_387:
gosub inl[:LABEL_361] ; addr
sub 0x80, stor[26] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[0], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[0], 0xffffffff, 0x40, 0x60, 0x80 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeRotation, stor[0], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[0], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[0], 0xffffffff, 0x3, stor[8], stor[8], stor[8] ; effectIndex, parentIndex, ticks, x, y, z
mov 0x3, stor[23] ; source, dest
wait stor[23] ; frames
shl 0x1, stor[8] ; right, left
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[0], 0xffffffff, 0x4, stor[8], stor[8], stor[8] ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[0], 0xffffffff, 0x4, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
mov 0x4, stor[23] ; source, dest
wait stor[23] ; frames
deallocate

; SUBROUTINE
LABEL_376:
call Bttl_800c::scriptGetBentStat, stor[0], EQUIPMENT_WEAPON_SLOT, stor[8] ; bentIndex, statIndex, value
jmp_cmp ==, 0x20, stor[8], inl[:LABEL_377] ; operand, left, right, addr
mov 0, stor[8] ; dest
LABEL_377:
return

; SUBROUTINE
LABEL_360:
gosub inl[:LABEL_361] ; addr
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], 0x0, stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[19] ; effectIndex
call SEffe::FUN_801156f8, stor[19], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptGetRelativeAngleBetweenBobjs, stor[19], stor[18], stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
jmp_cmp ==, 0, stor[24], inl[:LABEL_362] ; operand, right, addr
mov 0x800, stor[8] ; source, dest
sub stor[26], stor[8] ; amount, operand
mov stor[8], stor[26] ; source, dest
LABEL_362:
call Bttl_800c::scriptSetBentRotationY, stor[0], stor[26] ; bentIndex, y
deallocate_other stor[18] ; index
deallocate_other stor[19] ; index
return

; SUBROUTINE
LABEL_369:
gosub inl[:LABEL_114] ; addr
jmp_cmp ==, 0x8, stor[8], inl[:LABEL_370] ; operand, left, right, addr
mov 0x0, stor[8] ; source, dest
jmp inl[:LABEL_371] ; addr
LABEL_370:
mov 0x2, stor[8] ; source, dest
LABEL_371:
gosub inl[:LABEL_76] ; addr
jmp_cmp ==, 0, stor[31], inl[:LABEL_372] ; operand, right, addr
incr stor[8] ; operand
LABEL_372:
return
LABEL_373:
data 0x2c
data 0x2c
data 0x2e
data 0x26
LABEL_374:
data 0x10
data 0x10
data 0x16
data 0x12
LABEL_375:
data 0x2e
data 0x2e
data 0x30
data 0x28
LABEL_407:
data 0x0
data 0x23
data 0x32
data 0x46
data 0x64
data 0x96

; SUBROUTINE
LABEL_395:
jmp_cmp &, 0x2, stor[7], inl[:LABEL_396] ; operand, left, right, addr
jmp_cmp >, 0, var[45][120], inl[:LABEL_396] ; operand, right, addr
mov var[45][121], stor[9] ; source, dest
jmp_cmp >, 0, stor[9], inl[:LABEL_396] ; operand, right, addr
mov stor[9], stor[8] ; source, dest
gosub inl[:LABEL_397] ; addr
LABEL_396:
return

; SUBROUTINE
LABEL_397:
jmp_cmp ==, 0, stor[8], inl[:LABEL_398] ; operand, right, addr
gosub inl[:LABEL_153] ; addr
jmp inl[:LABEL_399] ; addr
LABEL_399:
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[8], stor[stor[stor[0], 18], 8] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_400] ; scriptIndex, address
LABEL_398:
return
LABEL_367:
data 0x43
data 0x44
data 0x45
LABEL_365:
data 0x43
data 0x45

; SUBROUTINE
LABEL_363:
call Bttl_800c::scriptGetBentStat, var[81], _63, stor[8] ; bentIndex, statIndex, value
jmp_cmp >, 0x4, stor[8], inl[:LABEL_364] ; operand, left, right, addr
rand 0x2, stor[8] ; bound, dest
mov inl[:LABEL_365[stor[8]]], stor[8] ; source, dest
jmp inl[:LABEL_366] ; addr
LABEL_364:
rand 0x3, stor[8] ; bound, dest
mov inl[:LABEL_367[stor[8]]], stor[8] ; source, dest
LABEL_366:
mov stor[8], var[44] ; source, dest
mov stor[8], var[45][178] ; source, dest
return

; SUBROUTINE
LABEL_526:
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x15, 0x0, 0x0, 0xf, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
call Bttl_800c::scriptGetCharOrMonsterId, stor[30], stor[22] ; bentIndex, id
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[30], 0x3 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[30], 0x0 ; bentIndex, loop
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::FUN_801156f8, stor[18], stor[30], inl[:LABEL_527[stor[22]]] ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[18], stor[1], 0x20, 0x90, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0x34 ; effectIndex, ticks
mov inl[:LABEL_528[stor[22]]], stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptGetEffectTranslationRelativeToParent, stor[18], 0xffffffff, stor[9], stor[10], stor[11] ; effectIndex, parentIndex, x, y, z
call SEffe::FUN_801156f8, stor[18], 0xffffffff, 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[9], stor[10], stor[11] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptRemoveEffectAttachment, stor[18], 0x1 ; effectIndex, attachmentId
mov stor[8], stor[stor[stor[0], 18], 8] ; source, dest
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[30], stor[stor[stor[0], 18], 30] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_529] ; scriptIndex, address
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
return

; FORK RE-ENTRY
LABEL_529:
call Bttl_800e::allocateBillboardSpriteEffect, stor[18], 0xfff25 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x500, 0x500, 0x500 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[18], stor[18], 0x0, 0xfffffe00, 0xfffffe00, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddPositionScalerAttachment, stor[18], 0xffffffff, 0x0, 0xffff7b00, 0x0, 0x0, 0xe00, 0x0 ; effectIndex, parentIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, inl[:LABEL_530[stor[8]]], inl[:LABEL_531[stor[8]]], inl[:LABEL_532[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::FUN_801153e4, stor[18], inl[:LABEL_533[stor[8]]] ; effectIndex, set
call SEffe::scriptAddLifespanAttachment, stor[18], 0xf ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[19], stor[18], 0xfff3e, 0x20, 0x120, 0xf, 0x200, 0x0, 0x37 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], stor[18], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddPositionScalerAttachment, stor[19], 0xffffffff, 0x0, 0xffff7b00, 0x0, 0x0, 0x1000, 0x0 ; effectIndex, parentIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddLifespanAttachment, stor[19], 0x20 ; effectIndex, ticks
call Bttl_800e::allocateBillboardSpriteEffect, stor[19], 0xfff17 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0xfffffc00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0xf ; effectIndex, ticks
call Bttl_800e::allocateBillboardSpriteEffect, stor[19], 0xfff18 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0x400, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0xf ; effectIndex, ticks
LABEL_534:
yield
call Bttl_800c::scriptAnimationHasFinished, stor[30], stor[23] ; bentIndex, finished
jmp_cmp ==, 0, stor[23], inl[:LABEL_534] ; operand, right, addr
call Bttl_800c::FUN_800cb9b0, stor[30], stor[18] ; bentIndex, animationIndex
jmp_cmp ==, 0x0, stor[18], inl[:LABEL_535] ; operand, left, right, addr
mov stor[30], stor[28] ; source, dest
gosub inl[:LABEL_108] ; addr
LABEL_535:
rewind

; SUBROUTINE
LABEL_564:
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x2c, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptAddLifespanAttachment, stor[18], 0x21 ; effectIndex, ticks
mov stor[8], stor[stor[stor[0], 18], 8] ; source, dest
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[30], stor[stor[stor[0], 18], 30] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_565] ; scriptIndex, address
return

; FORK RE-ENTRY
LABEL_565:
call SEffe::scriptAllocateParticleEffect, stor[18], stor[28], 0xfff17, 0x2, 0x7f, 0x2, 0x200, 0x4207f00, 0x1c ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0xfffff900, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x20 ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[18], stor[28], 0xfff18, 0x2, 0x7f, 0x2, 0x200, 0x4207f00, 0x1c ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0xfffff900, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x20 ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[18], stor[28], 0xfff25, 0x4, 0x7f, 0x2, 0x200, 0x4207f00, 0x1c ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0xfffff900, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, inl[:LABEL_530[stor[8]]], inl[:LABEL_531[stor[8]]], inl[:LABEL_532[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::FUN_801153e4, stor[18], inl[:LABEL_533[stor[8]]] ; effectIndex, set
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x20 ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[18], stor[28], 0xfff25, 0x4, 0x7f, 0x2, 0x200, 0x4207f00, 0x1c ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0xfffff900, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, inl[:LABEL_566[stor[8]]], inl[:LABEL_567[stor[8]]], inl[:LABEL_568[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::FUN_801153e4, stor[18], inl[:LABEL_533[stor[8]]] ; effectIndex, set
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x20 ; effectIndex, ticks
rewind
LABEL_527:
data 0x5
data 0x6
data 0xb
data 0x8
data 0x6
data 0x6
data 0x6
data 0x5
data 0xa
LABEL_528:
data 0x10
data 0x10
data 0x10
data 0x10
data 0x11
data 0x10
data 0xe
data 0x10
data 0x10

; SUBROUTINE
LABEL_301:
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x2f, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
gosub inl[:LABEL_85] ; addr
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_302] ; scriptIndex, address
return

; FORK RE-ENTRY
LABEL_302:
gosub inl[:LABEL_303] ; addr
gosub inl[:LABEL_87] ; addr
yield
yield
gosub inl[:LABEL_308] ; addr
gosub inl[:LABEL_87] ; addr
mov 0x1b, stor[23] ; source, dest
wait stor[23] ; frames
rewind

; SUBROUTINE
LABEL_84:
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x2f, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
gosub inl[:LABEL_85] ; addr
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_86] ; scriptIndex, address
return

; FORK RE-ENTRY
LABEL_86:
yield
yield
gosub inl[:LABEL_87] ; addr
yield
yield
gosub inl[:LABEL_87] ; addr
yield
yield
mov 0x19, stor[9] ; source, dest
wait stor[9] ; frames
rewind

; SUBROUTINE
LABEL_85:
call SEffe::allocateDeffTmd, stor[18], 0xfff24 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x800, 0x800, 0x800 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xc, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::FUN_80115388, stor[18], 0x1 ; effectIndex, set
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xc, 0xff, 0xff, 0xff ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddLifespanAttachment, stor[18], 0x23 ; effectIndex, ticks
mov stor[8], stor[stor[stor[0], 18], 8] ; source, dest
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
return

; SUBROUTINE
LABEL_87:
call SEffe::scriptAllocateParticleEffect, stor[18], stor[0], 0xfff3d, 0xa, 0x170, 0x6, 0x170, 0x4197f00, 0x29 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x19 ; effectIndex, ticks
return
data 0x2ea0938
data 0x2000012
data 0x2000000
data 0xfff3e
data 0x2
data 0x100
data 0x6
data 0x170
data 0x1000000
data 0x40f7f00
data 0x29
data 0x2210538
data 0x2000012
data 0x200001c
data 0x0
data 0x1000000
data 0x0
data 0x0
data 0x2250538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x600
data 0x600
data 0x600
data 0x2270538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0xa080096
data 0xa080099
data 0xa08009c
data 0x2290338
data 0x2000012
data 0x0
data 0x1
data 0x24c0238
data 0x2000012
data 0xf
data 0x2ea0938
data 0x2000012
data 0x2000000
data 0xfff3e
data 0x2
data 0x100
data 0x6
data 0x170
data 0x1000000
data 0x40f7f00
data 0x29
data 0x2210538
data 0x2000012
data 0x200001c
data 0x0
data 0x1000000
data 0x0
data 0x0
data 0x2250538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x600
data 0x600
data 0x600
data 0x2270538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0xa080078
data 0xa08007b
data 0xa08007e
data 0x2290338
data 0x2000012
data 0x0
data 0x1
data 0x24c0238
data 0x2000012
data 0xf

; SUBROUTINE
LABEL_304:
call Bttl_800d::scriptAllocateRadialGradientEffect, stor[18], 0x3, 0x2 ; effectIndex, count, type
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0xfffffd00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x1, 0x200 ; effectIndex, genericIndex, value
call SEffe::scriptSetGenericEffectValue, stor[18], 0x2, 0x0 ; effectIndex, genericIndex, value
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xc ; effectIndex, ticks
return

; SUBROUTINE
LABEL_303:
gosub inl[:LABEL_304] ; addr
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, inl[:LABEL_305[stor[8]]], inl[:LABEL_306[stor[8]]], inl[:LABEL_307[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xc, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, 0x200, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xc, 0x5dc, 0x5dc, 0x5dc ; effectIndex, parentIndex, ticks, x, y, z
yield
yield
return

; SUBROUTINE
LABEL_308:
gosub inl[:LABEL_304] ; addr
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, inl[:LABEL_309[stor[8]]], inl[:LABEL_310[stor[8]]], inl[:LABEL_311[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xc, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptSetRelativeRotation, stor[18], stor[0], 0x0, 0x600, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xc, 0x5dc, 0x5dc, 0x5dc ; effectIndex, parentIndex, ticks, x, y, z
return
LABEL_305:
data 0x82
data 0xff
data 0xff
LABEL_306:
data 0xdf
data 0x68
data 0xe0
LABEL_307:
data 0xfa
data 0x68
data 0x68
LABEL_309:
data 0xff
data 0x9f
data 0x68
LABEL_310:
data 0xe0
data 0x68
data 0xcc
LABEL_311:
data 0x68
data 0xff
data 0x82
LABEL_530:
data 0xff
data 0x51
data 0x55
data 0x84
data 0x5e
data 0xe8
data 0xf0
data 0xff
data 0xf5
data 0x82
data 0xff
data 0xff
LABEL_531:
data 0x20
data 0xa6
data 0xc8
data 0x0
data 0x30
data 0xe0
data 0xf0
data 0xff
data 0xff
data 0xdf
data 0x68
data 0xe0
LABEL_532:
data 0x0
data 0xe8
data 0x83
data 0xff
data 0x0
data 0x88
data 0x28
data 0xff
data 0xd7
data 0xfa
data 0x68
data 0x68
LABEL_566:
data 0xff
data 0x51
data 0x55
data 0x84
data 0x5e
data 0xe8
data 0xf0
data 0xff
data 0xf5
data 0xff
data 0x9f
data 0x68
LABEL_567:
data 0x20
data 0xa6
data 0xc8
data 0x0
data 0x30
data 0xe0
data 0xf0
data 0xff
data 0xff
data 0xe0
data 0x68
data 0xcc
LABEL_568:
data 0x0
data 0xe8
data 0x83
data 0xff
data 0x0
data 0x88
data 0x28
data 0xff
data 0xd7
data 0x68
data 0xff
data 0x82
LABEL_533:
data 0x1
data 0x1
data 0x1
data 0x1
data 0x1
data 0x1
data 0x2
data 0x1
data 0x1
data 0x1
data 0x1
data 0x1

; SUBROUTINE
LABEL_131:
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x2e, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
call Bttl_800e::allocateBillboardSpriteEffect, stor[18], 0xfff25 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0x64 ; effectIndex, ticks
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xf, 0xff, 0xff, 0xff ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_132] ; scriptIndex, address
return

; FORK RE-ENTRY
LABEL_132:
mov 0xfffff500, stor[10] ; source, dest
mov 0x0, stor[12] ; source, dest
call SEffe::scriptAllocateParticleEffect, stor[18], 0xffffffff, 0xfff3e, 0x32, 0x0, 0x6e, 0x100, 0x4107f00, 0x2b ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[18], stor[28], stor[9], stor[10], stor[11] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x800, 0x800, 0x800 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptSetGenericEffectValue, stor[18], 0x1, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x69 ; effectIndex, ticks
mov 0x0, stor[23] ; source, dest
call SEffe::scriptSetRelativeColour, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], stor[0], 0x5, 0x80, 0x80, 0x80 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
LABEL_138:
mov stor[10], stor[15] ; source, dest
sub 0xfffffe00, stor[15] ; amount, operand
div 0xa, stor[15] ; amount, operand
sub stor[15], stor[10] ; amount, operand
mov stor[10], stor[15] ; source, dest
neg stor[15] ; operand
add 0x50, stor[15] ; amount, operand
sin_12 stor[12], stor[16] ; angle, dest
mul 0x50, stor[16] ; amount, operand
div stor[15], stor[16] ; amount, operand
mov stor[10], stor[15] ; source, dest
neg stor[15] ; operand
add 0x50, stor[15] ; amount, operand
cos_12 stor[12], stor[17] ; angle, dest
mul 0x50, stor[17] ; amount, operand
div stor[15], stor[17] ; amount, operand
add 0x64, stor[12] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[0], stor[28], stor[16], stor[10], stor[17] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[18], stor[28], stor[16], stor[10], stor[17] ; bobjIndex1, bobjIndex2, x, y, z
incr stor[23] ; operand
mov stor[23], stor[22] ; source, dest
mod 0x8, stor[22] ; amount, operand
jmp_cmp !=, 0, stor[22], inl[:LABEL_133] ; operand, right, addr
mov stor[23], stor[21] ; source, dest
div 0x8, stor[21] ; amount, operand
decr stor[21] ; operand
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x8, inl[:LABEL_134[stor[21]]], inl[:LABEL_135[stor[21]]], inl[:LABEL_136[stor[21]]] ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
LABEL_133:
jmp_cmp !=, 0x3c, stor[23], inl[:LABEL_137] ; operand, left, right, addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[0], 0xffffffff, 0x14, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
LABEL_137:
yield
jmp inl[:LABEL_138] ; addr
LABEL_134:
data 0xff
data 0xff
data 0xff
data 0x0
data 0x0
data 0x0
data 0x80
data 0x20
data 0x4
data 0x0
data 0x0
data 0x0
LABEL_135:
data 0xff
data 0x0
data 0x0
data 0x0
data 0xff
data 0xff
data 0xff
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
LABEL_136:
data 0x0
data 0x0
data 0xff
data 0xff
data 0xff
data 0x0
data 0x0
data 0x0
data 0x4
data 0x0
data 0x0
data 0x0

; SUBROUTINE
LABEL_379:
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptAddLifespanAttachment, stor[18], 0x19 ; effectIndex, ticks
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[30], stor[stor[stor[0], 18], 30] ; source, dest
mov stor[9], stor[stor[stor[0], 18], 9] ; source, dest
mov stor[10], stor[stor[stor[0], 18], 10] ; source, dest
mov stor[11], stor[stor[stor[0], 18], 11] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_380] ; scriptIndex, address
return

; FORK RE-ENTRY
LABEL_380:
call SEffe::allocateDeffTmd, stor[18], 0xfff09 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], stor[30], stor[9], stor[10], stor[11] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], stor[18], 0x1000, 0x1000, 0xb00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0x14 ; effectIndex, ticks
jmp_cmp ==, 0xffffffff, stor[28], inl[:LABEL_381] ; operand, left, right, addr
gosub inl[:LABEL_361] ; addr
call SEffe::scriptAddRelativePositionScalerTicks1, stor[18], 0xffffffff, 0x4, stor[24], stor[25], stor[26] ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptRotateBobjTowardsPoint, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex, parentIndex, x, y, z
jmp inl[:LABEL_382] ; addr
LABEL_381:
call SEffe::scriptAddRelativePositionScalerTicks1, stor[18], 0xffffffff, 0x4, 0xfffff100, 0xfffff900, 0x0 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptRotateBobjTowardsPoint, stor[18], 0xffffffff, 0xfffff100, 0xfffff900, 0x0 ; bobjIndex, parentIndex, x, y, z
jmp inl[:LABEL_382] ; addr
LABEL_382:
yield
yield
gosub inl[:LABEL_383] ; addr
gosub inl[:LABEL_383] ; addr
gosub inl[:LABEL_383] ; addr
mov 0x6, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xc, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
mov 0xc, stor[23] ; source, dest
wait stor[23] ; frames
rewind

; SUBROUTINE
LABEL_383:
call SEffe::scriptGetEffectTranslationRelativeToParent, stor[18], 0xffffffff, stor[12], stor[13], stor[14] ; effectIndex, parentIndex, x, y, z
call SEffe::allocateDeffTmd, stor[19], 0xfff09 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[19], stor[18], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], stor[19], 0x1000, 0x1000, 0x1000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[19], stor[18], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::FUN_80115388, stor[19], 0x1 ; effectIndex, set
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x0, 0x0, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddLifespanAttachment, stor[19], 0x6 ; effectIndex, ticks
yield
return

; FORK RE-ENTRY
LABEL_400:
call Bttl_800e::allocateBillboardSpriteEffect, stor[18], 0xfff26 ; effectIndex, flags
call SEffe::FUN_801153e4, stor[18], inl[:LABEL_401[stor[8]]] ; effectIndex, set
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0xfffffc00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x8, inl[:LABEL_402[stor[8]]], inl[:LABEL_403[stor[8]]], inl[:LABEL_404[stor[8]]] ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], inl[:LABEL_405[stor[8]]], 0x14, 0xc8, 0x2, 0x80, 0x1207f00, 0x5 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::FUN_801153e4, stor[19], inl[:LABEL_401[stor[8]]] ; effectIndex, set
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[19], stor[28], 0x0, 0xfffffc00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0x10 ; effectIndex, ticks
yield
call SEffe::scriptAllocateParticleEffect, stor[20], stor[28], 0xfff26, 0x6, 0xc8, 0x0, 0x200, 0xc187f00, 0x18 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::FUN_801153e4, stor[20], inl[:LABEL_401[stor[8]]] ; effectIndex, set
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, inl[:LABEL_402[stor[8]]], inl[:LABEL_403[stor[8]]], inl[:LABEL_404[stor[8]]] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[20], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptSetRelativeScale, stor[20], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[20], stor[28], 0x0, 0xfffffc00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[20], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
mov 0x8, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x9, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
mov 0x9, stor[23] ; source, dest
wait stor[23] ; frames
deallocate
LABEL_402:
data 0xdc
data 0x78
data 0x64
data 0x1e
data 0x78
data 0xe8
data 0x10
data 0x0
data 0xf5
LABEL_403:
data 0xdc
data 0x0
data 0x64
data 0x1e
data 0x78
data 0xe0
data 0x10
data 0x50
data 0xff
LABEL_404:
data 0xdc
data 0x78
data 0x0
data 0xf0
data 0x0
data 0x88
data 0xd8
data 0x14
data 0xd7
LABEL_405:
data 0xfff03
data 0xfff2b
data 0xfff2f
data 0xfff33
data 0xfff05
data 0xfff38
data 0xfff26
data 0xfff38
data 0xfff00
LABEL_401:
data 0x1
data 0x1
data 0x1
data 0x1
data 0x1
data 0x1
data 0x2
data 0x1
data 0x1
data 0x208
data 0x1
data 0x2000008
data 0x102
data 0x2000017
data 0x10c
data 0x2000008
data 0x1
data 0x49
data 0x49

; SUBROUTINE
JMP_bf60_0:
gosub inl[:LABEL_340] ; addr
call Bttl_800c::scriptGetBentPos, stor[0], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
call Bttl_800c::FUN_800ccec8, 0x0 ; p0
call Bttl_800c::scriptGetCharOrMonsterId, stor[0], stor[8] ; bentIndex, id
gosub inl[:LABEL_114] ; addr
gosub inl[:LABEL_342] ; addr
call Bttl_800e::FUN_800e6fb4, inl[:LABEL_345[stor[8]]], stor[0], stor[28], 0x0 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint
yield
call Scus94491BpeSegment::scriptUnloadSoundFile, 0x6 ; soundType
yield
return
LABEL_345:
data 0x30
data 0x31
data 0xffffffff
data 0x33
data 0x34
data 0x35
data 0x36
data 0x37
data 0xffffffff
data 0x39

; SUBROUTINE
LABEL_342:
call Scus94491BpeSegment::scriptLoadMonsterAttackSounds, inl[:LABEL_343[stor[8]]] ; monsterIndex
LABEL_344:
yield
call Scus94491BpeSegment::scriptGetLoadedSoundFiles, stor[23] ; flags
jmp_cmp &, 0x20, stor[23], inl[:LABEL_344] ; operand, left, right, addr
return
LABEL_343:
data 0x68
data 0x69
data 0x6a
data 0x6b
data 0x6c
data 0x6d
data 0x6e
data 0x6f
data 0x70
data 0x68
data 0x148
data 0x900de62
data 0x810438
data 0x200001e
data 0x2000018
data 0x2000019
data 0x200001a
data 0xab0138
data 0x0
data 0xa70238
data 0x200001e
data 0x2000008
data 0x148
data 0x900159a
data 0x148
data 0x900ffde
data 0x1a00438
data 0xa08ffd2
data 0x200001e
data 0x200001c
data 0x0
data 0x0
data 0xe80138
data 0x6
data 0x0
data 0x49
data 0x49
ENTRYPOINT_10:
jmp_cmp !=, 0x0, var[57], inl[:LABEL_247] ; operand, left, right, addr
jmp_cmp &, 0x2, stor[7], inl[:LABEL_247] ; operand, left, right, addr
mov stor[32], stor[9] ; source, dest
gosub inl[:LABEL_248] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_247] ; operand, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], GUARD, stor[8] ; bentIndex, statIndex, value
jmp_cmp !=, 0, stor[8], inl[:LABEL_250] ; operand, right, addr
call Bttl_800c::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xff, stor[8] ; right, left
jmp_cmp ==, 0, stor[8], inl[:LABEL_251] ; operand, right, addr
jmp_cmp &, 0x10, stor[8], inl[:LABEL_251] ; operand, left, right, addr
jmp_cmp >=, stor[8], inl[:LABEL_252[stor[32]]], inl[:LABEL_251] ; operand, left, right, addr
LABEL_247:
consume
LABEL_250:
gosub inl[:LABEL_256] ; addr
call SEffe::scriptSetRelativeRotation, stor[18], stor[18], 0x200, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x2, stor[8] ; source, dest
wait stor[8] ; frames
gosub inl[:LABEL_256] ; addr
call SEffe::scriptSetRelativeRotation, stor[18], stor[18], 0x600, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
consume

; SUBROUTINE
LABEL_256:
memcpy 0x3, stor[24], inl[:LABEL_257] ; size, src, dest
call Bttl_800d::scriptAllocateRadialGradientEffect, stor[18], 0x3, 0x2 ; effectIndex, count, type
mov 0xfffffd00, stor[8] ; source, dest
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_171] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x1, 0x200 ; effectIndex, genericIndex, value
call SEffe::scriptSetGenericEffectValue, stor[18], 0x2, 0x0 ; effectIndex, genericIndex, value
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0xc8, 0x78, 0x8c ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xc, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xc, 0x1194, 0x1194, 0x1194 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xc ; effectIndex, ticks
memcpy 0x3, inl[:LABEL_257], stor[24] ; size, src, dest
return
LABEL_257:
data 0x0
data 0x0
data 0x0
data 0x211
data 0x380
data 0x700092d
data 0x58
LABEL_251:
jmp_cmp !=, stor[32], 0x1, inl[:LABEL_253] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x2, stor[8], inl[:LABEL_247] ; operand, left, right, addr
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[8]][4], stor[8] ; source, dest
call Bttl_800c::scriptGetBentSlot, stor[0], stor[10], 0x1 ; bentIndex, charOrBentSlot, mode
add 0xb8, stor[10] ; amount, operand
mov stor[8], var[45][stor[10]] ; source, dest
LABEL_253:
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; right, left
or inl[:LABEL_154[stor[32]]], stor[8] ; right, left
call Bttl_800c::scriptSetBentStat, stor[0], stor[8], STATUS ; bentIndex, value, statIndex
mov var[45][stor[9]], stor[11] ; source, dest
and 0xf, stor[11] ; right, left
mov 0, var[45][stor[9]] ; dest
or 0x380, var[45][stor[9]] ; right, left
or stor[32], var[45][stor[9]] ; right, left
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[0], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[32], stor[stor[stor[0], 18], 31] ; source, dest
mov stor[9], stor[stor[stor[0], 18], 9] ; source, dest
mov 0x1, stor[stor[stor[0], 18], 17] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_158] ; scriptIndex, address
gosub inl[:LABEL_254] ; addr
consume
LABEL_154:
data 0x1
data 0x2
data 0x4
data 0x8
data 0x10
data 0x20
data 0x40
data 0x80
LABEL_252:
data 0x1
data 0x2
data 0x4
data 0x8
data 0x100
data 0x20
data 0x40
data 0x80

; SUBROUTINE
LABEL_153:
mov stor[8], stor[9] ; source, dest
mov 0, stor[8] ; dest
LABEL_156:
jmp_cmp ==, stor[9], inl[:LABEL_154[stor[8]]], inl[:LABEL_155] ; operand, left, right, addr
incr stor[8] ; operand
jmp_cmp >=, 0x7, stor[8], inl[:LABEL_156] ; operand, left, right, addr
noop 0x4, 0x8, stor[8] ; ?, ?, ?
mov 0xffffffff, stor[8] ; source, dest
LABEL_155:
return

; SUBROUTINE
LABEL_248:
mov 0, stor[8] ; dest
call Bttl_800c::scriptGetBentSlot, stor[0], stor[11], 0x1 ; bentIndex, charOrBentSlot, mode
add 0x6d, stor[11] ; amount, operand
jmp_cmp &, 0x0, var[45][stor[11]], inl[:LABEL_249] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], EQUIPMENT_STATUS_RESIST, stor[10] ; bentIndex, statIndex, value
jmp_cmp !&, inl[:LABEL_154[stor[9]]], stor[10], inl[:LABEL_249] ; operand, left, right, addr
incr stor[8] ; operand
LABEL_249:
return
ENTRYPOINT_11:
jmp_cmp !=, 0x0, var[57], inl[:LABEL_152] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xff, stor[8] ; right, left
jmp_cmp ==, 0, stor[8], inl[:LABEL_152] ; operand, right, addr
gosub inl[:LABEL_153] ; addr
jmp_cmp >, 0, stor[8], inl[:LABEL_157] ; operand, right, addr
call Bttl_800c::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
jmp_cmp &, 0x80, var[45][stor[9]], inl[:LABEL_152] ; operand, left, right, addr
or 0x80, var[45][stor[9]] ; right, left
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[0], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[8], stor[stor[stor[0], 18], 31] ; source, dest
mov stor[9], stor[stor[stor[0], 18], 9] ; source, dest
mov 0x1, stor[stor[stor[0], 18], 17] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_158] ; scriptIndex, address
jmp_cmp ==, 0, var[45][183], inl[:LABEL_210] ; operand, right, addr
LABEL_211:
yield
jmp_cmp !=, 0, stor[stor[stor[0], 18], 17], inl[:LABEL_211] ; operand, right, addr
LABEL_152:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[8] ; source, dest
shl stor[9], stor[8] ; right, left
neg stor[8] ; operand
decr stor[8] ; operand
and stor[8], var[45][183] ; right, left
LABEL_210:
consume
LABEL_157:
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; right, left
call Bttl_800c::scriptSetBentStat, stor[0], stor[8], STATUS ; bentIndex, value, statIndex
jmp inl[:LABEL_152] ; addr

; SUBROUTINE
LABEL_420:
mov 0, stor[8] ; dest
LABEL_427:
mov var[32][stor[8]], stor[28] ; source, dest
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
gosub inl[:LABEL_421] ; addr
incr stor[8] ; operand
jmp_cmp <, stor[8], var[33], inl[:LABEL_427] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_421:
jmp_cmp !=, 0x0, var[57], inl[:LABEL_422] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[28], STATUS, stor[18] ; bentIndex, statIndex, value
and 0xff, stor[18] ; right, left
jmp_cmp ==, 0, stor[18], inl[:LABEL_422] ; operand, right, addr
jmp_cmp &, 0x1, stor[18], inl[:LABEL_423] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_422] ; operand, left, right, addr
LABEL_423:
gosub inl[:LABEL_424] ; addr
LABEL_422:
return

; SUBROUTINE
LABEL_424:
mov var[45][stor[9]], stor[31] ; source, dest
and 0xf, stor[31] ; right, left
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[31], stor[stor[stor[0], 18], 31] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_425] ; scriptIndex, address
return

; FORK RE-ENTRY
LABEL_425:
call Bttl_800c::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[8] ; source, dest
shl stor[9], stor[8] ; right, left
or stor[8], var[45][183] ; right, left
fork_reenter stor[28], 0xb, stor[31] ; index, entrypoint, p2
gosub inl[:LABEL_426] ; addr
deallocate

; SUBROUTINE TABLE
LABEL_177:
rel :JMP_ad94_0
rel :JMP_ad94_1
rel :JMP_ad94_2
rel :JMP_ad94_3
rel :JMP_ad94_4
rel :JMP_ad94_5
rel :JMP_ad94_6
rel :JMP_ad94_7

; SUBROUTINE TABLE
LABEL_161:
rel :JMP_adb4_0
rel :JMP_adb4_1
rel :JMP_adb4_2
rel :JMP_adb4_3
rel :JMP_adb4_4
rel :JMP_adb4_5
rel :JMP_adb4_6
rel :JMP_adb4_7

; FORK RE-ENTRY
LABEL_158:
call Bttl_800c::scriptGetBentStat2, stor[28], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
jmp_cmp ==, 0, stor[8], inl[:LABEL_159] ; operand, right, addr
call Bttl_800c::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x1, stor[8], inl[:LABEL_160] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_159] ; operand, left, right, addr
LABEL_160:
gosub_table stor[31], inl[:LABEL_161] ; index, table
LABEL_192:
call Bttl_800c::scriptGetBentSlot, stor[28], stor[8], 0x1 ; bentIndex, charOrBentSlot, mode
add 0xb8, stor[8] ; amount, operand
mov var[45][stor[8]], stor[8] ; source, dest
jmp_cmp >, 0, stor[8], inl[:LABEL_173] ; operand, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 8], 7], inl[:LABEL_174] ; operand, left, right, addr
LABEL_173:
mov var[45][stor[9]], stor[11] ; source, dest
jmp_cmp !&, 0x80, stor[11], inl[:LABEL_175] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x1, stor[8], inl[:LABEL_176] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_175] ; operand, left, right, addr
LABEL_176:
mov stor[11], stor[13] ; source, dest
and 0xf, stor[13] ; right, left
jmp_cmp !=, stor[13], stor[31], inl[:LABEL_159] ; operand, left, right, addr
mov stor[11], stor[13] ; source, dest
and 0xf00, stor[13] ; right, left
jmp_cmp ==, 0xf00, stor[13], inl[:LABEL_174] ; operand, left, right, addr
gosub_table stor[31], inl[:LABEL_177] ; index, table
yield
jmp inl[:LABEL_192] ; addr
LABEL_175:
jmp_cmp ==, 0, var[45][stor[9]], inl[:LABEL_174] ; operand, right, addr
LABEL_159:
mov 0, stor[17] ; dest
yield
yield
yield
deallocate
LABEL_174:
mov 0, var[45][stor[9]] ; dest
call Bttl_800c::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; right, left
call Bttl_800c::scriptSetBentStat, stor[28], stor[8], STATUS ; bentIndex, value, statIndex
mov 0x1, var[45][225] ; source, dest
gosub_table stor[31], inl[:LABEL_193] ; index, table
mov 0, var[45][225] ; dest
deallocate

; SUBROUTINE TABLE
LABEL_193:
rel :JMP_afcc_0
rel :JMP_afcc_1
rel :JMP_afcc_2
rel :JMP_afcc_3
rel :JMP_afcc_4
rel :JMP_afcc_5
rel :JMP_afcc_6
rel :JMP_afcc_7

; SUBROUTINE
JMP_afcc_0:
gosub inl[:LABEL_208] ; addr
jmp_cmp &, 0x2, var[45][245], inl[:LABEL_209] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0x9 ; bentIndex, animIndex
gosub inl[:LABEL_207] ; addr
LABEL_209:
call Bttl_800c::scriptSetBentDead, stor[28], 0x0 ; bentIndex, dead
gosub inl[:LABEL_108] ; addr
gosub inl[:LABEL_203] ; addr
gosub inl[:LABEL_204] ; addr
return

; SUBROUTINE
JMP_afcc_1:
gosub inl[:LABEL_202] ; addr
gosub inl[:LABEL_205] ; addr
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x40, 0x0, 0x3c ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x40, 0x0, 0x3c ; bobjIndex1, bobjIndex2, r, g, b
gosub inl[:LABEL_203] ; addr
gosub inl[:LABEL_204] ; addr
return

; SUBROUTINE
JMP_afcc_2:
gosub inl[:LABEL_202] ; addr
gosub inl[:LABEL_205] ; addr
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x3c, 0x3c, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x3c, 0x3c, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
gosub inl[:LABEL_203] ; addr
gosub inl[:LABEL_204] ; addr
return

; SUBROUTINE
JMP_afcc_3:
gosub inl[:LABEL_202] ; addr
gosub inl[:LABEL_205] ; addr
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x14, 0x14, 0x46 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x14, 0x14, 0x46 ; bobjIndex1, bobjIndex2, r, g, b
gosub inl[:LABEL_203] ; addr
gosub inl[:LABEL_204] ; addr
return

; SUBROUTINE
JMP_afcc_4:
jmp_cmp &, 0x2, var[45][245], inl[:LABEL_206] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_206] ; operand, left, right, addr
call Bttl_800c::FUN_800cb9b0, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0x9, stor[8], inl[:LABEL_206] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0x9 ; bentIndex, animIndex
mov 0x6, stor[8] ; source, dest
wait stor[8] ; frames
gosub inl[:LABEL_207] ; addr
LABEL_206:
gosub inl[:LABEL_108] ; addr
gosub inl[:LABEL_202] ; addr
gosub inl[:LABEL_203] ; addr
gosub inl[:LABEL_204] ; addr
return

; SUBROUTINE
JMP_afcc_5:
gosub inl[:LABEL_202] ; addr
gosub inl[:LABEL_205] ; addr
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x1e, 0x1e, 0x1e ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x1e, 0x1e, 0x1e ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::FUN_801153e4, stor[19], 0x2 ; effectIndex, set
call SEffe::FUN_801153e4, stor[20], 0x2 ; effectIndex, set
gosub inl[:LABEL_203] ; addr
gosub inl[:LABEL_204] ; addr
return

; SUBROUTINE
JMP_afcc_6:
gosub inl[:LABEL_203] ; addr
gosub inl[:LABEL_204] ; addr
return

; SUBROUTINE
JMP_afcc_7:
gosub inl[:LABEL_202] ; addr
gosub inl[:LABEL_203] ; addr
gosub inl[:LABEL_204] ; addr
return

; SUBROUTINE
LABEL_208:
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x8, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0x8 ; effectIndex, ticks
return

; SUBROUTINE
LABEL_202:
deallocate_other stor[19] ; index
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xa, 0x1000, 0x1000, 0x1000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddLifespanAttachment, stor[18], 0xa ; effectIndex, ticks
yield
return

; SUBROUTINE
LABEL_204:
call SEffe::scriptAllocateParticleEffect, stor[18], 0xffffffff, 0xfff3d, 0xc, 0x200, 0x2, 0x100, 0x4127f00, 0x29 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_171] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], stor[28], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x20 ; effectIndex, ticks
mov 0x20, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
LABEL_203:
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x2d, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
call SEffe::scriptAllocateParticleEffect, stor[18], 0xffffffff, 0xfff2d, 0x10, 0x80, 0x2, 0x800, 0x6107f00, 0x4 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffd00, stor[8] ; source, dest
gosub inl[:LABEL_171] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], stor[28], 0x100, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x28 ; effectIndex, ticks
mov 0x6, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
LABEL_205:
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff26, 0x8, 0x200, 0x1, 0x200, 0x4187f00, 0x36 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffd00, stor[8] ; source, dest
gosub inl[:LABEL_171] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0xfa, 0xfa, 0xfa ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[19], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[19], 0x20 ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[20], stor[28], 0xfff26, 0x8, 0x200, 0x1, 0x200, 0x4187f00, 0x36 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffd00, stor[8] ; source, dest
gosub inl[:LABEL_171] ; addr
call SEffe::scriptSetRelativePosition, stor[20], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[20], 0xffffffff, 0x96, 0x96, 0x96 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[20], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[20], 0x20 ; effectIndex, ticks
return

; SUBROUTINE
JMP_adb4_0:
call Bttl_800c::scriptSetBentDead, stor[28], 0x1 ; bentIndex, dead
call Bttl_800c::FUN_800cb9b0, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xe, stor[8], inl[:LABEL_172] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0xe ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[28], 0x0 ; bentIndex, loop
LABEL_172:
call SEffe::allocateDeffTmd, stor[18], 0xfff25 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0xfffffe00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x4, 0x1000, 0x1000, 0x1000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[18], 0xffffffff, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::FUN_8011549c, stor[18], 0x1 ; effectIndex, set
mov 0x4, stor[23] ; source, dest
wait stor[23] ; frames
mov 0, stor[17] ; dest

; SUBROUTINE
JMP_ad94_0:
return

; SUBROUTINE
JMP_adb4_1:
gosub inl[:LABEL_170] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x1e, 0x0, 0x1e ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff2b, 0x5, 0xc8, 0x11, 0x0, 0x5208000, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0xa00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_171] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0xfa, 0xfa, 0xfa ; bobjIndex1, bobjIndex2, x, y, z
yield
mov 0, stor[17] ; dest
return

; SUBROUTINE
JMP_ad94_1:
gosub inl[:LABEL_188] ; addr
return

; SUBROUTINE
JMP_adb4_2:
gosub inl[:LABEL_170] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x19, 0x19, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff2f, 0x5, 0xc8, 0x11, 0x0, 0x5208000, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0xa00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_171] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x180, 0x180, 0x180 ; bobjIndex1, bobjIndex2, x, y, z
yield
mov 0, stor[17] ; dest
return

; SUBROUTINE
JMP_ad94_2:
gosub inl[:LABEL_188] ; addr
return

; SUBROUTINE
JMP_adb4_3:
gosub inl[:LABEL_170] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x5, 0x5, 0x28 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff33, 0x5, 0xc8, 0x11, 0x0, 0x5208000, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0xa00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_171] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x180, 0x180, 0x180 ; bobjIndex1, bobjIndex2, x, y, z
yield
mov 0, stor[17] ; dest
return

; SUBROUTINE
JMP_ad94_3:
jmp_cmp !&, 0x1, var[2], inl[:LABEL_190] ; operand, left, right, addr
call Bttl_800c::scriptGetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
add 0x14, stor[26] ; amount, operand
call Bttl_800c::scriptSetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
jmp inl[:LABEL_191] ; addr
LABEL_190:
call Bttl_800c::scriptGetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
sub 0x14, stor[26] ; amount, operand
call Bttl_800c::scriptSetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
LABEL_191:
return

; SUBROUTINE
JMP_adb4_4:
gosub inl[:LABEL_170] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff05, 0x8, 0x78, 0x20, 0x0, 0x0, 0x10 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffd00, stor[8] ; source, dest
gosub inl[:LABEL_171] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call Bttl_800c::scriptSetBentStat, stor[28], 0x0, GUARD ; bentIndex, value, statIndex
yield
mov 0, stor[17] ; dest
return

; SUBROUTINE
JMP_ad94_4:
gosub inl[:LABEL_188] ; addr
return

; SUBROUTINE
JMP_adb4_5:
gosub inl[:LABEL_170] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x1e, 0x1e, 0x1e ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::FUN_801153e4, stor[18], 0x2 ; effectIndex, set
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff26, 0x5, 0xc8, 0x11, 0x0, 0x4208000, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_171] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0xfa, 0xfa, 0xfa ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0xa, 0x1e, 0x1e, 0x1e ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::FUN_801153e4, stor[19], 0x2 ; effectIndex, set
yield
mov 0, stor[17] ; dest
return

; SUBROUTINE
JMP_ad94_5:
gosub inl[:LABEL_188] ; addr
return

; SUBROUTINE
JMP_adb4_6:
yield
mov 0, stor[17] ; dest
return

; SUBROUTINE
JMP_ad94_6:
return

; SUBROUTINE
JMP_adb4_7:
gosub inl[:LABEL_170] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x14, 0x5 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff38, 0x5, 0xc8, 0x1, 0x60, 0x0, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0xa00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_171] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
yield
mov 0, stor[17] ; dest
return

; SUBROUTINE
JMP_ad94_7:
jmp_cmp !&, 0x40, var[45][stor[9]], inl[:LABEL_186] ; operand, left, right, addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[10] ; source, dest
shl stor[8], stor[10] ; right, left
call Bttl_800c::scriptGetBentStat2, stor[28], MAX_HP, stor[8] ; bentIndex, statIndex, value
div 0xa, stor[8] ; amount, operand
jmp_cmp !=, 0, stor[8], inl[:LABEL_187] ; operand, right, addr
incr stor[8] ; operand
LABEL_187:
or stor[10], var[45][188] ; right, left
fork_reenter stor[28], 0x2, stor[8] ; index, entrypoint, p2
xor 0x40, var[45][stor[9]] ; right, left
LABEL_186:
return

; SUBROUTINE
LABEL_314:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
jmp_cmp !&, 0x80, var[45][stor[9]], inl[:LABEL_315] ; operand, left, right, addr
or 0x40, var[45][stor[9]] ; right, left
LABEL_315:
return

; SUBROUTINE
LABEL_127:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
mov 0, var[45][stor[9]] ; dest
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; right, left
call Bttl_800c::scriptSetBentStat, stor[0], stor[8], STATUS ; bentIndex, value, statIndex
return

; SUBROUTINE
LABEL_284:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
jmp_cmp !&, 0x80, var[45][stor[9]], inl[:LABEL_285] ; operand, left, right, addr
and 0xffffff7f, var[45][stor[9]] ; right, left
or 0x10000, var[45][stor[9]] ; right, left
LABEL_285:
return

; SUBROUTINE
LABEL_334:
mov 0, stor[8] ; dest
LABEL_336:
mov var[32][stor[8]], stor[10] ; source, dest
call Bttl_800c::scriptGetBentSlot, stor[10], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
jmp_cmp !&, 0x80, var[45][stor[9]], inl[:LABEL_335] ; operand, left, right, addr
and 0xffffff7f, var[45][stor[9]] ; right, left
or 0x10000, var[45][stor[9]] ; right, left
LABEL_335:
incr stor[8] ; operand
jmp_cmp <, stor[8], var[33], inl[:LABEL_336] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_319:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
return

; SUBROUTINE
LABEL_188:
jmp_cmp !&, var[45][stor[9]], 0x40, inl[:LABEL_189] ; operand, left, right, addr
sub 0x40, var[45][stor[9]] ; amount, operand
sub 0x100, var[45][stor[9]] ; amount, operand
and 0xf00, stor[11] ; right, left
jmp_cmp !=, 0, stor[11], inl[:LABEL_189] ; operand, right, addr
mov 0, var[45][stor[9]] ; dest
LABEL_189:
return

; SUBROUTINE
LABEL_170:
call Bttl_800e::allocateBillboardSpriteEffect, stor[18], 0xfff26 ; effectIndex, flags
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_171] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x3e8, 0x3e8, 0x3e8 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[18], stor[18], 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
return

; SUBROUTINE
LABEL_171:
call Bttl_800c::scriptGetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
add stor[8], stor[25] ; amount, operand
return

; SUBROUTINE TABLE
LABEL_599:
rel :JMP_bf38_0
rel :JMP_bf38_0
rel :JMP_bf60_2
rel :JMP_bf38_0
rel :JMP_bf38_0
rel :JMP_bf38_0
rel :JMP_bf38_0
rel :JMP_bf38_0
rel :JMP_bf60_2
rel :JMP_bf38_0

; SUBROUTINE TABLE
LABEL_337:
rel :JMP_bf60_0
rel :JMP_bf60_0
rel :JMP_bf60_2
rel :JMP_bf60_0
rel :JMP_bf60_0
rel :JMP_bf60_0
rel :JMP_bf60_0
rel :JMP_bf60_0
rel :JMP_bf60_2
rel :JMP_bf60_0
data 0xfffff98c
data 0xfffff98c
data 0xfffff9a6
data 0xfffff98c
data 0xfffff98c
data 0xfffff98c
data 0xfffff98c
data 0xfffff98c
data 0xfffff9a6
data 0xfffff98c
ENTRYPOINT_0:
mov 0, var[45][120] ; dest
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x1 ; bentIndex, charOrBentSlot, mode
add 0x6d, stor[8] ; amount, operand
mov 0x1, var[45][stor[8]] ; source, dest
gosub inl[:LABEL_258] ; addr
gosub inl[:LABEL_264] ; addr
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x1 ; bentIndex, charOrBentSlot, mode
add 0x6d, stor[8] ; amount, operand
mov 0, var[45][stor[8]] ; dest
LABEL_287:
wait_cmp &, 0x8, stor[7] ; operator, left, right
LABEL_274:
yield
jmp_cmp !=, 0, var[45][183], inl[:LABEL_274] ; operand, right, addr
jmp_cmp &, 0x1, var[45][245], inl[:LABEL_274] ; operand, left, right, addr
jmp_cmp !&, 0x2, var[45][77], inl[:LABEL_275] ; operand, left, right, addr
jmp inl[:LABEL_276] ; addr
LABEL_275:
gosub inl[:LABEL_282] ; addr
mov stor[0], var[80] ; source, dest
mov var[45][118], stor[8] ; source, dest
call Scus94491BpeSegment::scriptStartSequenceAndChangeVolumeOverTime, 0xa, stor[8] ; fadeTime, volume
gosub inl[:LABEL_288] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_276] ; operand, right, addr
gosub inl[:LABEL_76] ; addr
jmp_cmp !=, 0, stor[31], inl[:LABEL_313] ; operand, right, addr
gosub inl[:LABEL_314] ; addr
yield
yield
gosub inl[:LABEL_316] ; addr
jmp_cmp !&, 0x40, stor[7], inl[:LABEL_317] ; operand, left, right, addr
mov 0xf, stor[30] ; source, dest
jmp inl[:LABEL_318] ; addr
LABEL_317:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
mov var[45][stor[9]], stor[8] ; source, dest
jmp_cmp !&, 0x80, stor[8], inl[:LABEL_313] ; operand, left, right, addr
and 0x7, stor[8] ; right, left
mov inl[:LABEL_320[stor[8]]], stor[30] ; source, dest
jmp_cmp ==, 0, stor[30], inl[:LABEL_313] ; operand, right, addr
gosub inl[:LABEL_321] ; addr
jmp inl[:LABEL_783] ; addr
LABEL_313:
gosub inl[:LABEL_784] ; addr
LABEL_783:
gosub inl[:LABEL_76] ; addr
jmp_cmp ==, 0, stor[31], inl[:LABEL_318] ; operand, right, addr
jmp_cmp ==, 0x2, var[45][242], inl[:LABEL_318] ; operand, left, right, addr
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x1 ; bentIndex, charOrBentSlot, mode
add 0x45, stor[8] ; amount, operand
decr var[45][stor[8]] ; operand
mov var[45][stor[8]], stor[9] ; source, dest
call Bttl_800f::scriptGiveSp, stor[0], 0x0, stor[10] ; bentIndex, amount, total
div 0x64, stor[10] ; amount, operand
jmp_cmp ==, stor[9], stor[10], inl[:LABEL_318] ; operand, left, right, addr
call Bttl_800f::scriptConsumeSp, stor[0], 0x1, 0x64 ; bentIndex, unused, amount
jmp_cmp !=, 0, var[45][stor[8]], inl[:LABEL_318] ; operand, right, addr
gosub inl[:LABEL_277] ; addr
mov stor[0], stor[30] ; source, dest
gosub inl[:LABEL_96] ; addr
and 0xfffffffe, var[45][245] ; right, left
LABEL_318:
gosub inl[:LABEL_319] ; addr
call Bttl_800c::scriptSetBentRotationY, stor[0], 0x400 ; bentIndex, y
LABEL_276:
gosub inl[:LABEL_277] ; addr
gosub inl[:LABEL_279] ; addr
jmp_cmp !=, 0, var[51], inl[:LABEL_280] ; operand, right, addr
jmp_cmp ==, 0, var[53], inl[:LABEL_280] ; operand, right, addr
mov var[53], stor[8] ; source, dest
mov 0, stor[9] ; dest
LABEL_281:
mov var[52][stor[9]], stor[28] ; source, dest
and 0xffffffdf, stor[stor[stor[0], 28], 7] ; right, left
incr stor[9] ; operand
jmp_cmp >, stor[8], stor[9], inl[:LABEL_281] ; operand, left, right, addr
yield
LABEL_280:
and 0xfffffff7, stor[7] ; right, left
gosub inl[:LABEL_282] ; addr
call Bttl_800f::scriptFinishBentTurn, stor[0] ; bentIndex
jmp inl[:LABEL_287] ; addr

; SUBROUTINE
LABEL_316:
yield
jmp_cmp !=, 0, var[45][225], inl[:LABEL_316] ; operand, right, addr
return
LABEL_320:
data 0xf
data 0x11
data 0x12
data 0x0
data 0xf
data 0x0
data 0x0
data 0x0

; SUBROUTINE
LABEL_321:
call Bttl_800c::FUN_800ccec8, 0x0 ; p0
gosub_table stor[30], inl[:LABEL_322 + inl[:LABEL_322 + 0x0]] ; index, table
return

; SUBROUTINE
LABEL_784:
call Bttl_800c::FUN_800ccec8, 0x1 ; p0
LABEL_821:
gosub inl[:LABEL_785] ; addr
gosub inl[:LABEL_76] ; addr
gosub inl[:LABEL_786] ; addr
gosub inl[:LABEL_804] ; addr
gosub inl[:LABEL_816] ; addr
call Bttl_800c::scriptSetUpAndHandleCombatMenu, stor[8], stor[9], stor[30] ; displayableIconsBitset, disabledIconsBitset, selectedAction
yield
gosub_table stor[30], inl[:LABEL_322[:LABEL_322[stor[31]]]] ; index, table
gosub inl[:LABEL_818] ; addr
jmp_cmp !=, 0, var[45][253], inl[:LABEL_821] ; operand, right, addr
call Bttl_800c::FUN_800ccec8, 0x0 ; p0
return

; SUBROUTINE TABLE
LABEL_322:
rel :JMP_c398_0
rel :JMP_c398_1

; SUBROUTINE

; SUBROUTINE TABLE
JMP_c398_0:
rel :JMP_c3a0_0
rel :JMP_c3a0_1
rel :JMP_c400_0
rel :JMP_c3a0_3
rel :JMP_c3a0_4
rel :JMP_c3a0_5
rel :JMP_c3a0_6
rel :JMP_c400_0
rel :JMP_c3a0_3
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_15
rel :JMP_c400_0
rel :JMP_c3a0_17
rel :JMP_c3a0_18
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0

; SUBROUTINE

; SUBROUTINE TABLE
JMP_c398_1:
rel :JMP_c400_0
rel :JMP_c400_1
rel :JMP_c400_2
rel :JMP_c400_3
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_3
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_15
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0
rel :JMP_c400_0

; SUBROUTINE
LABEL_786:
jmp_cmp !=, 0, stor[31], inl[:LABEL_787] ; operand, right, addr
mov 0xf, stor[8] ; source, dest
call Bttl_800f::scriptGiveSp, stor[0], 0x0, stor[9] ; bentIndex, amount, total
jmp_cmp >, 0x64, stor[9], inl[:LABEL_788] ; operand, left, right, addr
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_788] ; operand, right, addr
or 0x10, stor[8] ; right, left
LABEL_788:
mov stor[8], stor[17] ; source, dest
gosub inl[:LABEL_789] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_803] ; operand, right, addr
or 0x80, stor[17] ; right, left
LABEL_803:
mov stor[17], stor[8] ; source, dest
return
LABEL_787:
mov 0x60, stor[8] ; source, dest
gosub inl[:LABEL_76] ; addr
return

; SUBROUTINE
LABEL_816:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[10]][6], stor[10] ; source, dest
or stor[10], stor[9] ; right, left
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[10] ; bentIndex, statIndex, value
jmp_cmp !&, 0x20, stor[10], inl[:LABEL_817] ; operand, left, right, addr
or 0x1, stor[9] ; right, left
LABEL_817:
or var[45][228], stor[9] ; right, left
return

; SUBROUTINE
LABEL_804:
mov 0, stor[9] ; dest
jmp_cmp ==, 0, var[45][243], inl[:LABEL_805] ; operand, right, addr
mov var[36][0], stor[28] ; source, dest
jmp_cmp !=, 0, var[45][242], inl[:LABEL_806] ; operand, right, addr
or 0x1, stor[9] ; right, left
LABEL_812:
or 0x20, stor[stor[stor[0], 28], 7] ; right, left
incr var[45][243] ; operand
LABEL_810:
neg stor[9] ; operand
decr stor[9] ; operand
LABEL_805:
mov var[46][2], stor[10] ; source, dest
jmp_cmp !=, 0, stor[10], inl[:LABEL_807] ; operand, right, addr
or 0x8, stor[9] ; right, left
LABEL_807:
return
LABEL_806:
jmp_cmp ==, 0x1, var[45][242], inl[:LABEL_808] ; operand, left, right, addr
jmp_cmp !=, 0x3, var[45][243], inl[:LABEL_809] ; operand, left, right, addr
or 0x1, stor[9] ; right, left
jmp inl[:LABEL_810] ; addr
LABEL_809:
jmp_cmp !=, 0x5, var[45][243], inl[:LABEL_811] ; operand, left, right, addr
or 0x10, stor[9] ; right, left
jmp inl[:LABEL_812] ; addr
LABEL_811:
jmp_cmp !=, 0x9, var[45][243], inl[:LABEL_813] ; operand, left, right, addr
or 0x10, stor[9] ; right, left
jmp inl[:LABEL_812] ; addr
LABEL_813:
jmp_cmp !=, 0xc, var[45][243], inl[:LABEL_814] ; operand, left, right, addr
or 0x20, stor[9] ; right, left
jmp inl[:LABEL_812] ; addr
LABEL_814:
jmp_cmp !=, 0x10, var[45][243], inl[:LABEL_815] ; operand, left, right, addr
or 0x10, stor[9] ; right, left
jmp inl[:LABEL_812] ; addr
LABEL_815:
or 0x40, stor[9] ; right, left
jmp inl[:LABEL_812] ; addr
LABEL_808:
or 0x4, stor[9] ; right, left
jmp inl[:LABEL_812] ; addr

; SUBROUTINE
LABEL_818:
jmp_cmp ==, 0, var[45][243], inl[:LABEL_819] ; operand, right, addr
jmp_cmp ==, 0, var[45][253], inl[:LABEL_819] ; operand, right, addr
jmp_cmp !=, 0x2, var[45][242], inl[:LABEL_820] ; operand, left, right, addr
jmp_cmp ==, 0x3, var[45][243], inl[:LABEL_819] ; operand, left, right, addr
LABEL_820:
decr var[45][243] ; operand
LABEL_819:
return

; SUBROUTINE
JMP_c400_15:
return

; SUBROUTINE
JMP_c400_0:
return

; SUBROUTINE
JMP_c3a0_0:
mov 0, stor[8] ; dest
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_84] ; addr
call Bttl_800c::scriptSetBentStat, stor[0], 0x1, GUARD ; bentIndex, value, statIndex
jmp_cmp &, 0x2, stor[7], inl[:LABEL_476] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x5 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
LABEL_476:
call Bttl_800c::scriptGetBentStat2, stor[0], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
call Bttl_800c::scriptGetBentStat2, stor[0], MAX_HP, stor[9] ; bentIndex, statIndex, value
mov stor[8], stor[11] ; source, dest
div 0xa, stor[9] ; amount, operand
add stor[9], stor[11] ; amount, operand
call Bttl_800c::scriptGetBentStat2, stor[0], MAX_HP, stor[10] ; bentIndex, statIndex, value
jmp_cmp >=, stor[10], stor[11], inl[:LABEL_477] ; operand, left, right, addr
mov stor[10], stor[11] ; source, dest
mov stor[10], stor[9] ; source, dest
sub stor[8], stor[9] ; amount, operand
LABEL_477:
call Bttl_800f::scriptRenderRecover, stor[0], stor[9], 0x7 ; bentIndex, amount, colourIndex
call Bttl_800c::scriptSetBentRawStat, stor[0], stor[11], CURRENT_HP ; bentIndex, value, statIndex
gosub inl[:LABEL_60] ; addr
gosub inl[:LABEL_66] ; addr
return

; SUBROUTINE
JMP_c400_2:
call Bttl_800f::scriptInitBattleMenu, stor[0], 0x1 ; bentIndex, menuType
LABEL_429:
yield
call Bttl_800f::FUN_800f4600, stor[8], stor[28], stor[29] ; p0, targetBentIndex, itemOrSpellId
jmp_cmp ==, 0, stor[8], inl[:LABEL_429] ; operand, right, addr
jmp_cmp ==, 0xffffffff, stor[8], inl[:LABEL_430] ; operand, left, right, addr
mov 0x2, stor[8] ; source, dest
gosub_table stor[8], inl[:LABEL_346] ; index, table
gosub inl[:LABEL_334] ; addr
call Bttl_800c::FUN_800ccec8, 0x0 ; p0
call Bttl_800c::scriptGetBentPos, stor[0], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
mov var[45][118], stor[8] ; source, dest
mul 0x41, stor[8] ; amount, operand
div 0x64, stor[8] ; amount, operand
call Scus94491BpeSegment::scriptChangeSequenceVolumeOverTime, 0x3c, stor[8] ; fadeTime, volume
gosub inl[:LABEL_431] ; addr
or 0x2, var[45][245] ; right, left
gosub inl[:LABEL_432] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_436] ; operand, right, addr
gosub inl[:LABEL_116] ; addr
LABEL_436:
call Bttl_800e::scriptLoadDeff, stor[29], stor[0], stor[28], 0x0, 0x1000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
mov 0x1, var[45][248] ; source, dest
LABEL_437:
mov var[45][248], stor[8] ; source, dest
yield
jmp_cmp !=, 0x2, var[45][248], inl[:LABEL_437] ; operand, left, right, addr
call Bttl_800e::FUN_800e6db4, 0x2 ; p0
call Bttl_800e::FUN_800e6db4, 0x3 ; p0
call Scus94491BpeSegment::scriptWaitForFilesToLoad ; index
gosub inl[:LABEL_432] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_438] ; operand, right, addr
mov var[45][76], stor[8] ; source, dest
jmp_cmp >, 0, stor[8], inl[:LABEL_439] ; operand, right, addr
mov inl[:LABEL_435[stor[8]]], stor[8] ; source, dest
jmp inl[:LABEL_440] ; addr
LABEL_439:
mov var[47], stor[8] ; source, dest
LABEL_440:
gosub inl[:LABEL_116] ; addr
LABEL_438:
and 0xfffffffd, var[45][245] ; right, left
mov var[45][118], stor[8] ; source, dest
call Scus94491BpeSegment::scriptStartSequenceAndChangeVolumeOverTime, 0x3c, stor[8] ; fadeTime, volume
call Bttl_800c::scriptSetBentPos, stor[0], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
gosub inl[:LABEL_420] ; addr
return
LABEL_430:
gosub inl[:LABEL_428] ; addr
return
data 0x49

; SUBROUTINE
LABEL_432:
mov 0, stor[23] ; dest
gosub inl[:LABEL_114] ; addr
jmp_cmp !=, stor[29], inl[:LABEL_433[stor[8]]], inl[:LABEL_434] ; operand, left, right, addr
jmp_cmp ==, stor[8], var[45][76], inl[:LABEL_434] ; operand, left, right, addr
mov inl[:LABEL_435[stor[8]]], stor[23] ; source, dest
LABEL_434:
mov stor[23], stor[8] ; source, dest
return
LABEL_433:
data 0x3
data 0x8
data 0xd
data 0x13
data 0x17
data 0x8
data 0x1c
data 0x1f
data 0xd
data 0xffffffff

; SUBROUTINE
JMP_c3a0_3:
gosub inl[:LABEL_331] ; addr
call Bttl_800f::scriptGetItemOrSpellAttackTarget, 0x1, stor[28] ; targetMode, targetBentIndex
jmp_cmp >, 0, stor[28], inl[:LABEL_595] ; operand, right, addr
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_334] ; addr
gosub inl[:LABEL_114] ; addr
jmp_cmp ==, 0, inl[:LABEL_596[stor[8]]], inl[:LABEL_597] ; operand, right, addr
call Bttl_800c::scriptGetHitProperty, stor[0], 0x0, 0x6, stor[8] ; bentIndex, hitNum, hitPropertyIndex, value
call Scus94491BpeSegment::scriptLoadCharacterAttackSounds, stor[8] ; charId
LABEL_598:
yield
call Scus94491BpeSegment::scriptGetLoadedSoundFiles, stor[31] ; flags
jmp_cmp &, 0x10000, stor[31], inl[:LABEL_598] ; operand, left, right, addr
LABEL_597:
gosub inl[:LABEL_114] ; addr
gosub_table stor[8], inl[:LABEL_599] ; index, table
call Scus94491BpeSegment::scriptStopSound, 0xa, 0x0, 0x3 ; soundFileIndex, soundIndex, mode
gosub inl[:LABEL_114] ; addr
jmp_cmp ==, 0, inl[:LABEL_596[stor[8]]], inl[:LABEL_782] ; operand, right, addr
call Scus94491BpeSegment::scriptUnloadSoundFile, 0x7 ; soundType
LABEL_782:
call Bttl_800c::scriptSetBentRotationY, stor[0], 0x400 ; bentIndex, y
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_277] ; addr
gosub inl[:LABEL_420] ; addr
return
LABEL_595:
gosub inl[:LABEL_428] ; addr
return

; SUBROUTINE
JMP_c3a0_4:
call Bttl_800f::scriptInitBattleMenu, stor[0], 0x0 ; bentIndex, menuType
LABEL_499:
yield
call Bttl_800f::FUN_800f4600, stor[8], stor[28], stor[29] ; p0, targetBentIndex, itemOrSpellId
jmp_cmp ==, 0, stor[8], inl[:LABEL_499] ; operand, right, addr
jmp_cmp ==, 0xffffffff, stor[8], inl[:LABEL_500] ; operand, left, right, addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
call Bttl_800c::FUN_800ccec8, 0x0 ; p0
gosub inl[:LABEL_501] ; addr
jmp_cmp &, 0x1, var[45][77], inl[:JMP_c3a0_5] ; operand, left, right, addr
return
LABEL_500:
gosub inl[:LABEL_428] ; addr
return

; SUBROUTINE
JMP_c3a0_5:
call Bttl_800c::FUN_800ccec8, 0x0 ; p0
gosub inl[:LABEL_334] ; addr
mov var[46][2], stor[8] ; source, dest
jmp_cmp &, 0x8, var[45][77], inl[:LABEL_453] ; operand, left, right, addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_453] ; operand, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], _151, stor[10] ; bentIndex, statIndex, value
add stor[10], stor[8] ; amount, operand
rand 0x64, stor[9] ; bound, dest
jmp_cmp >, stor[8], stor[9], inl[:LABEL_454] ; operand, left, right, addr
jmp_cmp &, 0x1, var[45][77], inl[:LABEL_454] ; operand, left, right, addr
LABEL_453:
gosub inl[:LABEL_455] ; addr
gosub inl[:LABEL_420] ; addr
return
LABEL_454:
gosub inl[:LABEL_467] ; addr
call Bttl_800c::scriptSetPostBattleAction, 0x5 ; action
yield
return

; SUBROUTINE
JMP_c400_1:
return

; SUBROUTINE
JMP_c3a0_6:
gosub inl[:LABEL_114] ; addr
mov stor[8], var[45][76] ; source, dest
mov 0, stor[8] ; dest
LABEL_488:
call Bttl_800f::scriptGiveSp, var[34][stor[8]], 0x0, stor[9] ; bentIndex, amount, total
mov stor[9], stor[12] ; source, dest
div 0x64, stor[9] ; amount, operand
mov var[34][stor[8]], stor[11] ; source, dest
call Bttl_800c::scriptGetBentSlot, stor[11], stor[10], 0x1 ; bentIndex, charOrBentSlot, mode
add 0x45, stor[10] ; amount, operand
mov stor[9], var[45][stor[10]] ; source, dest
mul 0x64, stor[9] ; amount, operand
sub stor[9], stor[12] ; amount, operand
call Bttl_800f::scriptConsumeSp, stor[11], 0x1, stor[12] ; bentIndex, unused, amount
jmp_cmp !=, var[34][stor[8]], stor[0], inl[:LABEL_487] ; operand, left, right, addr
LABEL_487:
incr stor[8] ; operand
jmp_cmp !=, stor[8], var[35], inl[:LABEL_488] ; operand, left, right, addr
mov 0xc, stor[23] ; source, dest
wait stor[23] ; frames
call Bttl_800c::FUN_800ccec8, 0x0 ; p0
gosub inl[:LABEL_334] ; addr
yield
gosub inl[:LABEL_127] ; addr
mov var[45][118], stor[8] ; source, dest
mul 0x41, stor[8] ; amount, operand
div 0x64, stor[8] ; amount, operand
call Scus94491BpeSegment::scriptChangeSequenceVolumeOverTime, 0x3c, stor[8] ; fadeTime, volume
gosub inl[:LABEL_114] ; addr
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov 0, stor[stor[stor[0], 18], 31] ; dest
mov stor[0], stor[stor[stor[0], 18], 30] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_489] ; scriptIndex, address
mov inl[:LABEL_483[stor[8]]], stor[27] ; source, dest
call Bttl_800e::scriptLoadDeff, stor[27], stor[0], 0x0, 0x0, 0x1000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
call Bttl_800e::FUN_800e6db4, 0x1 ; p0
mov 0x1, stor[stor[stor[0], 18], 31] ; source, dest
call Bttl_800e::FUN_800e6db4, 0x2 ; p0
call Bttl_800e::FUN_800e6db4, 0x3 ; p0
gosub inl[:LABEL_114] ; addr
call Bttl_800e::FUN_800ee3c0, stor[0], inl[:LABEL_106[stor[8]]] ; bentIndex, modelPartAttachmentIndex
call Scus94491BpeSegment::scriptWaitForFilesToLoad ; index
call Scus94491BpeSegment::scriptLoadCharAttackSounds, var[34][0], 0x0 ; bentIndex, type
LABEL_496:
yield
call Scus94491BpeSegment::scriptGetLoadedSoundFiles, stor[31] ; flags
jmp_cmp &, 0x8, stor[31], inl[:LABEL_496] ; operand, left, right, addr
call Scus94491BpeSegment::scriptLoadCharAttackSounds, var[34][1], 0x0 ; bentIndex, type
LABEL_497:
yield
call Scus94491BpeSegment::scriptGetLoadedSoundFiles, stor[31] ; flags
jmp_cmp &, 0x8, stor[31], inl[:LABEL_497] ; operand, left, right, addr
call Scus94491BpeSegment::scriptLoadCharAttackSounds, var[34][2], 0x0 ; bentIndex, type
LABEL_498:
yield
call Scus94491BpeSegment::scriptGetLoadedSoundFiles, stor[31] ; flags
jmp_cmp &, 0x8, stor[31], inl[:LABEL_498] ; operand, left, right, addr
gosub inl[:LABEL_114] ; addr
call Bttl_800f::scriptSetDragoonSpaceElementIndex, stor[8] ; charId
mov inl[:LABEL_435[stor[8]]], stor[8] ; source, dest
mov stor[8], var[45][187] ; source, dest
gosub inl[:LABEL_116] ; addr
mov var[45][118], stor[8] ; source, dest
call Scus94491BpeSegment::scriptStartSequenceAndChangeVolumeOverTime, 0x3c, stor[8] ; fadeTime, volume
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
call Bttl_800c::FUN_800ccec8, 0x1 ; p0
gosub inl[:LABEL_428] ; addr
gosub inl[:LABEL_420] ; addr
return

; FORK RE-ENTRY
LABEL_489:
yield
jmp_cmp ==, 0, stor[31], inl[:LABEL_489] ; operand, right, addr
or 0x4, var[45][245] ; right, left
mov var[34][0], stor[29] ; source, dest
jmp_cmp !=, stor[29], stor[30], inl[:LABEL_490] ; operand, left, right, addr
mov var[34][1], stor[29] ; source, dest
LABEL_490:
gosub inl[:LABEL_491] ; addr
mov var[34][2], stor[29] ; source, dest
jmp_cmp !=, stor[29], stor[30], inl[:LABEL_495] ; operand, left, right, addr
mov var[34][1], stor[29] ; source, dest
LABEL_495:
gosub inl[:LABEL_491] ; addr
and 0xfffffffb, var[45][245] ; right, left
yield
deallocate

; SUBROUTINE
LABEL_491:
call Bttl_800c::scriptSetBentDeadAndDropLoot, stor[29], 0x0 ; bentIndex, dead
mov stor[29], stor[28] ; source, dest
gosub inl[:LABEL_492] ; addr
call Bttl_800e::scriptDisableBentShadow, stor[29] ; bentIndex
call Bttl_800c::FUN_800ccba4, stor[29], 0x1 ; bentIndex, isDragoon
call Scus94491BpeSegment::scriptWaitForFilesToLoad ; index
gosub inl[:LABEL_493] ; addr
call Bttl_800e::FUN_800ee3c0, stor[29], inl[:LABEL_106[stor[23]]] ; bentIndex, modelPartAttachmentIndex
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[29], 0x0 ; bentIndex, animIndex
call Bttl_800c::FUN_800cb618, stor[29], 0x0 ; bentIndex, set
call Bttl_800c::scriptGetBentStat, stor[29], GUARD, stor[23] ; bentIndex, statIndex, value
and 0xfffffffe, stor[23] ; right, left
call Bttl_800c::scriptSetBentStat, stor[29], stor[23], GUARD ; bentIndex, value, statIndex
return

; SUBROUTINE
JMP_c3a0_1:
call Bttl_800f::scriptGiveSp, stor[0], 0x0, stor[9] ; bentIndex, amount, total
mov stor[9], stor[10] ; source, dest
div 0x64, stor[9] ; amount, operand
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x1 ; bentIndex, charOrBentSlot, mode
add 0x45, stor[8] ; amount, operand
mov stor[9], var[45][stor[8]] ; source, dest
mul 0x64, stor[9] ; amount, operand
sub stor[9], stor[10] ; amount, operand
call Bttl_800f::scriptConsumeSp, stor[0], 0x1, stor[10] ; bentIndex, unused, amount
mov 0xc, stor[23] ; source, dest
wait stor[23] ; frames
call Bttl_800c::FUN_800ccec8, 0x0 ; p0
gosub inl[:LABEL_334] ; addr
yield
gosub inl[:LABEL_127] ; addr
mov var[45][118], stor[8] ; source, dest
mul 0x41, stor[8] ; amount, operand
div 0x64, stor[8] ; amount, operand
call Scus94491BpeSegment::scriptChangeSequenceVolumeOverTime, 0x3c, stor[8] ; fadeTime, volume
gosub inl[:LABEL_114] ; addr
gosub inl[:LABEL_478] ; addr
jmp_cmp !=, 0, stor[31], inl[:LABEL_482] ; operand, right, addr
mov inl[:LABEL_483[stor[8]]], stor[27] ; source, dest
call Bttl_800e::FUN_800e6fb4, stor[27], stor[0], 0x0, stor[9] ; flagsAndIndex, bentIndex, p2, scriptEntrypoint
jmp inl[:LABEL_484] ; addr
LABEL_482:
mov 0x0, stor[19] ; source, dest
call Bttl_800e::FUN_800e6fb4, 0x21, stor[0], 0x0, 0x0 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint
LABEL_484:
call Scus94491BpeSegment::scriptWaitForFilesToLoad ; index
mov var[45][118], stor[8] ; source, dest
call Scus94491BpeSegment::scriptStartSequenceAndChangeVolumeOverTime, 0x3c, stor[8] ; fadeTime, volume
call Scus94491BpeSegment::scriptLoadCharAttackSounds, stor[0], 0x0 ; bentIndex, type
LABEL_485:
yield
call Scus94491BpeSegment::scriptGetLoadedSoundFiles, stor[31] ; flags
jmp_cmp &, 0x8, stor[31], inl[:LABEL_485] ; operand, left, right, addr
call Bttl_800c::FUN_800ccec8, 0x1 ; p0
jmp_cmp ==, 0x2, var[45][242], inl[:LABEL_486] ; operand, left, right, addr
gosub inl[:LABEL_428] ; addr
gosub inl[:LABEL_420] ; addr
LABEL_486:
return

; SUBROUTINE
LABEL_789:
jmp_cmp !=, 0x3, var[35], inl[:LABEL_790] ; operand, left, right, addr
mov 0, stor[8] ; dest
mov 0, stor[11] ; dest
LABEL_792:
mov var[34][stor[8]], stor[28] ; source, dest
call Bttl_800c::scriptGetBentStat, stor[28], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_791] ; operand, left, right, addr
jmp_cmp &, 0x1, stor[9], inl[:LABEL_791] ; operand, left, right, addr
incr stor[11] ; operand
LABEL_791:
incr stor[8] ; operand
jmp_cmp !=, stor[8], var[35], inl[:LABEL_792] ; operand, left, right, addr
jmp_cmp !=, 0, stor[11], inl[:LABEL_790] ; operand, right, addr
mov 0, stor[8] ; dest
mov 0, stor[10] ; dest
LABEL_794:
call Bttl_800f::scriptGiveSp, var[34][stor[8]], 0x0, stor[9] ; bentIndex, amount, total
mov var[34][stor[8]], stor[11] ; source, dest
call Bttl_800c::scriptGetBentStat, stor[11], DLEVEL, stor[11] ; bentIndex, statIndex, value
jmp_cmp ==, 0, stor[11], inl[:LABEL_790] ; operand, right, addr
mul 0x64, stor[11] ; amount, operand
jmp_cmp <=, stor[11], stor[9], inl[:LABEL_793] ; operand, left, right, addr
incr stor[10] ; operand
LABEL_793:
incr stor[8] ; operand
jmp_cmp !=, stor[8], var[35], inl[:LABEL_794] ; operand, left, right, addr
jmp_cmp !=, 0, stor[10], inl[:LABEL_790] ; operand, right, addr
mov 0, stor[8] ; dest
mov 0, stor[11] ; dest
LABEL_798:
mov var[34][stor[8]], stor[28] ; source, dest
gosub inl[:LABEL_795] ; addr
jmp_cmp ==, 0, stor[31], inl[:LABEL_797] ; operand, right, addr
incr stor[11] ; operand
LABEL_797:
incr stor[8] ; operand
jmp_cmp !=, stor[8], var[35], inl[:LABEL_798] ; operand, left, right, addr
jmp_cmp !=, 0, stor[11], inl[:LABEL_790] ; operand, right, addr
mov 0, stor[8] ; dest
mov 0, stor[11] ; dest
LABEL_802:
mov var[34][stor[8]], stor[28] ; source, dest
gosub inl[:LABEL_799] ; addr
jmp_cmp ==, 0, stor[31], inl[:LABEL_801] ; operand, right, addr
incr stor[11] ; operand
LABEL_801:
incr stor[8] ; operand
jmp_cmp !=, stor[8], var[35], inl[:LABEL_802] ; operand, left, right, addr
jmp_cmp !=, 0, stor[11], inl[:LABEL_790] ; operand, right, addr
mov 0x1, stor[8] ; source, dest
return
LABEL_790:
mov 0, stor[8] ; dest
return

; SUBROUTINE
LABEL_116:
gosub inl[:LABEL_117] ; addr
gosub inl[:LABEL_119] ; addr
call Bttl_800c::scriptStopRenderingStage ; index
call Bttl_800c::scriptLoadStage, stor[8] ; stageIndex
call Scus94491BpeSegment::scriptWaitForFilesToLoad ; index
gosub inl[:LABEL_121] ; addr
gosub inl[:LABEL_123] ; addr
gosub inl[:LABEL_124] ; addr
return

; SUBROUTINE
LABEL_121:
jmp_cmp >, 0x47, stor[8], inl[:LABEL_122] ; operand, left, right, addr
jmp_cmp <, 0x4e, stor[8], inl[:LABEL_122] ; operand, left, right, addr
mov stor[8], stor[9] ; source, dest
sub 0x47, stor[9] ; amount, operand
call Bttl_800e::FUN_800e59d8, 0xfffffffd, stor[9] ; mode, data
return
LABEL_122:
call Bttl_800e::scriptApplyStageAmbiance ; index
return

; SUBROUTINE
LABEL_117:
mov 0x10, stor[23] ; source, dest
mov 0x80, stor[22] ; source, dest
LABEL_118:
decr stor[23] ; operand
sub 0x8, stor[22] ; amount, operand
call Bttl_800e::scriptApplyScreenDarkening, stor[23] ; intensity
mov stor[22], var[109] ; source, dest
yield
jmp_cmp !=, 0, stor[23], inl[:LABEL_118] ; operand, right, addr
return

; SUBROUTINE
LABEL_124:
mov 0, stor[23] ; dest
mov 0, stor[22] ; dest
LABEL_125:
incr stor[23] ; operand
add 0x8, stor[22] ; amount, operand
call Bttl_800e::scriptApplyScreenDarkening, stor[23] ; intensity
mov stor[22], var[109] ; source, dest
yield
jmp_cmp !=, 0x10, stor[23], inl[:LABEL_125] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_119:
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_120] ; scriptIndex, address
return

; FORK RE-ENTRY
LABEL_120:
call Bttl_800e::scriptApplyScreenDarkening, 0x0 ; intensity
mov 0, var[109] ; dest
yield
jmp inl[:LABEL_120] ; addr

; SUBROUTINE
LABEL_123:
deallocate_other stor[18] ; index
return

; SUBROUTINE
LABEL_478:
mov 0, stor[9] ; dest
call Scus94491BpeSegment::scriptReadGlobalFlag2, inl[:LABEL_479[stor[8]]], stor[31] ; flag, value
jmp_cmp ==, 0, stor[31], inl[:LABEL_480] ; operand, right, addr
jmp_cmp !=, 0, var[38], inl[:LABEL_481] ; operand, right, addr
mov 0, stor[31] ; dest
jmp_cmp !=, 0x9, stor[8], inl[:LABEL_480] ; operand, left, right, addr
mov 0x1, stor[9] ; source, dest
LABEL_480:
call Scus94491BpeSegment::scriptSetGlobalFlag2, inl[:LABEL_479[stor[8]]], 0x1 ; flag, value
LABEL_481:
return
LABEL_479:
data 0x1b8
data 0x1ba
data 0x1b9
data 0x1bb
data 0x1bc
data 0x1bd
data 0x1be
data 0x1bf
data 0x1c0
data 0x1c1

; SUBROUTINE
LABEL_96:
yield
jmp_cmp ==, 0, var[53], inl[:LABEL_97] ; operand, right, addr
jmp_cmp &, 0x1, var[45][245], inl[:LABEL_96] ; operand, left, right, addr
or 0x1, var[45][245] ; right, left
jmp_cmp !&, 0x2, stor[stor[stor[0], 30], 7], inl[:LABEL_97] ; operand, left, right, addr
call Bttl_800e::FUN_800e6fb4, 0x21, stor[30], stor[30], 0x1 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint
call Scus94491BpeSegment::scriptWaitForFilesToLoad ; index
mov stor[30], stor[8] ; source, dest
gosub inl[:LABEL_98] ; addr
call Scus94491BpeSegment::scriptLoadCharAttackSounds, stor[30], 0x1 ; bentIndex, type
LABEL_107:
yield
call Scus94491BpeSegment::scriptGetLoadedSoundFiles, stor[31] ; flags
jmp_cmp &, 0x8, stor[31], inl[:LABEL_107] ; operand, left, right, addr
mov stor[30], stor[28] ; source, dest
gosub inl[:LABEL_108] ; addr
yield
yield
gosub inl[:LABEL_114] ; addr
jmp_cmp !=, stor[8], var[45][76], inl[:LABEL_97] ; operand, left, right, addr
mov var[47], stor[8] ; source, dest
mov stor[8], var[45][187] ; source, dest
gosub inl[:LABEL_116] ; addr
call Bttl_800f::scriptSetDragoonSpaceElementIndex, 0xffffffff ; charId
mov 0xffffffff, var[45][76] ; source, dest
LABEL_97:
return
LABEL_483:
data 0x20
data 0x22
data 0x24
data 0x26
data 0x28
data 0x2f
data 0x2a
data 0x2c
data 0x40
data 0x2e
LABEL_435:
data 0x47
data 0x48
data 0x4b
data 0x4a
data 0x4d
data 0x48
data 0x49
data 0x4c
data 0x4b
data 0x4e

; SUBROUTINE
JMP_c3a0_18:
rand 0x64, stor[8] ; bound, dest
jmp_cmp >, 0x14, stor[8], inl[:JMP_c3a0_0] ; operand, left, right, addr
jmp_cmp >, 0x3c, stor[8], inl[:JMP_c3a0_5] ; operand, left, right, addr
jmp inl[:JMP_c3a0_17] ; addr
data 0x49

; SUBROUTINE
JMP_c3a0_17:
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
rand var[51], stor[8] ; bound, dest
mov var[50][stor[8]], stor[28] ; source, dest
jmp_cmp ==, stor[0], stor[28], inl[:LABEL_449] ; operand, left, right, addr
call Bttl_800c::scriptBentLookAtBent, stor[0], stor[28] ; bentIndexToTurn, bentIndexTarget
LABEL_449:
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
call Bttl_800c::scriptSetInterpolationEnabled, stor[0], 0x0 ; bentIndex, set
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x10 ; bentIndex, animIndex
gosub inl[:LABEL_60] ; addr
call Bttl_800c::scriptSetInterpolationEnabled, stor[0], 0x1 ; bentIndex, set
mov stor[0], stor[30] ; source, dest
call Bttl_800c::scriptGetBentStat2, stor[0], MAX_HP, stor[8] ; bentIndex, statIndex, value
div 0x5, stor[8] ; amount, operand
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
jmp_cmp ==, stor[0], stor[28], inl[:LABEL_450] ; operand, left, right, addr
fork_reenter stor[28], 0x2, stor[8] ; index, entrypoint, p2
call Bttl_800c::scriptSetBentRotationY, stor[0], 0x400 ; bentIndex, y
gosub inl[:LABEL_66] ; addr
gosub inl[:LABEL_277] ; addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
jmp_cmp !&, 0x400, var[128 + stor[8]][7], inl[:LABEL_451] ; operand, left, right, addr
fork_reenter stor[28], 0x4, 0x0 ; index, entrypoint, p2
gosub inl[:LABEL_277] ; addr
LABEL_451:
jmp inl[:LABEL_452] ; addr
LABEL_450:
mov stor[8], stor[32] ; source, dest
gosub inl[:LABEL_33] ; addr
LABEL_452:
call Bttl_800c::scriptSetBentRotationY, stor[0], 0x400 ; bentIndex, y
gosub inl[:LABEL_66] ; addr
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
JMP_c400_3:
mov 0, var[45][217] ; dest
mov 0, var[45][216] ; dest
gosub inl[:LABEL_114] ; addr
jmp_cmp !=, stor[8], var[45][76], inl[:LABEL_330] ; operand, left, right, addr
mov 0x1, var[45][216] ; source, dest
LABEL_330:
gosub inl[:LABEL_331] ; addr
call Bttl_800f::scriptGetItemOrSpellAttackTarget, 0x1, stor[28] ; targetMode, targetBentIndex
jmp_cmp >, 0, stor[28], inl[:LABEL_333] ; operand, right, addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_334] ; addr
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
add 0xbd, stor[8] ; amount, operand
mov var[45][stor[8]], var[45][227] ; source, dest
mov 0, var[45][stor[8]] ; dest
gosub inl[:LABEL_114] ; addr
gosub_table stor[8], inl[:LABEL_337] ; index, table
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
add 0xbd, stor[8] ; amount, operand
mov var[45][227], var[45][stor[8]] ; source, dest
call Bttl_800c::scriptSetBentRotationY, stor[0], 0x400 ; bentIndex, y
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_420] ; addr
return
LABEL_333:
gosub inl[:LABEL_428] ; addr
return
LABEL_596:
data 0x7
data 0xd
data 0x0
data 0x12
data 0x23
data 0x29
data 0x1c
data 0x16
data 0x0
data 0x7
ENTRYPOINT_1:
consume
ENTRYPOINT_18:
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xff, stor[8] ; right, left
jmp_cmp &, 0x1, stor[8], inl[:LABEL_825] ; operand, left, right, addr
jmp_cmp !&, 0x40, stor[7], inl[:LABEL_826] ; operand, left, right, addr
call Bttl_800c::scriptSetBentDeadAndDropLoot, stor[0], 0x0 ; bentIndex, dead
gosub inl[:LABEL_140] ; addr
LABEL_829:
gosub inl[:LABEL_108] ; addr
LABEL_828:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0, var[128 + stor[8]][6] ; dest
consume
LABEL_826:
jmp_cmp !=, 0, stor[8], inl[:LABEL_827] ; operand, right, addr
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
jmp_cmp ==, 0, var[128 + stor[8]][6], inl[:LABEL_828] ; operand, right, addr
LABEL_827:
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_492] ; addr
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[0], stor[stor[stor[0], 18], 28] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_575] ; scriptIndex, address
jmp inl[:LABEL_829] ; addr
LABEL_825:
call Bttl_800c::scriptSetBentDeadAndDropLoot, stor[0], 0x0 ; bentIndex, dead
gosub inl[:LABEL_140] ; addr
jmp inl[:LABEL_827] ; addr
ENTRYPOINT_21:
return

; FORK RE-ENTRY
LABEL_575:
gosub inl[:LABEL_203] ; addr
gosub inl[:LABEL_204] ; addr
deallocate

; SUBROUTINE
LABEL_140:
call Bttl_800c::scriptGetBentStat2, stor[0], MAX_HP, stor[8] ; bentIndex, statIndex, value
shr 0x1, stor[8] ; right, left
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_141] ; addr
return
ENTRYPOINT_19:
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xff, stor[8] ; right, left
jmp_cmp !=, 0, stor[8], inl[:LABEL_822] ; operand, right, addr
jmp_cmp &, 0x40, stor[7], inl[:LABEL_823] ; operand, left, right, addr
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
jmp_cmp ==, 0, var[128 + stor[8]][6], inl[:LABEL_823] ; operand, right, addr
mov 0, stor[8] ; dest
LABEL_822:
mov stor[0], stor[28] ; source, dest
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0x0 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentDead, stor[28], 0x0 ; bentIndex, dead
jmp_cmp !&, 0x1, stor[8], inl[:LABEL_824] ; operand, left, right, addr
gosub inl[:LABEL_140] ; addr
LABEL_824:
gosub inl[:LABEL_492] ; addr
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[0], stor[stor[stor[0], 18], 28] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_575] ; scriptIndex, address
gosub inl[:LABEL_66] ; addr
LABEL_823:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0, var[128 + stor[8]][6] ; dest
consume
ENTRYPOINT_2:
gosub inl[:LABEL_32] ; addr
gosub inl[:LABEL_33] ; addr
gosub inl[:LABEL_150] ; addr
gosub inl[:LABEL_151] ; addr
consume

; SUBROUTINE
LABEL_33:
jmp_cmp &, 0x40, stor[7], inl[:LABEL_34] ; operand, left, right, addr
gosub inl[:LABEL_35] ; addr
gosub inl[:LABEL_40] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_49] ; operand, right, addr
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x14, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
decr stor[8] ; operand
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_50] ; addr
gosub inl[:LABEL_54] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_57] ; operand, right, addr
jmp_cmp &, 0x2, stor[7], inl[:LABEL_57] ; operand, left, right, addr
gosub inl[:LABEL_41] ; addr
jmp_cmp &, stor[9], var[45][188], inl[:LABEL_57] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x5 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
LABEL_57:
mov 0x5, stor[23] ; source, dest
gosub inl[:LABEL_58] ; addr
mov 0x18, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_60] ; addr
jmp inl[:LABEL_61] ; addr
LABEL_49:
call Bttl_800c::scriptGetBentStat, stor[0], GUARD, stor[8] ; bentIndex, statIndex, value
jmp_cmp ==, 0, stor[8], inl[:LABEL_146] ; operand, right, addr
call Scus94491BpeSegment::scriptPlayBentSound, 0x1, stor[0], 0x6, 0x1, 0x0, 0x0, 0x0 ; type, bentIndex, soundIndex, a3, a4, initialDelay, repeatDelay
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_147] ; addr
gosub inl[:LABEL_54] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_148] ; operand, right, addr
jmp_cmp &, 0x2, stor[7], inl[:LABEL_148] ; operand, left, right, addr
gosub inl[:LABEL_41] ; addr
jmp_cmp &, stor[9], var[45][188], inl[:LABEL_148] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x5 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
LABEL_148:
mov 0x5, stor[23] ; source, dest
gosub inl[:LABEL_58] ; addr
mov 0x18, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_60] ; addr
jmp inl[:LABEL_61] ; addr
LABEL_146:
jmp_cmp >=, 0, stor[32], inl[:LABEL_149] ; operand, right, addr
gosub inl[:LABEL_54] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_149] ; operand, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x1 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
LABEL_149:
mov 0x4, stor[23] ; source, dest
gosub inl[:LABEL_58] ; addr
mov 0x10, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_60] ; addr
LABEL_61:
gosub inl[:LABEL_62] ; addr
call Bttl_800c::scriptGetBentStat2, stor[0], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
jmp_cmp >=, 0, stor[8], inl[:LABEL_65] ; operand, right, addr
gosub inl[:LABEL_66] ; addr
jmp_cmp >, 0, stor[32], inl[:LABEL_34] ; operand, right, addr
gosub inl[:LABEL_72] ; addr
gosub inl[:LABEL_74] ; addr
LABEL_34:
mov 0, var[45][188] ; dest
return

; SUBROUTINE
LABEL_43:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
jmp_cmp ==, 0x3, var[128 + stor[8]][0], inl[:LABEL_44] ; operand, left, right, addr
jmp_cmp ==, 0x2, var[128 + stor[8]][0], inl[:LABEL_44] ; operand, left, right, addr
mov var[128 + stor[8]][5], stor[9] ; source, dest
call Bttl_800c::scriptSetBentStat, stor[0], stor[9], SPELL_ID ; bentIndex, value, statIndex
call Bttl_800f::scriptSetTempSpellStats, stor[0] ; bentIndex
call Bttl_800c::scriptGetBentStat, stor[0], SPELL_TARGET_TYPE, stor[9] ; bentIndex, statIndex, value
mov 0, stor[8] ; dest
jmp_cmp !&, 0x80, stor[9], inl[:LABEL_45] ; operand, left, right, addr
LABEL_44:
mov 0x1, stor[8] ; source, dest
LABEL_45:
return

; SUBROUTINE
LABEL_150:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0xffffffff, var[128 + stor[8]][0] ; source, dest
mov 0x20, var[128 + stor[8]][5] ; source, dest
return

; SUBROUTINE
LABEL_58:
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[32], stor[stor[stor[0], 18], 8] ; source, dest
mov stor[23], stor[stor[stor[0], 18], 23] ; source, dest
mov stor[0], stor[stor[stor[0], 18], 28] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_59] ; scriptIndex, address
return

; FORK RE-ENTRY
LABEL_59:
wait stor[23] ; frames
call Bttl_800c::scriptRenderDamage, stor[28], stor[8] ; bentIndex, damage
deallocate

; SUBROUTINE
LABEL_62:
mov stor[32], var[45][224] ; source, dest
jmp_cmp >=, 0, stor[32], inl[:LABEL_63] ; operand, right, addr
call Bttl_800c::scriptGetBentStat2, stor[0], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
sub stor[32], stor[8] ; amount, operand
jmp_cmp <=, 0, stor[8], inl[:LABEL_64] ; operand, right, addr
mov 0, stor[8] ; dest
LABEL_64:
call Bttl_800c::scriptSetBentRawStat, stor[0], stor[8], CURRENT_HP ; bentIndex, value, statIndex
LABEL_63:
return

; SUBROUTINE
LABEL_35:
jmp_cmp >=, 0, stor[32], inl[:LABEL_36] ; operand, right, addr
jmp_cmp &, stor[9], var[45][188], inl[:LABEL_36] ; operand, left, right, addr
gosub inl[:LABEL_37] ; addr
gosub inl[:LABEL_40] ; addr
jmp_cmp ==, 0, stor[8], inl[:LABEL_47] ; operand, right, addr
mov 0, stor[32] ; dest
return
LABEL_47:
call Bttl_800c::scriptGetBentStat, stor[0], GUARD, stor[8] ; bentIndex, statIndex, value
jmp_cmp ==, 0, stor[8], inl[:LABEL_36] ; operand, right, addr
shr 0x1, stor[32] ; right, left
LABEL_36:
jmp_cmp >=, 0x3b9ac9ff, stor[32], inl[:LABEL_48] ; operand, left, right, addr
mov 0x3b9ac9ff, stor[32] ; source, dest
LABEL_48:
return

; SUBROUTINE
LABEL_40:
gosub inl[:LABEL_41] ; addr
jmp_cmp &, stor[9], var[45][188], inl[:LABEL_42] ; operand, left, right, addr
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[8]][7], stor[13] ; source, dest
and 0xf, stor[13] ; right, left
jmp_cmp ==, 0, stor[13], inl[:LABEL_42] ; operand, right, addr
gosub inl[:LABEL_43] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_46] ; operand, right, addr
and 0x3, stor[13] ; right, left
jmp_cmp ==, 0, stor[13], inl[:LABEL_42] ; operand, right, addr
mov 0x1, stor[8] ; source, dest
return
LABEL_46:
and 0xc, stor[13] ; right, left
jmp_cmp ==, 0, stor[13], inl[:LABEL_42] ; operand, right, addr
mov 0x2, stor[8] ; source, dest
return
LABEL_42:
mov 0, stor[8] ; dest
return

; SUBROUTINE
LABEL_37:
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp !&, 0x8, stor[8], inl[:LABEL_38] ; operand, left, right, addr
shl 0x1, stor[32] ; right, left
LABEL_38:
jmp_cmp !&, 0x2, stor[7], inl[:LABEL_39] ; operand, left, right, addr
jmp_cmp !&, 0x1, var[45][244], inl[:LABEL_39] ; operand, left, right, addr
mul 0xa, stor[32] ; amount, operand
LABEL_39:
return
ENTRYPOINT_3:
gosub inl[:LABEL_32] ; addr
gosub inl[:LABEL_770] ; addr
gosub inl[:LABEL_150] ; addr
gosub inl[:LABEL_151] ; addr
consume

; SUBROUTINE
LABEL_770:
jmp_cmp &, 0x40, stor[7], inl[:LABEL_771] ; operand, left, right, addr
gosub inl[:LABEL_35] ; addr
mov 0xa, stor[23] ; source, dest
gosub inl[:LABEL_58] ; addr
jmp_cmp !=, 0, var[45][243], inl[:LABEL_772] ; operand, right, addr
gosub inl[:LABEL_62] ; addr
LABEL_772:
call Bttl_800c::scriptGetBentStat2, stor[0], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
jmp_cmp >=, 0, stor[8], inl[:LABEL_65] ; operand, right, addr
jmp_cmp >, 0, stor[32], inl[:LABEL_771] ; operand, right, addr
gosub inl[:LABEL_72] ; addr
gosub inl[:LABEL_74] ; addr
LABEL_771:
mov 0, var[45][188] ; dest
return
ENTRYPOINT_4:
gosub inl[:LABEL_32] ; addr
gosub inl[:LABEL_65] ; addr
gosub inl[:LABEL_150] ; addr
gosub inl[:LABEL_151] ; addr
consume

; SUBROUTINE
LABEL_65:
gosub inl[:LABEL_76] ; addr
jmp_cmp ==, 0, stor[31], inl[:LABEL_94] ; operand, right, addr
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
jmp_cmp &, 0x400, var[128 + stor[8]][7], inl[:LABEL_95] ; operand, left, right, addr
or 0x400, var[128 + stor[8]][7] ; right, left
gosub inl[:LABEL_66] ; addr
return
LABEL_95:
and 0xfffffbff, var[128 + stor[8]][7] ; right, left
mov stor[0], stor[30] ; source, dest
gosub inl[:LABEL_96] ; addr
LABEL_94:
call Bttl_800c::FUN_800cb9b0, stor[0], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xe, stor[8], inl[:LABEL_126] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0xe ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
gosub inl[:LABEL_60] ; addr
LABEL_126:
gosub inl[:LABEL_127] ; addr
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0, var[128 + stor[8]][6] ; dest
gosub inl[:LABEL_128] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_144] ; operand, right, addr
call Bttl_800c::scriptSetBentRawStat, stor[0], 0x0, CURRENT_HP ; bentIndex, value, statIndex
call Bttl_800c::scriptSetBentDeadAndDropLoot, stor[0], 0x1 ; bentIndex, dead
LABEL_144:
jmp_cmp !&, 0x1, var[45][245], inl[:LABEL_145] ; operand, left, right, addr
and 0xfffffffe, var[45][245] ; right, left
LABEL_145:
return
ENTRYPOINT_20:
jmp inl[:ENTRYPOINT_2] ; addr
ENTRYPOINT_6:
ENTRYPOINT_7:
ENTRYPOINT_8:
ENTRYPOINT_9:
ENTRYPOINT_12:
ENTRYPOINT_13:
ENTRYPOINT_14:
ENTRYPOINT_15:
ENTRYPOINT_22:
ENTRYPOINT_23:
ENTRYPOINT_24:
ENTRYPOINT_25:
ENTRYPOINT_26:
ENTRYPOINT_27:
ENTRYPOINT_28:
ENTRYPOINT_29:
ENTRYPOINT_30:
ENTRYPOINT_31:
consume
ENTRYPOINT_5:
consume

; SUBROUTINE
LABEL_282:
jmp_cmp !=, 0x1, var[57], inl[:LABEL_283] ; operand, left, right, addr
gosub inl[:LABEL_284] ; addr
jmp_cmp &, 0x40, stor[7], inl[:LABEL_286] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0xf ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
gosub inl[:LABEL_60] ; addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x1f ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x1 ; bentIndex, loop
LABEL_286:
yield
jmp inl[:LABEL_286] ; addr
LABEL_283:
mov 0, stor[8] ; dest
return

; SUBROUTINE
LABEL_76:
mov 0, stor[31] ; dest
jmp_cmp !&, 0x2, stor[7], inl[:LABEL_77] ; operand, left, right, addr
mov 0x1, stor[31] ; source, dest
LABEL_77:
return

; SUBROUTINE
LABEL_795:
mov 0, stor[31] ; dest
jmp_cmp !&, 0x2, stor[stor[stor[0], 28], 7], inl[:LABEL_796] ; operand, left, right, addr
mov 0x1, stor[31] ; source, dest
LABEL_796:
return

; SUBROUTINE
LABEL_258:
yield
jmp_cmp !&, 0x8, var[58], inl[:LABEL_258] ; operand, left, right, addr
call Bttl_800f::scriptSetDragoonSpaceElementIndex, 0xffffffff ; charId
mov 0, var[45][246] ; dest
mov 0, var[45][68] ; dest
mov 0, var[45][245] ; dest
mov 0, var[45][77] ; dest
mov 0, var[45][188] ; dest
mov 0, var[45][183] ; dest
mov 0, var[45][225] ; dest
mov 0, var[45][219] ; dest
mov 0, var[45][220] ; dest
mov 0, var[45][221] ; dest
mov 0, var[45][222] ; dest
mov 0, var[45][223] ; dest
mov 0xffffffff, var[45][76] ; source, dest
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x1 ; bentIndex, charOrBentSlot, mode
mov stor[8], stor[9] ; source, dest
mov stor[8], stor[10] ; source, dest
mov stor[8], stor[11] ; source, dest
add 0x45, stor[8] ; amount, operand
add 0x5a, stor[9] ; amount, operand
add 0x73, stor[10] ; amount, operand
add 0xb8, stor[11] ; amount, operand
mov 0, var[45][stor[8]] ; dest
mov 0, var[45][stor[9]] ; dest
mov 0, var[45][stor[10]] ; dest
mov 0xffffffff, var[45][stor[11]] ; source, dest
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov stor[8], stor[9] ; source, dest
mov 0x20, var[128 + stor[8]][5] ; source, dest
mov 0, var[128 + stor[8]][7] ; dest
mov 0, var[128 + stor[8]][6] ; dest
mov 0xffffffff, var[128 + stor[8]][4] ; source, dest
add 0x81, stor[8] ; amount, operand
mov 0, var[45][stor[8]] ; dest
add 0xbd, stor[9] ; amount, operand
mov 0, var[45][stor[9]] ; dest
gosub inl[:LABEL_259] ; addr
mov var[47], stor[8] ; source, dest
mov stor[8], var[45][187] ; source, dest
call Bttl_800c::scriptSetBentRotationY, stor[0], 0x400 ; bentIndex, y
gosub inl[:LABEL_114] ; addr
call Bttl_800e::FUN_800ee3c0, stor[0], inl[:LABEL_104[stor[8]]] ; bentIndex, modelPartAttachmentIndex
gosub inl[:LABEL_66] ; addr
LABEL_263:
yield
jmp_cmp !&, 0x10, var[58], inl[:LABEL_263] ; operand, left, right, addr
call Scus94491BpeSegment::scriptGetSequenceVolume, stor[8] ; volume
mov stor[8], var[45][118] ; source, dest
return

; SUBROUTINE
LABEL_66:
jmp_cmp &, 0x2, stor[7], inl[:LABEL_67] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[7], inl[:LABEL_68] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[10] ; bentIndex, statIndex, value
jmp_cmp &, 0x10, stor[10], inl[:LABEL_68] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat2, stor[0], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
jmp_cmp >=, 0, stor[8], inl[:LABEL_68] ; operand, right, addr
call Bttl_800c::scriptGetBentStat2, stor[0], MAX_HP, stor[9] ; bentIndex, statIndex, value
div 0x4, stor[9] ; amount, operand
jmp_cmp >=, stor[9], stor[8], inl[:LABEL_69] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[10] ; bentIndex, statIndex, value
jmp_cmp &, 0x40, stor[10], inl[:LABEL_70] ; operand, left, right, addr
LABEL_67:
call Bttl_800c::FUN_800cb9b0, stor[0], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_71] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x1 ; bentIndex, loop
return
LABEL_68:
call Bttl_800c::FUN_800cb9b0, stor[0], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xe, stor[8], inl[:LABEL_71] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0xe ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
return
LABEL_70:
call Bttl_800c::FUN_800cb9b0, stor[0], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xa, stor[8], inl[:LABEL_71] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0xa ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x1 ; bentIndex, loop
return
LABEL_69:
call Bttl_800c::FUN_800cb9b0, stor[0], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xb, stor[8], inl[:LABEL_71] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0xb ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x1 ; bentIndex, loop
LABEL_71:
return

; SUBROUTINE
LABEL_461:
jmp_cmp &, 0x2, stor[stor[stor[0], 28], 7], inl[:LABEL_462] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat2, stor[28], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
call Bttl_800c::scriptGetBentStat2, stor[28], MAX_HP, stor[9] ; bentIndex, statIndex, value
div 0x4, stor[9] ; amount, operand
jmp_cmp >=, stor[9], stor[8], inl[:LABEL_463] ; operand, left, right, addr
call Bttl_800c::scriptGetBentSlot, stor[28], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[10] ; amount, operand
mov var[45][stor[10]], stor[9] ; source, dest
and 0xf, stor[9] ; right, left
jmp_cmp ==, 0x6, stor[9], inl[:LABEL_464] ; operand, left, right, addr
LABEL_462:
call Bttl_800c::FUN_800cb9b0, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_465] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0x0 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[28], 0x1 ; bentIndex, loop
return
LABEL_464:
call Bttl_800c::FUN_800cb9b0, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xa, stor[8], inl[:LABEL_465] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0xa ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[28], 0x1 ; bentIndex, loop
return
LABEL_463:
call Bttl_800c::FUN_800cb9b0, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xb, stor[8], inl[:LABEL_465] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[28], 0xb ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[28], 0x1 ; bentIndex, loop
LABEL_465:
return

; SUBROUTINE
LABEL_288:
call Bttl_800c::scriptGetBentStat, stor[0], GUARD, stor[8] ; bentIndex, statIndex, value
and 0xfffffffe, stor[8] ; right, left
call Bttl_800c::scriptSetBentStat, stor[0], stor[8], GUARD ; bentIndex, value, statIndex
yield
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[8]][7], stor[9] ; source, dest
mov stor[9], stor[10] ; source, dest
and 0x3, stor[9] ; right, left
jmp_cmp ==, 0, stor[9], inl[:LABEL_289] ; operand, right, addr
sub 0x1, var[128 + stor[8]][7] ; amount, operand
LABEL_289:
mov stor[10], stor[9] ; source, dest
and 0xc, stor[9] ; right, left
jmp_cmp ==, 0, stor[9], inl[:LABEL_290] ; operand, right, addr
sub 0x4, var[128 + stor[8]][7] ; amount, operand
LABEL_290:
mov stor[10], stor[9] ; source, dest
and 0xc0, stor[9] ; right, left
jmp_cmp ==, 0, stor[9], inl[:LABEL_291] ; operand, right, addr
sub 0x40, var[128 + stor[8]][7] ; amount, operand
LABEL_291:
mov stor[10], stor[9] ; source, dest
and 0x300, stor[9] ; right, left
jmp_cmp ==, 0, stor[9], inl[:LABEL_292] ; operand, right, addr
sub 0x100, var[128 + stor[8]][7] ; amount, operand
LABEL_292:
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp &, 0x2, stor[9], inl[:LABEL_293] ; operand, left, right, addr
mov 0xffffffff, var[128 + stor[8]][4] ; source, dest
call Bttl_800c::scriptGetBentSlot, stor[0], stor[9], 0x1 ; bentIndex, charOrBentSlot, mode
add 0xb8, stor[9] ; amount, operand
mov 0xffffffff, var[45][stor[9]] ; source, dest
LABEL_293:
jmp_cmp &, 0x40, stor[7], inl[:LABEL_294] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x1, stor[8], inl[:LABEL_294] ; operand, left, right, addr
gosub inl[:LABEL_295] ; addr
jmp_cmp &, 0x40, stor[7], inl[:LABEL_294] ; operand, left, right, addr
mov 0, var[45][77] ; dest
mov 0, stor[8] ; dest
return
LABEL_294:
mov 0x1, stor[8] ; source, dest
return

; SUBROUTINE
LABEL_264:
gosub inl[:LABEL_265] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_267] ; operand, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xff, stor[8] ; right, left
jmp_cmp ==, 0, stor[8], inl[:LABEL_267] ; operand, right, addr
mov 0, stor[31] ; dest
LABEL_270:
jmp_cmp &, inl[:LABEL_268[stor[31]]], stor[8], inl[:LABEL_269] ; operand, left, right, addr
incr stor[31] ; operand
jmp_cmp ==, 0x8, stor[31], inl[:LABEL_267] ; operand, left, right, addr
jmp inl[:LABEL_270] ; addr
LABEL_269:
gosub inl[:LABEL_271] ; addr
LABEL_267:
return
LABEL_268:
data 0x1
data 0x2
data 0x4
data 0x8
data 0x10
data 0x20
data 0x40
data 0x80

; SUBROUTINE
LABEL_271:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
mov 0, var[45][stor[9]] ; dest
or 0x300, var[45][stor[9]] ; right, left
or stor[31], var[45][stor[9]] ; right, left
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[9], stor[stor[stor[0], 18], 9] ; source, dest
mov stor[0], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[31], stor[stor[stor[0], 18], 31] ; source, dest
call Bttl_800c::scriptGetBentSlot, stor[0], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[8] ; source, dest
shl stor[10], stor[8] ; right, left
mov stor[8], stor[stor[stor[0], 18], 8] ; source, dest
or stor[8], var[45][183] ; right, left
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_272] ; scriptIndex, address
yield
gosub inl[:LABEL_273] ; addr
return

; FORK RE-ENTRY
LABEL_272:
fork_reenter stor[28], 0xb, stor[31] ; index, entrypoint, p2
gosub inl[:LABEL_273] ; addr
yield
yield
deallocate

; SUBROUTINE
LABEL_273:
yield
jmp_cmp &, stor[8], var[45][183], inl[:LABEL_273] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_265:
mov 0, stor[8] ; dest
mov var[36][0], stor[28] ; source, dest
call Bttl_800c::scriptGetCharOrMonsterId, stor[28], stor[28] ; bentIndex, id
jmp_cmp <, 0xff, stor[28], inl[:LABEL_266] ; operand, left, right, addr
jmp_cmp >, 0xfd, stor[28], inl[:LABEL_266] ; operand, left, right, addr
incr stor[8] ; operand
LABEL_266:
return

; SUBROUTINE
LABEL_431:
call Bttl_800e::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[0], stor[stor[stor[0], 18], 30] ; source, dest
call SEffe::scriptSetScriptScript, stor[18], 0xffffffff, 0x10 ; scriptIndex, deffScriptIndex, entrypoint
yield
return
ENTRYPOINT_16:
mov 0, var[45][248] ; dest
yield
call Bttl_800c::scriptGetBentPos, stor[30], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
call SEffe::allocateDeffTmd, stor[18], 0xfff10 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], stor[30], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::allocateDeffTmd, stor[19], 0xfff0f ; effectIndex, flags
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x0, 0x400, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[19], stor[30], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x1b, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
LABEL_212:
yield
call Bttl_800c::scriptAnimationHasFinished, stor[30], stor[8] ; bentIndex, finished
jmp_cmp ==, 0, stor[8], inl[:LABEL_212] ; operand, right, addr
mov 0xffffff6f, stor[10] ; source, dest
mov 0xa, stor[9] ; source, dest
call Bttl_800d::FUN_800dac20, 0x6, 0xffee0000, 0xfff38000, 0xfff30000, stor[30] ; mode, x, y, z, scriptIndex
call Bttl_800d::FUN_800db034, 0x6, 0x0, 0xfffa8000, 0x0, stor[30] ; mode, x, y, z, scriptIndex
mov 0x0, stor[8] ; source, dest
gosub inl[:LABEL_213] ; addr
call Bttl_800d::FUN_800dac20, 0x0, stor[11], stor[12], stor[13], 0x0 ; mode, x, y, z, scriptIndex
call Bttl_800d::FUN_800db460, 0x5, 0x0, 0x10000, 0x120000, 0x0, 0x40, 0x6, 0x0 ; mode, x, y, z, ?, ticks, stepType, scriptIndex
mov 0x1, stor[8] ; source, dest
gosub inl[:LABEL_213] ; addr
call Bttl_800d::FUN_800db034, 0x0, stor[11], stor[12], stor[13], 0x0 ; mode, x, y, z, scriptIndex
call SEffe::scriptAddScaleScalerAttachment, stor[18], 0xd0, 0xd0, 0xd0, 0x0, 0x0, 0x0 ; effectIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x14, 0x80, 0x80, 0x80 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAllocateParticleEffect, stor[22], 0xffffffff, 0xfff03, 0x20, 0xc8, 0x1, 0x100, 0x0, 0x4 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[22], stor[30], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x12c, 0x12c, 0x12c ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[22], 0xf ; effectIndex, ticks
gosub inl[:LABEL_214] ; addr
gosub inl[:LABEL_216] ; addr
gosub inl[:LABEL_218] ; addr
gosub inl[:LABEL_224] ; addr
mov 0xf, stor[23] ; source, dest
LABEL_226:
mov 0x1, stor[8] ; source, dest
gosub inl[:LABEL_225] ; addr
yield
while stor[23], inl[:LABEL_226] ; counter, addr
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[19], 0xffffffff, 0x5, 0x1000, 0x400, 0x1000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0x7, 0x80, 0x80, 0x80 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
mov 0x5, stor[23] ; source, dest
LABEL_227:
mov 0x2, stor[8] ; source, dest
gosub inl[:LABEL_225] ; addr
yield
while stor[23], inl[:LABEL_227] ; counter, addr
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[19], 0xffffffff, 0xf, 0x1400, 0x1000, 0x1400 ; effectIndex, parentIndex, ticks, x, y, z
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x19, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddLifespanAttachment, stor[18], 0x19 ; effectIndex, ticks
gosub inl[:LABEL_228] ; addr
call SEffe::allocateDeffTmd, stor[20], 0xfff0d ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[20], stor[30], 0x0, 0xfffffc00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[20], 0xffffffff, 0x4000, 0x4000, 0x4000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[20], 0xffffffff, 0xc, 0x2200, 0x2200, 0x2200 ; effectIndex, parentIndex, ticks, x, y, z
mov inl[:LABEL_230[stor[8]]], stor[10] ; source, dest
mov inl[:LABEL_231[stor[8]]], stor[11] ; source, dest
mov inl[:LABEL_232[stor[8]]], stor[12] ; source, dest
div 0x2, stor[10] ; amount, operand
div 0x2, stor[11] ; amount, operand
div 0x2, stor[12] ; amount, operand
call SEffe::scriptAddConstantColourScalerAttachment, stor[20], 0xffffffff, 0x18, stor[10], stor[11], stor[12] ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
yield
jmp_cmp !=, 0x3, stor[8], inl[:LABEL_233] ; operand, left, right, addr
LABEL_233:
mov inl[:LABEL_230[stor[8]]], stor[10] ; source, dest
mov inl[:LABEL_231[stor[8]]], stor[11] ; source, dest
mov inl[:LABEL_232[stor[8]]], stor[12] ; source, dest
mul 0x2, stor[10] ; amount, operand
jmp_cmp >=, 0xff, stor[10], inl[:LABEL_234] ; operand, left, right, addr
mov 0xff, stor[10] ; source, dest
LABEL_234:
mul 0x2, stor[11] ; amount, operand
jmp_cmp >=, 0xff, stor[11], inl[:LABEL_235] ; operand, left, right, addr
mov 0xff, stor[11] ; source, dest
LABEL_235:
mul 0x2, stor[12] ; amount, operand
jmp_cmp >=, 0xff, stor[12], inl[:LABEL_236] ; operand, left, right, addr
mov 0xff, stor[12] ; source, dest
LABEL_236:
mov 0xf, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddLifespanAttachment, stor[19], 0xa ; effectIndex, ticks
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
call Bttl_800d::FUN_800db460, 0x5, 0x80000, 0x10000, 0x180000, 0x0, 0x190, 0x6, 0x0 ; mode, x, y, z, ?, ticks, stepType, scriptIndex
LABEL_237:
yield
jmp_cmp ==, 0, var[45][248], inl[:LABEL_237] ; operand, right, addr
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[20], 0xffffffff, 0x5, 0x4000, 0x4000, 0x4000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[20], 0xffffffff, 0x5, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, velocityX, velocityY, velocityZ
call SEffe::scriptAddLifespanAttachment, stor[20], 0xa ; effectIndex, ticks
call Scus94491BpeSegment::scriptStartFadeEffect, 0x3, 0xe ; type, frames
mov 0xd, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_214] ; addr
gosub inl[:LABEL_238] ; addr
gosub inl[:LABEL_224] ; addr
call Bttl_800c::scriptSetBentPos, stor[30], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x1e, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, a2, a3, initialDelay, repeatDelay
mov 0x2, var[45][248] ; source, dest
deallocate

; SUBROUTINE
LABEL_225:
add stor[9], stor[10] ; amount, operand
call Bttl_800c::FUN_800cbb00, stor[30], stor[30], 0x1, 0x0, stor[10], 0x0 ; bentIndex0, bentIndex1, ticks, x, y, z
return

; SUBROUTINE
LABEL_213:
call Bttl_800d::scriptCalculateCameraValue, stor[8], 0x0, 0x0, 0x0, stor[11] ; type, mode, component, scriptIndex, out
call Bttl_800d::scriptCalculateCameraValue, stor[8], 0x0, 0x1, 0x0, stor[12] ; type, mode, component, scriptIndex, out
call Bttl_800d::scriptCalculateCameraValue, stor[8], 0x0, 0x2, 0x0, stor[13] ; type, mode, component, scriptIndex, out
shl 0x8, stor[11] ; right, left
shl 0x8, stor[12] ; right, left
shl 0x8, stor[13] ; right, left
return
LABEL_230:
data 0x96
data 0x31
data 0x83
data 0x3a
data 0x6c
data 0x31
data 0x2c
data 0x99
data 0x83
data 0x80
LABEL_231:
data 0x19
data 0x72
data 0x82
data 0x26
data 0x30
data 0x72
data 0x46
data 0x64
data 0x82
data 0x80
LABEL_232:
data 0x20
data 0x29
data 0x6c
data 0x5e
data 0x6c
data 0x29
data 0x78
data 0x28
data 0x6c
data 0x80
LABEL_675:
data 0xff
data 0x55
data 0x74
data 0x10
data 0xd8
data 0x55
data 0x51
data 0xe7
data 0x74
data 0xf5
data 0x0
LABEL_676:
data 0x20
data 0xc8
data 0x70
data 0x10
data 0x88
data 0xc8
data 0xa6
data 0xa5
data 0x70
data 0xff
data 0x0
LABEL_677:
data 0x0
data 0x83
data 0x44
data 0xd8
data 0xd4
data 0x83
data 0xe8
data 0x3c
data 0x44
data 0xd7
data 0x0
ENTRYPOINT_17:
gosub inl[:LABEL_32] ; addr
mov stor[0], stor[30] ; source, dest
gosub inl[:LABEL_96] ; addr
and 0xfffffffe, var[45][245] ; right, left
gosub inl[:LABEL_151] ; addr
consume

; SUBROUTINE
LABEL_295:
gosub inl[:LABEL_76] ; addr
jmp_cmp !=, 0, stor[31], inl[:LABEL_296] ; operand, right, addr
mov stor[0], stor[28] ; source, dest
call Bttl_800c::scriptGetBentStat, stor[0], HP_REGEN, stor[9] ; bentIndex, statIndex, value
gosub inl[:LABEL_297] ; addr
jmp_cmp ==, 0, stor[9], inl[:LABEL_299] ; operand, right, addr
jmp_cmp >, 0, stor[9], inl[:LABEL_300] ; operand, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], MAX_HP, stor[8] ; bentIndex, statIndex, value
mul stor[9], stor[8] ; amount, operand
div 0x64, stor[8] ; amount, operand
gosub inl[:LABEL_141] ; addr
gosub inl[:LABEL_66] ; addr
mov 0x0, stor[8] ; source, dest
gosub inl[:LABEL_301] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
jmp inl[:LABEL_299] ; addr
LABEL_300:
call Scus94491BpeSegment::scriptPlayBentSound, 0x1, stor[0], 0x6, 0x1, 0x0, 0x0, 0x0 ; type, bentIndex, soundIndex, a3, a4, initialDelay, repeatDelay
neg stor[9] ; operand
call Bttl_800c::scriptGetBentStat, stor[0], MAX_HP, stor[8] ; bentIndex, statIndex, value
mul stor[9], stor[8] ; amount, operand
div 0x64, stor[8] ; amount, operand
mov stor[8], stor[32] ; source, dest
gosub inl[:LABEL_41] ; addr
or stor[9], var[45][188] ; right, left
gosub inl[:LABEL_33] ; addr
jmp_cmp &, 0x40, stor[7], inl[:LABEL_296] ; operand, left, right, addr
LABEL_299:
call Bttl_800c::scriptGetBentStat, stor[0], MP_REGEN, stor[9] ; bentIndex, statIndex, value
jmp_cmp ==, 0, stor[9], inl[:LABEL_312] ; operand, right, addr
mov stor[9], stor[8] ; source, dest
gosub inl[:LABEL_81] ; addr
mov 0x1, stor[8] ; source, dest
gosub inl[:LABEL_301] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
LABEL_312:
call Bttl_800c::scriptGetBentStat, stor[0], SP_REGEN, stor[8] ; bentIndex, statIndex, value
jmp_cmp ==, 0, stor[8], inl[:LABEL_296] ; operand, right, addr
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_296] ; operand, right, addr
gosub inl[:LABEL_92] ; addr
mov 0x2, stor[8] ; source, dest
gosub inl[:LABEL_301] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
LABEL_296:
return

; SUBROUTINE
LABEL_297:
and 0xff, stor[9] ; right, left
jmp_cmp !&, 0x80, stor[9], inl[:LABEL_298] ; operand, left, right, addr
mov 0xffffffff, stor[8] ; source, dest
and 0xffffff00, stor[8] ; right, left
or stor[9], stor[8] ; right, left
mov stor[8], stor[9] ; source, dest
LABEL_298:
return

; SUBROUTINE
LABEL_74:
jmp_cmp &, 0x40, stor[7], inl[:LABEL_75] ; operand, left, right, addr
gosub inl[:LABEL_76] ; addr
jmp_cmp !=, 0, stor[31], inl[:LABEL_75] ; operand, right, addr
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_43] ; addr
jmp_cmp !=, 0, stor[8], inl[:LABEL_78] ; operand, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], MP_PER_PHYSICAL_HIT, stor[9] ; bentIndex, statIndex, value
gosub inl[:LABEL_79] ; addr
call Bttl_800c::scriptGetBentStat, stor[0], SP_PER_PHYSICAL_HIT, stor[8] ; bentIndex, statIndex, value
gosub inl[:LABEL_88] ; addr
LABEL_75:
return
LABEL_78:
call Bttl_800c::scriptGetBentStat, stor[0], MP_PER_MAGICAL_HIT, stor[9] ; bentIndex, statIndex, value
gosub inl[:LABEL_79] ; addr
call Bttl_800c::scriptGetBentStat, stor[0], SP_PER_MAGICAL_HIT, stor[8] ; bentIndex, statIndex, value
gosub inl[:LABEL_88] ; addr
return

; SUBROUTINE
LABEL_79:
jmp_cmp ==, 0, stor[9], inl[:LABEL_80] ; operand, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], MAX_MP, stor[8] ; bentIndex, statIndex, value
mul stor[9], stor[8] ; amount, operand
div 0x64, stor[8] ; amount, operand
gosub inl[:LABEL_81] ; addr
mov 0x1, stor[8] ; source, dest
gosub inl[:LABEL_84] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
LABEL_80:
return

; SUBROUTINE
LABEL_88:
jmp_cmp ==, 0, stor[8], inl[:LABEL_89] ; operand, right, addr
gosub inl[:LABEL_90] ; addr
jmp_cmp ==, 0, stor[10], inl[:LABEL_89] ; operand, right, addr
gosub inl[:LABEL_92] ; addr
mov 0x2, stor[8] ; source, dest
gosub inl[:LABEL_84] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
LABEL_89:
return

; SUBROUTINE
LABEL_41:
call Bttl_800c::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; right, left
return

; SUBROUTINE
LABEL_128:
mov 0, stor[8] ; dest
call Bttl_800c::scriptGetBentStat, stor[0], REVIVE, stor[9] ; bentIndex, statIndex, value
rand 0x64, stor[10] ; bound, dest
jmp_cmp <=, stor[9], stor[10], inl[:LABEL_129] ; operand, left, right, addr
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[23] ; bentIndex, statIndex, value
jmp_cmp &, 0x1, stor[23], inl[:LABEL_129] ; operand, left, right, addr
gosub inl[:LABEL_130] ; addr
mov 0x1, stor[8] ; source, dest
LABEL_129:
return

; SUBROUTINE
LABEL_130:
mov stor[0], stor[28] ; source, dest
mov stor[0], stor[30] ; source, dest
gosub inl[:LABEL_131] ; addr
mov 0x28, stor[23] ; source, dest
wait stor[23] ; frames
call Bttl_800c::FUN_800cb9b0, stor[0], stor[8] ; bentIndex, animationIndex
jmp_cmp !=, 0xe, stor[8], inl[:LABEL_139] ; operand, left, right, addr
call Bttl_800c::scriptSetCurrentBentAnimationIndex, stor[0], 0x9 ; bentIndex, animIndex
call Bttl_800c::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
gosub inl[:LABEL_60] ; addr
LABEL_139:
gosub inl[:LABEL_140] ; addr
gosub inl[:LABEL_66] ; addr
return

; SUBROUTINE
LABEL_331:
jmp_cmp !&, 0x2, var[45][244], inl[:LABEL_332] ; operand, left, right, addr
rand var[53], stor[8] ; bound, dest
mov var[52][stor[8]], stor[28] ; source, dest
call Bttl_800f::FUN_800f9a50, 0x1, stor[28] ; targetType, targetBentIndex
LABEL_332:
return

; SUBROUTINE
LABEL_114:
call Bttl_800c::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp !&, 0x4000, stor[8], inl[:LABEL_115] ; operand, left, right, addr
mov 0x9, stor[8] ; source, dest
return
LABEL_115:
call Bttl_800c::scriptGetCharOrMonsterId, stor[0], stor[8] ; bentIndex, id
return

; SUBROUTINE
LABEL_228:
call Bttl_800c::scriptGetBentStat, stor[30], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp !&, 0x4000, stor[8], inl[:LABEL_229] ; operand, left, right, addr
mov 0x9, stor[8] ; source, dest
return
LABEL_229:
call Bttl_800c::scriptGetCharOrMonsterId, stor[30], stor[8] ; bentIndex, id
return

; SUBROUTINE
LABEL_493:
call Bttl_800c::scriptGetBentStat, stor[29], STATUS, stor[23] ; bentIndex, statIndex, value
jmp_cmp !&, 0x4000, stor[23], inl[:LABEL_494] ; operand, left, right, addr
mov 0x9, stor[23] ; source, dest
return
LABEL_494:
call Bttl_800c::scriptGetCharOrMonsterId, stor[29], stor[23] ; bentIndex, id
return
data 0xa90338
data 0x200001e
data 0x5
data 0x2000016
data 0x70341
data 0x1000000
data 0x4000
data 0x2000016
data 0x9000009
data 0x208
data 0x9
data 0x2000016
data 0x49
data 0xa70238
data 0x200001e
data 0x2000016
data 0x49

; SUBROUTINE
LABEL_259:
call Bttl_800c::scriptGetBentStat, stor[0], EQUIPMENT_WEAPON_SLOT, stor[8] ; bentIndex, statIndex, value
jmp_cmp !=, 0x2c, stor[8], inl[:LABEL_260] ; operand, left, right, addr
or 0x1, var[45][stor[9]] ; right, left
LABEL_260:
call Bttl_800c::scriptGetBentStat, stor[0], EQUIPMENT_ACCESSORY_SLOT, stor[8] ; bentIndex, statIndex, value
jmp_cmp !=, 0x9c, stor[8], inl[:LABEL_261] ; operand, left, right, addr
or 0x2, var[45][stor[9]] ; right, left
LABEL_261:
call Bttl_800c::scriptGetBentStat, stor[0], EQUIPMENT_ACCESSORY_SLOT, stor[8] ; bentIndex, statIndex, value
jmp_cmp !=, 0x9d, stor[8], inl[:LABEL_262] ; operand, left, right, addr
or 0x2, var[45][stor[9]] ; right, left
or 0x4, var[45][stor[9]] ; right, left
LABEL_262:
return
LABEL_215:
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0

; SUBROUTINE
LABEL_214:
memcpy 0x18, stor[8], inl[:LABEL_215] ; size, src, dest
return

; SUBROUTINE
LABEL_224:
memcpy 0x18, inl[:LABEL_215], stor[8] ; size, src, dest
return
