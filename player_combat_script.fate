entrypoint :ENTRYPOINT_0

; Entrypoint
ENTRYPOINT_0: ; comment
yield
call Class_abcd::method_1234, 100, 0xffffffff ; immediates
call Class_abcd::method_1234, stor[10], stor[0x1] ; storage
call Class_abcd::method_1234, stor[stor[stor[0], 0x1], 3] ; other other storage
call Class_abcd::method_1234, stor[stor[0xa], 10 + stor[5]] ; other storage offset
call Class_abcd::method_1234, var[100] ; game var 1
call Class_abcd::method_1234, var[100 + stor[0x10]] ; game var 2
call Class_abcd::method_1234, var[100][stor[0x10]] ; game var array 1
call Class_abcd::method_1234, var[100 + stor[0xa]][stor[0x10]] ; game var array 2
call Class_abcd::method_1234, inl[:LABEL_1] ; inline 1
call Class_abcd::method_1234, inl[:LABEL_1[stor[10]]] ; inline 2
call Class_abcd::method_1234, inl[:LABEL_1[:LABEL_1[stor[10]]]] ; inline table 1
call Class_abcd::method_1234, inl[:LABEL_1[:LABEL_1[stor[10]] + stor[11]]] ; inline table 2
call Class_abcd::method_1234, stor[stor[0], 10] ; other storage
call Class_abcd::method_1234, var[100 + 0xf] ; game var 3
call Class_abcd::method_1234, var[100][0xf] ; game var array 3
call Class_abcd::method_1234, var[100 + stor[0xe]][0xb] ; game var array 4
call Class_abcd::method_1234, var[100 + 0xf][stor[1]] ; game var array 5
call Class_abcd::method_1234, inl[:LABEL_2] ; inline 3
call Class_abcd::method_1234, inl[:LABEL_1 + inl[:LABEL_1 + 12]] ; inline table 3
call Class_abcd::method_1234, inl[:LABEL_1[:LABEL_1[10] + 11]] ; inline table 4
jmp inl[:ENTRYPOINT_0]

LABEL_1:
data 0x100
data 0x200
data 0x300

LABEL_2:
rel :JUMP

JUMP:
data str[hello.]
gosub inl[:SUB]
return

SUB:
noop
return